<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>后端开发基础（三）- maven</title>
      <link href="/post/34f041e5.html"/>
      <url>/post/34f041e5.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在软件开发中，一个项目的依赖管理，项目结构以及项目构建流程对于不同的开发者来说可能有一套属于自己的方式，对于独立开发来说这不是什么大问题，但是一个人的力量往往是有限的，所以我们不可避免的要进行团队协作，如果每个开发者都坚守一套自己的规则，那是既不利于团队开发的。而 maven 就为我们提供了一套很好的解决方案，maven 是 apache 开源基金会的一个项目，它为 java 语言提供了一个很好的第三方依赖管理以及项目管理的解决方案。对于其他编程语言都有自己的第三方依赖管理，比如 python 的 pip，js 的 npm 等，这些依赖管理工具能让我们站在巨人的肩膀上生产出更好的作品来回馈社区。</p><h2 id="maven-项目结构"><a href="#maven-项目结构" class="headerlink" title="maven 项目结构"></a>maven 项目结构</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">项目文件夹</span><br><span class="line">├── src      源文件</span><br><span class="line">│   ├── main</span><br><span class="line">│   │   ├── java  主程序</span><br><span class="line">│   │   └── resources  静态资源</span><br><span class="line">│   └── test</span><br><span class="line">│       └── java  测试代码</span><br><span class="line">├── target   编译好的class文件和jar包等</span><br><span class="line">│   ├── classes</span><br><span class="line">│   ├── ...</span><br><span class="line">│   └── xxx.jar</span><br><span class="line">└── pox.xml</span><br></pre></td></tr></table></figure><h2 id="maven-依赖管理"><a href="#maven-依赖管理" class="headerlink" title="maven 依赖管理"></a>maven 依赖管理</h2><p>maven 使用 xml 来配置项目工程，在项目中的 pom.xml 文件中配置项目的依赖的信息，在 dependencies 标签中配置所需要的 dependency，格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.36<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>groupId 标签为组织名称，如果组织下项目比较多需要细分的话则可以在后面添加项目名称</li><li>artifactId 标签为项目或模块名称</li><li>version 标签为版本</li></ul><h2 id="maven-依赖传递"><a href="#maven-依赖传递" class="headerlink" title="maven 依赖传递"></a>maven 依赖传递</h2><p>如果当 A 工程导入了 B 工程，而 B 工程导入了 C 工程，那么 A 工程中在构建打包时也会打包 C 工程所需的依赖</p><p>如果 A 工程不需要 C 工程的某个依赖，可以使用 exclusions 标签来排除这个工程中的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>priv.ana<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-projectB<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="maven-依赖范围"><a href="#maven-依赖范围" class="headerlink" title="maven 依赖范围"></a>maven 依赖范围</h2><p>在 dependency 标签中使用 scope 标签可以配置每个依赖的依赖范围，格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依赖范围有以下三种：</p><ul><li>主程序范围，main 文件夹</li><li>测试程序范围，test 文件夹</li><li>打包运行范围，jar 包</li></ul><p>scope 标签的常见值如下：</p><table><thead><tr><th>值</th><th>主程序</th><th>测试</th><th>打包（运行）</th></tr></thead><tbody><tr><td>compile(默认)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>test</td><td>-</td><td>Y</td><td>-</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td>-</td></tr><tr><td>runtime</td><td>-</td><td>Y</td><td>Y</td></tr></tbody></table><h2 id="maven-构建生命周期"><a href="#maven-构建生命周期" class="headerlink" title="maven 构建生命周期"></a>maven 构建生命周期</h2><p>maven 有以下三个标准的生命周期：</p><ol><li>Clean 生命周期：<ul><li>clean：删除目标目录中的编译输出文件。</li></ul></li><li>Default 生命周期：<ul><li>validate：验证项目的正确性，例如检查项目的版本是否正确。</li><li>compile：编译项目的源代码。</li><li>test：运行项目的单元测试。</li><li>package：将编译后的代码打包成可分发的格式，例如 JAR 或 WAR。</li><li>verify：对项目进行额外的检查以确保质量。</li><li>install：将项目的构建结果安装到本地 Maven 仓库中，以供其他项目使用。</li><li>deploy：将项目的构建结果复制到远程仓库，以供其他开发人员或团队使用。</li></ul></li><li>Site 生命周期：<ul><li>site：生成项目文档和站点信息。</li><li>deploy-site：将生成的站点信息发布到远程服务器，以便共享项目文档。</li></ul></li></ol><h2 id="maven-继承"><a href="#maven-继承" class="headerlink" title="maven 继承"></a>maven 继承</h2><p>maven 中可以实现工程与工程之间的继承关系，比如当我们开发多个模块中存在很多的共同依赖则可以将这些依赖抽取成一个父工程，然后让各个模块成为它的子工程，所以说一个父工程就是用来进行多个模块的依赖管理的，与子工程不一样的是父工程的打包方式需要为 pom，以下为样例：</p><p>父工程 xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>priv.ana<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven-project-parent<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> <span class="comment">&lt;!-- 共同依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子工程 xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>priv.ana<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-part1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven-project-part1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子工程的 parent 标签中需要指定父工程 pom.xml 位置，如果子父工程的结构如下则可以使用以上配置：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">父工程文件夹</span><br><span class="line">├── 子工程1文件夹</span><br><span class="line">├── 子工程2文件夹</span><br><span class="line">├── 子工程3文件夹</span><br><span class="line">├── ...</span><br><span class="line">└── pox.xml</span><br></pre></td></tr></table></figure><p>如果这整个工程为一个 springboot 工程，则可以在父工程的 parent 标签中指定 springboot 的父工程，并且将 relativePath 标签设置为空，表示需要到仓库中拉取。</p><h2 id="maven-依赖版本管理"><a href="#maven-依赖版本管理" class="headerlink" title="maven 依赖版本管理"></a>maven 依赖版本管理</h2><p>在整个项目当中如果分了模块来进行开发，那么模块与模块之间就会存在版本不同的问题，这样不便于管理和维护，所以在整个项目的父工程中可以使用 dependencyManagement 标签进行依赖版本管理，示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">jjwt.version</span>&gt;</span>0.12.3<span class="tag">&lt;/<span class="name">jjwt.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pagehelper-spring-boot-starter.version</span>&gt;</span>1.4.7<span class="tag">&lt;/<span class="name">pagehelper-spring-boot-starter.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mybatis-spring-boot.version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">mybatis-spring-boot.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pagehelper-spring-boot-starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jjwt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时，如果管理的依赖过多，依赖的版本号会散落在各处，使用 properties 标签可以将版本号等信息集中起来方便管理。<br>这样，后续在子工程中使用到父工程管理的依赖时就可以不用指定版本号来使用父工程管理好的版本了。</p><h2 id="maven-聚合"><a href="#maven-聚合" class="headerlink" title="maven 聚合"></a>maven 聚合</h2><p>多个子工程之间如果互相依赖，那么在打包时需要将这些工程按照依赖的顺序先后打包，如果需要手动进行这些操作将会非常的繁琐而且还需要我们去分析这些模块之间的依赖关系，而 maven 中的聚合可以解决这个问题，在父工程的 pom.xml 文件中配置 modules 标签然后对父工程执行标准的生命周期，则可以实现多模块的构建，以下为样例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>maven-project-part1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>maven-project-part2<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>maven-project-part3<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="maven-私服"><a href="#maven-私服" class="headerlink" title="maven 私服"></a>maven 私服</h2><p>当我们开发好的模块需要给其他开发成员使用时，就需要将编译好的文件上传到 maven 仓库中，但是 maven 的中央仓库我们并没有权限上传代码，所以我们就需要建立一个 maven 的私服仓库。</p><p>Nexus 是一个可以使用 docker 部署的第三方依赖仓库，安装好 docker 后使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8081:8081 --name nexus -v /var/opt/nexus/nexus-data:/nexus-data --restart=always sonatype/nexus3</span><br></pre></td></tr></table></figure><p>此命令会下载 Nexus 的镜像并启动容器，将容器的 8081 端口映射到主机的 8081 端口，并将容器的&#x2F;nexus-data 目录挂载到主机的&#x2F;var&#x2F;opt&#x2F;nexus&#x2F;nexus-data 目录。<br>然后就可以通过 <a href="http://ip:8081/">http://IP:8081</a> 访问管理面板了。</p><p>如果出现启动失败可以使用 <code>docker logs -f nexus</code> 查看日志，一般的问题为容器没有权限访问主机的&#x2F;var&#x2F;opt&#x2F;nexus&#x2F;nexus-data 目录，可以使用<code>chmod 777 /var/opt/nexus/nexus-data</code>命令给予权限，然后重启容器即可。</p><p>默认账号为 admin，密码在文件&#x2F;nexus-data&#x2F;admin.password 中，也就是主机的&#x2F;var&#x2F;opt&#x2F;nexus&#x2F;nexus-data&#x2F;admin.password，第一次登录之后需要修改密码。</p><h3 id="私服仓库"><a href="#私服仓库" class="headerlink" title="私服仓库"></a>私服仓库</h3><p>默认的私服仓库有三个，分别为：</p><ul><li>maven-central：maven 中央仓库的代理，通过这个仓库下载的包会缓存在这个仓库中，以便于下次使用</li><li>maven-releases：发布版的仓库，如果版本号后面什么都没加或者添加了 RELEASE 则上传到这个仓库中</li><li>maven-snapshots：快照版的仓库，如果版本号后面添加了 SNAPSHOT 则上传到这个仓库中</li></ul><p>除了这三个仓库之外还有一个仓库组：</p><ul><li>maven-public：通过这个仓库组下载依赖时会从三个仓库中搜索相应的包，在 maven 配置中设置这个下载源就可使用自己开发的依赖以及中央仓库中的依赖</li></ul><p>nexus 除了支持 maven 的仓库之外还支持 docker，apt，npm，pip 的仓库，可以按需使用</p><h3 id="maven-配置"><a href="#maven-配置" class="headerlink" title="maven 配置"></a>maven 配置</h3><p>maven 默认连接的是中央仓库，需要在 maven 的 settings.xml 和项目的 pom.xml 添加配置才能连接私服仓库。</p><p>settings.xml 需要使用 servers 配置仓库的账号密码，然后使用 mirrors 更改下载源：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.2.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servers</span>&gt;</span> <span class="comment">&lt;!--仓库的账号和密码--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>账号<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>账号<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>账号<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span> <span class="comment">&lt;!--下载源地址--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.100.88:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span> <span class="comment">&lt;!--指定快照版本的依赖依然允许使用--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>allow-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.100.88:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>项目中的 pom.xml 中需要使用 distributionManagement 添加 releases 和 snapshots 仓库的地址：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.100.88:8081/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.100.88:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发 </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三层架构和分层解耦</title>
      <link href="/post/de55ev34.html"/>
      <url>/post/de55ev34.html</url>
      
        <content type="html"><![CDATA[<h2 id="内聚和耦合"><a href="#内聚和耦合" class="headerlink" title="内聚和耦合"></a>内聚和耦合</h2><p>在软件的设计开发中离不开两个词，内聚性和耦合性 🤔。<br>内聚性是指机能相关的程序组合成一模块的程度，以下的情形会降低程序的内聚性：</p><ul><li>许多机能封装在一类型内，可以借由方法供外界使用，但机能彼此类似之处不多。</li><li>在方法中进行许多不同的机能，使用的是相关性低或不相关的资料。</li></ul><p>低内聚性的缺点如下：</p><ul><li>增加理解模块的困难度。</li><li>增加维护系统的困难度，因为一个逻辑修改会影响许多模块，而一个模块的修改会使得一些相关模块也要修改。</li><li>增加模块复用困难度，因为大部分的应用程序无法复用一个由许多不一定相关的机能组成的模块。</li></ul><p>耦合性是与耦合性是指一程序中模块及模块之间信息或参数依赖的程度。耦合性可以是低耦合性（或称为松散耦合），也可以是高耦合性（或称为紧密耦合）。</p><p>紧密耦合的系统在开发阶段有以下的缺点：</p><ul><li>一个模块的修改会产生涟漪效应，其他模块也需随之修改。</li><li>由于模块之间的相依性，模块的组合会需要更多的精力及时间。</li><li>由于一个模块有许多的相依模块，模块的可复用性低。</li></ul><p>一个优秀的应用程序应当是高内聚和松散耦合的。在开发 web 应用程序时，解决内聚性和耦合性是一个不得不面对的问题，而 spring 框架为我们提供一个很好的解决方案。</p><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><p>在这里我们给出一个示例程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).getFile();</span><br><span class="line">        List&lt;Emp&gt; list = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">        list.forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">switch</span> (gender) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> -&gt; emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> -&gt; emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span> -&gt; emp.setGender(<span class="string">&quot;其他&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">switch</span> (job) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> -&gt; emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> -&gt; emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span> -&gt; emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> Result.success(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例程序中我们在接收到请求时，会将读取<code>emp.xml</code>中的数据并将数据封装入 JavaBean 对象中，然后替换对应字段，接着将处理好的数据封装入 Result 对象中并以 json 的形式返回响应。<br>这个程序代码并不长但是这并不是一个好的程序。它将数据的读取，处理和返回都放在了同一个方法中，这功能之间确实是互相依赖的但彼此之间是可以相互独立的，所以这种写法并不便于后续的开发和维护。根据前面内聚性和耦合性的知识，我们可以判断出这是一个高耦合且低内聚的程序。<br>现在，我们将要对其进行改造。我们将这个方法中对数据的操作分为三个部分：</p><ol><li>数据的读取</li><li>数据的处理</li><li>数据的返回</li></ol><p>并用 spring 中三个层来进行改造，我们先看看 spring 中的三个层之间与前端和数据库的关系：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LRsubgraph Frontendendsubgraph Backendsubgraph Controllerdirection TBA[XxxController]B[XxxController]C[XxxController]endsubgraph Servicedirection TBD[XxxService]E[XxxService]F[XxxService]endsubgraph Daodirection TBG[XxxDao]H[XxxDao]I[XxxDao]endendsubgraph DatabaseendFrontend -- httpRequest --&gt; Backend -- getData --&gt; DatabaseDatabase -- returnData --&gt; Backend -- httpRespond --&gt; FrontendController -- call --&gt; Service -- call --&gt; DaoDao --&gt; Service --&gt; Controller  </pre></div><p>Controller：用于处理 http 请求和返回响应<br>Service：用于处理业务逻辑，处理数据<br>Dao：<code>data access object</code>的缩写，用于和数据库交互获取数据</p><p>现在我们基于这三层架构对程序进行改造：</p><p>Controller 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">EmpService</span> <span class="variable">empService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpServiceA</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(empService.listEmp());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Service层接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Service层实现类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">EmpDao</span> <span class="variable">empDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpDaoA</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Emp&gt; list = empDao.listEmp();</span><br><span class="line">        list.forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">switch</span> (gender) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> -&gt; emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> -&gt; emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span> -&gt; emp.setGender(<span class="string">&quot;其他 &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">switch</span> (job) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> -&gt; emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> -&gt; emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span> -&gt; emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dao 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dao层接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dao层实现类</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoA</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> Objects.requireNonNull(<span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>)).getFile();</span><br><span class="line">        <span class="keyword">return</span> XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过改造后，我们成功将每个模块都独立了出来，便于我们后期对各个模块进行维护和拓展功能，虽然我们提高了每个模块自身的内聚性，但是我们并没有解决每个层之间的耦合性，当我们产品迭代需要开发新的实现类时，我们还是需要到每个层中实例化对应的对象。这仍然不便于协作开发，因此我们需要分层解耦。</p><h2 id="分层解耦"><a href="#分层解耦" class="headerlink" title="分层解耦"></a>分层解耦</h2><p>IOC（控制反转，Inversion of Control）和 DI（依赖注入，Dependency Injection），通过使用这两个概念我们能实现组件之间的解耦和提高代码的可维护性。下面是这两个概念的详细解释。</p><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><p>控制反转是一种设计原则，它将对象的创建和管理权从应用程序代码转移到外部容器。换句话说，IOC 让框架或容器负责控制程序的执行流，而不是由程序自身来控制。<br>在传统的编程中，程序通常会直接创建和管理依赖对象。但在 IOC 中，应用程序通过依赖于抽象（如接口或基类）来声明所需的依赖，而具体的实现和生命周期则由 IOC 容器负责。</p><h3 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h3><p>依赖注入是指在一个 JavaBean 对象在使用时将其依赖的其他对象从 IOC 容器中注入到 JavaBean 对象中。</p><p>spring 中提供了这两个概念的具体实现，使用以下注释可以将 JavaBean 的控制权交给 spring 的 IoC 容器：</p><table><thead><tr><th>注解</th><th>说明</th><th>位置</th></tr></thead><tbody><tr><td>@Component</td><td>声明 bean 的基础注解</td><td>不属于下面三类</td></tr><tr><td>@Controller</td><td>@Component 的衍生注解</td><td>控制器类</td></tr><tr><td>@Service</td><td>@Component 的衍生注解</td><td>业务类</td></tr><tr><td>@Repository</td><td>@Component 的衍生注解</td><td>数据访问类</td></tr></tbody></table><p>使用<code>@Autowired</code>注解可以在使用到相关类时让 spring 的 IoC 容器自动装配到此类中。<br>使用这些注解改造后的代码：</p><p>Controller 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(empService.listEmp());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Service层接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Service层实现类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpDao empDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Emp&gt; list = empDao.listEmp();</span><br><span class="line">        list.forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">switch</span> (gender) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> -&gt; emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> -&gt; emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span> -&gt; emp.setGender(<span class="string">&quot;其他 &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">switch</span> (job) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> -&gt; emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> -&gt; emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span> -&gt; emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dao 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dao层接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dao层实现类</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoA</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> Objects.requireNonNull(<span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>)).getFile();</span><br><span class="line">        <span class="keyword">return</span> XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>@RestController</code>注解是包含了<code>@Controller</code>和<code>@ResponseBody</code>注解的。</p><p>通过这些操作我们成功降低了三层之间的耦合性 🥳</p><p>不过还有一个小问题，如果在后期我们新增了一个 Service 接口的实现类，那么在 autowired 时就会出现 Error，IoC 容器并不知道要注入哪个实现类对象，对于这个问题有三种解决方法：</p><ol><li><p>@Primary：使用<code>@Primary</code>提升注入的优先级<br>使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> EmpDao empDao;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">     List&lt;Emp&gt; list = empDao.listEmp();</span><br><span class="line">     list.forEach(emp -&gt; &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">         <span class="keyword">switch</span> (gender) &#123;</span><br><span class="line">             <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> -&gt; emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">             <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> -&gt; emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">             <span class="keyword">case</span> <span class="string">&quot;3&quot;</span> -&gt; emp.setGender(<span class="string">&quot;其他 &quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">         <span class="keyword">switch</span> (job) &#123;</span><br><span class="line">             <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> -&gt; emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">             <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> -&gt; emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">             <span class="keyword">case</span> <span class="string">&quot;3&quot;</span> -&gt; emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="keyword">return</span> list;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@Qualifier：使用<code>@Qualifier</code>预选择注入的类，通过名称指定，名称可以在<code>@Component</code>处修改<br>使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line"> <span class="meta">@Qualifier(&quot;empServiceA&quot;)</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> EmpService empService;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> Result.success(empService.listEmp());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@Resource：这是 Java EE 规范中提供的，<code>@Resource</code>用于资源的查找的注入<br>使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line"> <span class="meta">@Resource(name = &quot;empServiceA&quot;)</span></span><br><span class="line"> <span class="keyword">private</span> EmpService empService;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> Result.success(empService.listEmp());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>controller响应请求</title>
      <link href="/post/236k9554.html"/>
      <url>/post/236k9554.html</url>
      
        <content type="html"><![CDATA[<div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR  A[浏览器（browser）]  B[前端控制器\nDispathcherServlet]  C[XxxController]  D[XxxController]  E[XxxController]  F[App]  G[小程序]  subgraph 客户端    direction TB    A    F    G  end  subgraph web服务器    direction LR    B -- 2 --&gt; C -- 3 --&gt; B    B -- 2 --&gt; D -- 3 --&gt; B    B -- 2 --&gt; E -- 3 --&gt; B  end  客户端 -- 1 --&gt; web服务器 -- 4 --&gt; 客户端  </pre></div><ol><li>发起请求</li><li>将请求解析为 HttpServletRequest 对象</li><li>将响应封装为 HttpServletResponse 对象</li><li>返回响应</li></ol>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息的表示和处理</title>
      <link href="/post/8705251a.html"/>
      <url>/post/8705251a.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>计算机是以二进制（0 和 1）的方式存储信息的，包括数字，字符，图像，音频等。每个二进制位称为比特（bit），8 个二进制位为一个字节（byte）。内存的最小寻址单位就是一个字节。在研究二进制数据时使用 01 的方式不便于阅读，一般会转换十六进制来表示。</p><h2 id="大端存储和小端存储"><a href="#大端存储和小端存储" class="headerlink" title="大端存储和小端存储"></a>大端存储和小端存储</h2><p>对于二进制数如何在计算机中存储这个问题，人们提出了两种解决方案，大端法和小端法。<br>对于数据 0x01234567 的存储：</p><p>大端法：</p><table><thead><tr><th>…</th><th>0x100</th><th>0x101</th><th>0x102</th><th>0x103</th><th>…</th></tr></thead><tbody><tr><td>…</td><td>01</td><td>23</td><td>45</td><td>67</td><td>…</td></tr></tbody></table><p>小端法：</p><table><thead><tr><th>…</th><th>0x100</th><th>0x101</th><th>0x102</th><th>0x103</th><th>…</th></tr></thead><tbody><tr><td>…</td><td>67</td><td>45</td><td>23</td><td>01</td><td>…</td></tr></tbody></table><p>大端法将高位字节 0x01 放在了前面，而小端法将低位字节放在了后面。<br>下面有一个示例程序来验证机器使用的存储方式为何种：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_bytes</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *p, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2x &quot;</span>, *(p + i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0x01234567</span>;</span><br><span class="line">    show_bytes((<span class="type">unsigned</span> <span class="type">char</span> *) &amp;x, <span class="keyword">sizeof</span>(x));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是小端法的机器则输出<code>67 45 23 01</code>，而大端法机器输出<code>01 23 45 67</code>。<br>这两种存储方式在技术上并无优劣，只是顺序上有所不同，对于这两种存储方式的争论并无意义。</p><h2 id="整数表示"><a href="#整数表示" class="headerlink" title="整数表示"></a>整数表示</h2><table><thead><tr><th>C 语言数据类型</th><th>最小值</th><th>最大值</th><th>占用空间（字节）</th></tr></thead><tbody><tr><td>char</td><td>$-2^7$</td><td>$2^7-1$</td><td>1</td></tr><tr><td>unsigned char</td><td>$0$</td><td>$2^8-1$</td><td>1</td></tr><tr><td>short</td><td>$-2^{15}$</td><td>$2^{15}-1$</td><td>2</td></tr><tr><td>unsigned short</td><td>$0$</td><td>$2^{16}-1$</td><td>2</td></tr><tr><td>int</td><td>$-2^{31}$</td><td>$2^{31}-1$</td><td>4</td></tr><tr><td>unsigned int</td><td>$0$</td><td>$2^{32}-1$</td><td>4</td></tr><tr><td>long</td><td>$-2^{31}$</td><td>$2^{31}-1$</td><td>4</td></tr><tr><td>unsigned long</td><td>$0$</td><td>$2^{32}-1$</td><td>4</td></tr><tr><td>int32_t</td><td>$-2^{31}$</td><td>$2^{31}-1$</td><td>4</td></tr><tr><td>uint32_t</td><td>$0$</td><td>$2^{32}-1$</td><td>4</td></tr><tr><td>int64_t</td><td>$-2^{63}$</td><td>$2^{63}-1$</td><td>8</td></tr><tr><td>uint64_t</td><td>$0$</td><td>$2^{64}-1$</td><td>8</td></tr></tbody></table><p>整型数据使用补码方式表示：</p><p>比如：<br>$(1)<em>{10}&#x3D;(00000001)</em>{2}$<br>$(-1)<em>{10}&#x3D;(11111111)</em>{2}$<br>此时最高位的位权不再是<code>128</code>而是<code>-128</code></p><p>原码转补码就是<code>x-&gt;~x+1</code></p><h2 id="整数运算"><a href="#整数运算" class="headerlink" title="整数运算"></a>整数运算</h2><ol><li><p>加法<br>当进行求和计算时，若它们的和超过了数据类型的表示范围时就发生了溢出（overflow），计算机会将溢出的数据直接截断保留低位有效字节，比如：<code>0xF1 + 0x0F = 0x00</code></p></li><li><p>减法<br>进行减法计算时，会将减数取补然后使用加法的电路进行计算，比如：<code>0x7F - 0x12 = 0x7F + 0xEE = 0x6D</code></p></li><li><p>乘法<br>进行乘法计算时也是和加法一样，溢出的部分截断保留低位有效字节，比如：<code>-3 * 3 = 101 * 011 = 110111</code>然后截断成<code>111</code>。<br>计算机计算二进制乘法的方式类似于人类笔算的方式：</p><ul><li>正数 * 正数</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   0011     3</span><br><span class="line">*  0100     4</span><br><span class="line">-------</span><br><span class="line">0000000</span><br><span class="line">000000</span><br><span class="line">00011</span><br><span class="line">0000</span><br><span class="line">-------</span><br><span class="line">0001100     12</span><br></pre></td></tr></table></figure><ul><li>正数 * 负数</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   0011     3</span><br><span class="line">*  1100     -4</span><br><span class="line">-------</span><br><span class="line">0000000</span><br><span class="line">000000</span><br><span class="line">00011</span><br><span class="line">1101</span><br><span class="line">-------</span><br><span class="line">1110100     -12</span><br></pre></td></tr></table></figure><ul><li>负数 * 正数</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   1101     -3</span><br><span class="line">*  0100     4</span><br><span class="line">-------</span><br><span class="line">0000000</span><br><span class="line">000000</span><br><span class="line">11101</span><br><span class="line">0000</span><br><span class="line">-------</span><br><span class="line">1110100     -12</span><br></pre></td></tr></table></figure><ul><li>负数 * 负数</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   1101     -3</span><br><span class="line">*  1100     -4</span><br><span class="line">-------</span><br><span class="line">0000000</span><br><span class="line">000000</span><br><span class="line">11101</span><br><span class="line">0011</span><br><span class="line">-------</span><br><span class="line">0001100     12</span><br></pre></td></tr></table></figure></li><li><p>乘以常数<br>如果作为乘数的常数为 2 的幂则可以直接进行 <code>x&lt;&lt;n</code> 的操作，如果不是 2 的幂可以通过左移和求和的方式来完成乘法，比如：$14 &#x3D; 2^3 + 2^2 + 2^1$，所以<code>x * 14 = (x&lt;&lt;3) + (x&lt;&lt;2) + (x&lt;&lt;1)</code>或者$14 &#x3D; 2^4 - 1$，所以<code>x * 14 = (x&lt;&lt;4) - (x&lt;&lt;1)</code>，显然后者的步数比较少，效率更高</p></li><li><p>除以 2 的幂<br>如果作为除数的常数为 2 的幂则可以进行<code>x&gt;&gt;n</code> 的操作，注意，这里的右移是算数右移。</p></li></ol><h2 id="浮点数表示"><a href="#浮点数表示" class="headerlink" title="浮点数表示"></a>浮点数表示</h2><p>使用浮点数的表示方式可以让计算机以损失一定精度的代价来表示更大范围的数字，IEEE（I triple E，电气电子工程师学会）浮点标准用$V &#x3D; (-1)^s \times M \times 2^E$来表示一个数：</p><ul><li>符号：s 为 1 时，为负数，s 为 0 时，为正数。</li><li>尾数：M 为二进制小数，它的范围为 [1, 2)，或者是 [0, 1)。</li><li>阶码：E 为浮点数加权，这个权重是 2 的 E 次幂。</li></ul><p>举个例子：<br><code>12345.0</code>的单精度存储为：</p><table><thead><tr><th>符号（31:31）</th><th>阶码（30:23）</th><th>尾数（22:0）</th></tr></thead><tbody><tr><td>0</td><td>10001100</td><td>10000001110010000000000</td></tr></tbody></table><p>符号 1 位，阶码 8 位，位数 23 位</p><p><code>12345.0</code>的双精度存储为：</p><table><thead><tr><th>符号（63:63）</th><th>阶码（62:52）</th><th>尾数（51:0）</th></tr></thead><tbody><tr><td>0</td><td>10000001100</td><td>1000000111001000000000000000000000000000000000000000</td></tr></tbody></table><p>符号 1 位，阶码 11 位，位数 52 位</p><p>这个浮点数根据以下规则转换成 10 进制值：</p><ol><li>符号位为 0 为正数，为 1 为负数。</li><li>根据阶码的情况分为三种：<ol><li>阶码全为 0，此时尾数为非规格化的，其余情况尾数则是规格化的，E 为 1 减去偏置量$2^{k-1}-1$，其中 k 为阶码位数，2 的 E 次幂为这个数的权重。</li><li>阶码全为 1，此时尾数必须全为 0，浮点数表示为$\infty$，若尾数不为 0，则为特殊值<code>NaN</code>（Not a Number）。</li><li>除了上述两种情况，其余情况 E 为阶码为减去偏置量$2^{k-1}-1$，2 的 E 次幂为这个数的权重。</li></ol></li><li>根据尾数是否为规格化的分为两种情况：<ol><li>规格化的，在最前面补 1，尾数补全后为 1.xxxx，补全后的尾数记作 M。</li><li>非规格化的，在最前面补 0，尾数补全后为 0.xxxx，补全后的尾数记作 M。</li></ol></li><li>整个浮点数表示的 10 进制为$V &#x3D; (-1)^s \times M \times 2^E$。</li></ol><p>现在给出一个示例：<br>假设一个基于 IEEE 浮点格式的 5 位数，有 1 个符号位，2 个阶码位，2 个尾数位，以下二进制数表示的十进制值是多少：<br>偏置量为$2^{2-1}-1&#x3D;1$</p><ul><li>00000 <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">答案  </button><span class="hide-content">$V = 2^{1-1} \times 0 = 0$</span></span></li><li>00010 <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">答案  </button><span class="hide-content">$V = 2^{1-1} \times 0.5 = 0.5$</span></span></li><li>00100 <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">答案  </button><span class="hide-content">$V = 2^{1-1} \times 1 = 1$</span></span></li><li>00110 <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">答案  </button><span class="hide-content">$V = 2^{1-1} \times 1.5 = 1.5$</span></span></li><li>01000 <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">答案  </button><span class="hide-content">$V = 2^{2-1} \times 1 = 2$</span></span></li><li>01011 <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">答案  </button><span class="hide-content">$V = 2^{2-1} \times 1.75 = 3.5$</span></span></li><li>01100 <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">答案  </button><span class="hide-content">$V = +\infty$</span></span></li><li>01101 <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">答案  </button><span class="hide-content">NaN</span></span></li></ul><h2 id="浮点数的舍入"><a href="#浮点数的舍入" class="headerlink" title="浮点数的舍入"></a>浮点数的舍入</h2><p>由于浮点数的表示方式导致的精度和范围，我们只能使用近似值来进行实数运算，所以 IEEE 指定了一个向偶数舍入的舍入规则来用浮点数能表示的数来近似代表对应实数。<br>这个向偶数舍入的规则与四舍五入有些相似，但是它规定当需要舍入为两个最低有效数字的平均值时，则向偶数舍入使得最低有效数字为偶数，举几个例子：<br>假设最低有效数字为小数点后两位</p><ul><li>1.454 -&gt; 1.45</li><li>1.456 -&gt; 1.46</li><li>1.455 -&gt; 1.46</li><li>1.465 -&gt; 1.46</li><li>1.995 -&gt; 2.00</li></ul><p>对于二进制数也相似，而且二进制的向偶数舍入更简单，毕竟二进制只有 0 和 1，0 为偶数，1 为奇数，举几个例子：<br>假设最低有效数字为小数点后两位</p><ul><li>11.100 -&gt; 11.10</li><li>11.101 -&gt; 11.10</li><li>11.110 -&gt; 11.11</li><li>11.111 -&gt; 100.00</li></ul><h2 id="浮点数的运算"><a href="#浮点数的运算" class="headerlink" title="浮点数的运算"></a>浮点数的运算</h2><p>由于精度和范围，浮点数计算时有可能会发生舍入和溢出，比如在单精度情况下，$(1e20 \times 1e20) \times 1e-20 &#x3D; +\infty$，而$1e20 \times (1e20 \times 1e-20) &#x3D; 1e20$，这是因为在计算$1e20 \times 1e20$时，发生了溢出，再举个例子，比如在单精度情况下，$1e20 \times (1e20-1e20) &#x3D; 0.0$，而$1e20 \times 1e20-1e20 \times 1e20&#x3D;NaN$ （Inf-Inf&#x3D;NaN）。在类型转换时，int 转 float 会发生舍入，而 int 转 double 就不会。</p>]]></content>
      
      
      <categories>
          
          <category> 深入理解计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解计算机系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>衡量计算机性能标准</title>
      <link href="/post/37jfws7d.html"/>
      <url>/post/37jfws7d.html</url>
      
        <content type="html"><![CDATA[<h2 id="衡量计算机性能的几个指标"><a href="#衡量计算机性能的几个指标" class="headerlink" title="衡量计算机性能的几个指标"></a>衡量计算机性能的几个指标</h2><ol><li>主频（Clock Speed）：<br>以 GHz 为单位，表示 CPU 每秒钟可以执行的时钟周期数。虽然主频是一个重要的性能指标，但并不能单独决定处理器的性能。</li><li>每个时钟周期的指令数（IPC，Instructions Per Cycle）：<br>表示 CPU 在每个时钟周期内可以执行的指令数量。更高的 IPC 意味着更高的效率。由于每种指令的 IPC 都不一样，所以计算 CPU 的 IPC 时一般是计算平均 IPC。</li><li>每秒钟的指令数（IPS，Instructions Per Second）：<br>IPS 与主频和 IPC 有关，计算公式如下：<br>$$ \text{IPS} &#x3D; \text{主频(GHz)} \times \text{IPC} $$</li><li>核心数和线程数：<br>多核处理器可以并行处理多个任务。线程数（尤其是支持超线程的 CPU）也可以影响多任务处理的性能。</li><li>缓存（Cache）：<br>CPU 的三级缓存（L1、L2、L3）的大小和速度会影响数据访问速度，较大的缓存通常能提高性能。</li><li>TDP（Thermal Design Power）：<br>设计功耗，表示 CPU 在正常工作时的功耗，影响散热设计和能效。</li><li>每秒钟操作数（OPS，Operations Per Second）<br>与IPS（Instructions Per Second）不同，OPS更广泛地用于描述各种操作，包括但不限于指令执行。比如在数据库系统中，OPS可以用于衡量每秒能够处理的事务或查询数量，反映数据库的处理能力。在机器学习或深度学习中，OPS可以用于衡量每秒能够执行的计算操作，帮助评估硬件（如GPU、TPU等）的性能。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 深入理解计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解计算机系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解计算机系统</title>
      <link href="/post/f1u3bpyv.html"/>
      <url>/post/f1u3bpyv.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列是为了记录一下自己在学习《深入理解计算机系统》这本书时的一些心得和重点。在使用一些接近底层的语言时，对计算机系统有深入的理解可以帮助写出更加优秀的程序。</p><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><div class="note info no-icon flat"><h3 id="深入理解计算机系统文章导航-🌏"><a href="#深入理解计算机系统文章导航-🌏" class="headerlink" title="深入理解计算机系统文章导航 🌏"></a>深入理解计算机系统文章导航 🌏</h3><ol><li><a href="/post/f1u3bpyv.html" title="深入理解计算机系统">深入理解计算机系统</a></li><li><a href="/post/37jfws7d.html" title="衡量计算机性能标准">衡量计算机性能标准</a></li><li><a href="/post/8705251a.html" title="信息的表示和处理">信息的表示和处理</a></li></ol></div>]]></content>
      
      
      <categories>
          
          <category> 深入理解计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解计算机系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表达式求值</title>
      <link href="/post/bdiou7vx.html"/>
      <url>/post/bdiou7vx.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们平时见到的表达式一般为中缀表达式，比如<code>3 + 5 * (2 - 1)</code>，这个表达式对于计算机来说并不是直接计算出它的答案的，而是先将其转换成后缀表达式然后再进行计算。</p><h2 id="后缀表达式（逆波兰表达式）"><a href="#后缀表达式（逆波兰表达式）" class="headerlink" title="后缀表达式（逆波兰表达式）"></a>后缀表达式（逆波兰表达式）</h2><p>举个例子，计算一个中缀表达式的具体步骤：</p><ol><li>中缀表达式：<code>3 + 5 * (2 - 1)</code></li><li>转换为后缀表达式：<code>3 5 2 1 - * +</code></li><li>计算结果</li></ol><h3 id="转换过程"><a href="#转换过程" class="headerlink" title="转换过程"></a>转换过程</h3><p>转换的步骤通常遵循运算符优先级和括号规则以及左优先原则：</p><ol><li>操作数：遇到操作数（数字）时，将其放入输出列表。</li><li>操作符：遇到操作符时，根据优先级进行处理：<ul><li>如果当前操作符的优先级高于栈顶操作符，则将其压入栈。</li><li>如果当前操作符的优先级低于或等于栈顶操作符，则将栈顶操作符弹出，加入输出列表，直到找到优先级较低的操作符或栈为空，然后将当前操作符压入栈。</li></ul></li><li>括号：<ul><li>遇到左括号 ( 时，将其压入栈。</li><li>遇到右括号 ) 时，将栈中的操作符弹出并加入输出列表，直到遇到左括号。</li></ul></li></ol><p>以<code>3 + 5 * (2 - 1)</code>为例：</p><ol><li>栈-&gt;<code>[]</code>，输出-&gt;<code>[]</code></li><li>栈-&gt;<code>[]</code>，输出-&gt;<code>[3]</code></li><li>栈-&gt;<code>[+]</code>，输出-&gt;<code>[3]</code></li><li>栈-&gt;<code>[+]</code>，输出-&gt;<code>[3, 5]</code></li><li>栈-&gt;<code>[+, *]</code>，输出-&gt;<code>[3, 5]</code></li><li>栈-&gt;<code>[+, *, (]</code>，输出-&gt;<code>[3, 5]</code></li><li>栈-&gt;<code>[+, *, (]</code>，输出-&gt;<code>[3, 5, 2]</code></li><li>栈-&gt;<code>[+, *, (, -]</code>，输出-&gt;<code>[3, 5, 2, 1]</code></li><li>栈-&gt;<code>[+, *]</code>，输出-&gt;<code>[3, 5, 2, 1, -,]</code></li><li>栈-&gt;<code>[+]</code>，输出-&gt;<code>[3, 5, 2, 1, -, *]</code></li><li>栈-&gt;<code>[]</code>，输出-&gt;<code>[3, 5, 2, 1, -, *, +]</code></li></ol><p>最后得到结果：<code>3 5 2 1 - * +</code></p><h3 id="计算过程"><a href="#计算过程" class="headerlink" title="计算过程"></a>计算过程</h3><ol><li>遇到操作数时，将其压入栈。</li><li>遇到操作符时，从栈中弹出相应数量的操作数进行运算，并将结果压回栈。</li><li>最终，栈中剩下的值就是表达式的结果。</li></ol><p>以后缀表达式<code>3 5 2 1 - * +</code>为例：</p><ol><li>栈-&gt;<code>[]</code></li><li>栈-&gt;<code>[3]</code></li><li>栈-&gt;<code>[3, 5]</code></li><li>栈-&gt;<code>[3, 5, 2]</code></li><li>栈-&gt;<code>[3, 5, 2, 1]</code></li><li>栈-&gt;<code>[3, 5, 1]</code></li><li>栈-&gt;<code>[3, 5]</code></li><li>栈-&gt;<code>[8]</code></li></ol><p>最后得到结果：<code>8</code></p><h2 id="前缀表达式（波兰表达式）"><a href="#前缀表达式（波兰表达式）" class="headerlink" title="前缀表达式（波兰表达式）"></a>前缀表达式（波兰表达式）</h2><p>前缀表达式是将操作符放到了两个操作数前面，比如：<br>中缀表达式<code>3 + 5 * (2 - 1)</code>转换为后缀表达式为<code>+ 3 * 5 - 2 1</code></p><p>它的转换规则与逆波兰表达式基本一致，只是遍历方向变成了从右往左。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表、栈和队列</title>
      <link href="/post/t0326b24.html"/>
      <url>/post/t0326b24.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>表、栈和队列是三种最基本、最简单的数据结构，此后的很多算法与数据结构都是要基于这三种结构。其实从定义来说栈和队列也是表，只不过它们是操作受限的表，为了以防后续混淆先声明一下位序和索引的不同，位序是从 1 开始的，而索引是从 0 开始的，在后续的实现中一般的操作都是基于索引的，如果是基于位序的会在注释中标明。</p><h2 id="表（List）"><a href="#表（List）" class="headerlink" title="表（List）"></a>表（List）</h2><p>表是一个可以存储多个元素的线性数据结构，通常可以通过索引访问。<br>基础操作：</p><ul><li>插入：在特定位置添加元素。</li><li>删除：从特定位置移除元素。</li><li>查找：通过索引或值查找元素。</li><li>遍历：访问表中的每个元素。</li></ul><p>根据其物理结构（存储结构）的不同，分为：</p><ul><li>顺序表</li><li>链表</li></ul><h3 id="顺序表（Sequence-List）"><a href="#顺序表（Sequence-List）" class="headerlink" title="顺序表（Sequence List）"></a>顺序表（Sequence List）</h3><p>顺序表的存储是在一片连续的空间中的，在程序中使用数组来实现，由于数组是静态的，在程序像操作系统申请分配后其大小就无法改变了，所以要实现一个扩容的动态顺序表就要在扩容申请另一片空间并将原来的数据拷贝到新的空间中，然后释放原来的空间。</p><p>以下是一个动态可扩容的顺序表的代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> E int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_CAPACITY 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">SqList</span> &#123;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">    <span class="type">int</span> capacity;</span><br><span class="line">    E *data;</span><br><span class="line">&#125; SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化表</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">initList</span><span class="params">(SqList &amp;list, <span class="type">int</span> initCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initCapacity &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    list.length = <span class="number">0</span>;</span><br><span class="line">    list.capacity = initCapacity;</span><br><span class="line">    E *p = (E *) <span class="built_in">malloc</span>(initCapacity * <span class="built_in">sizeof</span>(E));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    list.data = p;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">initList</span><span class="params">(SqList &amp;list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">initList</span>(list,DEFAULT_CAPACITY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">(SqList &amp;list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> list.length == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将表扩容至新的大小</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">increaseList</span><span class="params">(SqList &amp;list, <span class="type">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity &lt;= list.capacity)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    E *oldData = list.data;</span><br><span class="line">    E *p = (E *) <span class="built_in">malloc</span>(newCapacity * <span class="built_in">sizeof</span>(E));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    list.data = p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; list.length; ++i) &#123;</span><br><span class="line">        list.data[i] = oldData[i];</span><br><span class="line">    &#125;</span><br><span class="line">    list.capacity = newCapacity;</span><br><span class="line">    <span class="built_in">free</span>(oldData);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定位序处插入元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">listInsert</span><span class="params">(SqList &amp;list, <span class="type">int</span> index,E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt;= <span class="number">0</span> || index &gt; list.length + <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = list.length; i &gt;= index; --i) &#123;</span><br><span class="line">        list.data[i] = list.data[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    list.data[index - <span class="number">1</span>] = e;</span><br><span class="line">    list.length++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除指定位序元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">listDelete</span><span class="params">(SqList &amp;list, <span class="type">int</span> index,E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt;= <span class="number">0</span> || index &gt; list.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = list.data[index - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = index - <span class="number">1</span>; i &lt; list.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        list.data[i] = list.data[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    list.length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据位序获取元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">getIndexElem</span><span class="params">(SqList &amp;list, <span class="type">int</span> index, E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt;= <span class="number">0</span> || index &gt; list.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = list.data[index - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据元素获取位序</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">getElemIndex</span><span class="params">(SqList &amp;list,E e, <span class="type">int</span> &amp;index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; list.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e == list.data[i]) &#123;</span><br><span class="line">            index = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(SqList &amp;list)</span> </span>&#123;</span><br><span class="line">    list.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表（Linked-List）"><a href="#链表（Linked-List）" class="headerlink" title="链表（Linked List）"></a>链表（Linked List）</h3><p>链表是动态可扩容的，每次添加新元素时，都会创建一个新的节点然后将尾节点连接连接到新节点上。<br>这个单链表的实现是包含头节点的，由于这个链表结构只包含头节点的信息，所以许多操作都较于繁琐，可以根据需求进行改造。</p><p>以下是单链表的代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> E int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    E data;</span><br><span class="line">    node *next;</span><br><span class="line">&#125; LNode, *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化链表</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">initList</span><span class="params">(LinkList &amp;list)</span> </span>&#123;</span><br><span class="line">    LinkList p = (LinkList) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    list = p;</span><br><span class="line">    list-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为空表</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">(LinkList &amp;list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> list-&gt;next == <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定节点后插入元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insertNextNode</span><span class="params">(LNode *p,E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *q = (LNode *) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span> (q == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    q-&gt;data = e;</span><br><span class="line">    q-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = q;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定节点前插入元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insertPriorNode</span><span class="params">(LNode *p,E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *q = (LNode *) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span> (q == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    q-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = q;</span><br><span class="line">    q-&gt;data = p-&gt;data;</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定位序的节点</span></span><br><span class="line"><span class="function">LNode *<span class="title">getIndexNode</span><span class="params">(LinkList list, <span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    LNode *p = list;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span> &amp;&amp; i &lt; index) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定元素的节点</span></span><br><span class="line"><span class="function">LNode *<span class="title">getElemNode</span><span class="params">(LinkList list,E e)</span> </span>&#123;</span><br><span class="line">    LNode *p = list;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span> &amp;&amp; p-&gt;data != e) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">(LinkList list)</span> </span>&#123;</span><br><span class="line">    LNode *p = list-&gt;next;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定位序处插入元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">listInsert</span><span class="params">(LinkList &amp;list, <span class="type">int</span> index,E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *p = <span class="built_in">getIndexNode</span>(list, index - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">insertNextNode</span>(p, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *由于此链表为单链表，无法得知此节点的前驱节点，</span></span><br><span class="line"><span class="comment"> *所以对于指定节点的删除是将此节点的数据与后一个节点的数据进行交换然后删除后一个节点，</span></span><br><span class="line"><span class="comment"> *因此无法删除最后表尾节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deleteNode</span><span class="params">(LNode *p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *q = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (q == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p-&gt;data = q-&gt;data;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除指定位序元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">listDelete</span><span class="params">(LinkList &amp;list, <span class="type">int</span> index,E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *p = <span class="built_in">getIndexNode</span>(list, index - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    LNode *q = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (q == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = q-&gt;data;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用尾插法插入一系列数据</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">listInsertTail</span><span class="params">(LinkList &amp;list,E es[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    LNode *p = list;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">insertNextNode</span>(p, es[i])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用头插法插入一系列数据</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">listInsertHead</span><span class="params">(LinkList &amp;list,E es[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">insertNextNode</span>(list, es[i])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(LinkList &amp;list)</span> </span>&#123;</span><br><span class="line">    LNode *p = list-&gt;next;</span><br><span class="line">    list-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        LNode *temp = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="表的总结"><a href="#表的总结" class="headerlink" title="表的总结"></a>表的总结</h2><p>不难看出，两种表各有优劣，链表的增删速度快但查找的速度慢，而顺序表的增删速度慢，查找速度快，需要根据具体场景进行选择。</p><h2 id="栈（Stack）"><a href="#栈（Stack）" class="headerlink" title="栈（Stack）"></a>栈（Stack）</h2><p>栈的本质也是一种表，只不过是一种操作受限的表，它限制元素的插入和删除都只能从表的一端进行，由此带来了后进先出（LIFO）的特性，所以对于栈的实现可以使用链表或者顺序表。</p><h3 id="栈的顺序表实现"><a href="#栈的顺序表实现" class="headerlink" title="栈的顺序表实现"></a>栈的顺序表实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> E int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_CAPACITY 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">stack</span> &#123;</span><br><span class="line">    E *data;</span><br><span class="line">    <span class="type">int</span> capacity;</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">&#125; SqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化栈</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">initStack</span><span class="params">(SqStack &amp;stack, <span class="type">int</span> initCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initCapacity &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    stack.top = <span class="number">-1</span>;</span><br><span class="line">    stack.capacity = initCapacity;</span><br><span class="line">    E *p = (E *) <span class="built_in">malloc</span>(initCapacity * <span class="built_in">sizeof</span>(E));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    stack.data = p;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">initStack</span><span class="params">(SqStack &amp;stack)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">initStack</span>(stack,DEFAULT_CAPACITY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将栈扩容至新的大小</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">increaseStack</span><span class="params">(SqStack &amp;stack, <span class="type">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity &lt; stack.capacity) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    E *oldData = stack.data;</span><br><span class="line">    E *p = (E *) <span class="built_in">malloc</span>(newCapacity * <span class="built_in">sizeof</span>(E));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    stack.data = p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= stack.top; ++i) &#123;</span><br><span class="line">        stack.data[i] = oldData[i];</span><br><span class="line">    &#125;</span><br><span class="line">    stack.capacity = newCapacity;</span><br><span class="line">    <span class="built_in">free</span>(oldData);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">(SqStack &amp;stack)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stack.top == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈是否已满</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">(SqStack &amp;stack)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stack.top == stack.capacity - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素入栈</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(SqStack &amp;stack,E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">full</span>(stack)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    stack.data[++stack.top] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素出栈</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(SqStack &amp;stack, E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">empty</span>(stack)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = stack.data[stack.top--];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回栈顶元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">top</span><span class="params">(SqStack &amp;stack, E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">empty</span>(stack))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = stack.data[stack.top];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(SqStack &amp;stack)</span> </span>&#123;</span><br><span class="line">    stack.top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈的链表实现"><a href="#栈的链表实现" class="headerlink" title="栈的链表实现"></a>栈的链表实现</h3><p>对于栈的链表实现使用的是不带头节点的方式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> E int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    E data;</span><br><span class="line">    node *next;</span><br><span class="line">&#125; LNode, *linkStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">initStack</span><span class="params">(linkStack &amp;stack)</span> </span>&#123;</span><br><span class="line">    stack = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">(linkStack &amp;stack)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stack == <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(linkStack &amp;stack,E e)</span> </span>&#123;</span><br><span class="line">    LNode *p = (LNode *) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    p-&gt;next = stack;</span><br><span class="line">    stack = p;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出栈</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(linkStack &amp;stack,E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">empty</span>(stack)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *p = stack;</span><br><span class="line">    stack = p-&gt;next;</span><br><span class="line">    e = p-&gt;data;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取栈顶元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">top</span><span class="params">(linkStack &amp;stack,E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">empty</span>(stack)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = stack-&gt;data;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(linkStack &amp;stack)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">empty</span>(stack)) &#123;</span><br><span class="line">        E temp;</span><br><span class="line">        <span class="built_in">pop</span>(stack,temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈的总结"><a href="#栈的总结" class="headerlink" title="栈的总结"></a>栈的总结</h3><p>栈是一种十分重要的数据结构，它在计算机系统中的使用随处可见。<br>在使用栈时要根据具体场景选择具体的实现方式。</p><h2 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a>队列（Queue）</h2><p>队列的本质也是一种表，只不过是一种操作受限的表，它限制元素的插入只能从表的一端进行而删除要从另一端进行，由此带来了先进先出（FIFO）的特性，所以对于队列的实现可以使用链表或者顺序表。</p><h3 id="队列的顺序表实现"><a href="#队列的顺序表实现" class="headerlink" title="队列的顺序表实现"></a>队列的顺序表实现</h3><p>以下是循环队列的实现，为了区分队头和队尾需要在队尾处空出一个储存空间，若想节省这一处空间，可以使用 size 记录大小或者操作标记来区区分。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> E int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_CAPACITY 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">SqQueue</span> &#123;</span><br><span class="line">    E *data;</span><br><span class="line">    <span class="type">int</span> front, rear;</span><br><span class="line">    <span class="type">int</span> capacity;</span><br><span class="line">&#125; SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">initQueue</span><span class="params">(SqQueue &amp;queue, <span class="type">int</span> initCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initCapacity &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    queue.front = <span class="number">0</span>;</span><br><span class="line">    queue.rear = <span class="number">0</span>;</span><br><span class="line">    E *p = (E *) <span class="built_in">malloc</span>(initCapacity * <span class="built_in">sizeof</span>(E));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    queue.data = p;</span><br><span class="line">    queue.capacity = initCapacity;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">initQueue</span><span class="params">(SqQueue &amp;queue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">initQueue</span>(queue,DEFAULT_CAPACITY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否已满</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">(SqQueue &amp;queue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (queue.rear + <span class="number">1</span>) % queue.capacity == queue.front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">(SqQueue &amp;queue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> queue.front == queue.rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">enQueue</span><span class="params">(SqQueue &amp;queue,E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">full</span>(queue)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    queue.data[queue.rear] = e;</span><br><span class="line">    queue.rear = (queue.rear + <span class="number">1</span>) % queue.capacity;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deQueue</span><span class="params">(SqQueue &amp;queue,E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">empty</span>(queue)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = queue.data[queue.front];</span><br><span class="line">    queue.front = (queue.front + <span class="number">1</span>) % queue.capacity;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取队头元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">getHead</span><span class="params">(SqQueue &amp;queue,E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">empty</span>(queue)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = queue.data[queue.front];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取队伍长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">(SqQueue &amp;queue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (queue.rear + queue.capacity - queue.front) % queue.capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(SqQueue &amp;queue)</span> </span>&#123;</span><br><span class="line">    queue.front = <span class="number">0</span>;</span><br><span class="line">    queue.rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用操作标记的实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> E int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_CAPACITY 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">SqQueue</span> &#123;</span><br><span class="line">    E *data;</span><br><span class="line">    <span class="type">int</span> front, rear;</span><br><span class="line">    <span class="type">int</span> capacity;</span><br><span class="line">    <span class="type">bool</span> tag;</span><br><span class="line">&#125; SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">initQueue</span><span class="params">(SqQueue &amp;queue, <span class="type">int</span> initCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initCapacity &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    queue.front = <span class="number">0</span>;</span><br><span class="line">    queue.rear = <span class="number">0</span>;</span><br><span class="line">    E *p = (E *) <span class="built_in">malloc</span>(initCapacity * <span class="built_in">sizeof</span>(E));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    queue.data = p;</span><br><span class="line">    queue.capacity = initCapacity;</span><br><span class="line">    queue.tag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">initQueue</span><span class="params">(SqQueue &amp;queue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">initQueue</span>(queue,DEFAULT_CAPACITY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否已满</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">(SqQueue &amp;queue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> queue.front == queue.rear &amp;&amp; queue.tag == <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">(SqQueue &amp;queue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> queue.front == queue.rear &amp;&amp; queue.tag == <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">enQueue</span><span class="params">(SqQueue &amp;queue,E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">full</span>(queue)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    queue.data[queue.rear] = e;</span><br><span class="line">    queue.rear = (queue.rear + <span class="number">1</span>) % queue.capacity;</span><br><span class="line">    queue.tag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deQueue</span><span class="params">(SqQueue &amp;queue,E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">empty</span>(queue)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = queue.data[queue.front];</span><br><span class="line">    queue.front = (queue.front + <span class="number">1</span>) % queue.capacity;</span><br><span class="line">    queue.tag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列的链表实现"><a href="#队列的链表实现" class="headerlink" title="队列的链表实现"></a>队列的链表实现</h3><p>对于队列的链表实现使用的是带头节点的方式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    E data;</span><br><span class="line">    Node *next;</span><br><span class="line">&#125; LNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LinkQueue</span> &#123;</span><br><span class="line">    LNode *front;</span><br><span class="line">    LNode *rear;</span><br><span class="line">&#125; LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">initQueue</span><span class="params">(LinkQueue &amp;queue)</span> </span>&#123;</span><br><span class="line">    LNode *p = (LNode *) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    queue.front = p;</span><br><span class="line">    queue.rear = p;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">(LinkQueue &amp;queue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> queue.front == queue.rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">enQueue</span><span class="params">(LinkQueue &amp;queue,E e)</span> </span>&#123;</span><br><span class="line">    LNode *p = (LNode *) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    queue.rear-&gt;next = p;</span><br><span class="line">    queue.rear = p;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deQueue</span><span class="params">(LinkQueue &amp;queue,E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">empty</span>(queue)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *p = queue.front-&gt;next;</span><br><span class="line">    e = p-&gt;data;</span><br><span class="line">    queue.front = p-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">getHead</span><span class="params">(LinkQueue &amp;queue,E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">empty</span>(queue)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = queue.front-&gt;next-&gt;data;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(LinkQueue &amp;queue)</span> </span>&#123;</span><br><span class="line">    LNode *p = queue.front-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        LNode *temp = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    queue.front-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    queue.rear = queue.front;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h3><p>双端队列的入队和出队操作可以从两端进行，所以说栈和队列能实现的功能双端队列也能实现。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 表 </tag>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/post/4u11a4r5.html"/>
      <url>/post/4u11a4r5.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>数据结构与算法是计算机学习的一个重要方面，对数据结构与算法进行研究可以提升自己的问题解决能力，优化程序性能，并且更加深入的理解计算机系统。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>对一个数据结构进行研究主要有以下三个方面：</p><ul><li>逻辑结构</li><li>数据运算</li><li>物理结构（存储结构）</li></ul><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>对一个算法进行研究有以下几个方面：</p><ul><li>时间复杂度</li><li>空间复杂度</li></ul><p>对于复杂度的表示一般使用大 O 表示法，n 为数据规模，比如：</p><p>$T(n) &#x3D; 520 &#x3D; O (1) $<br>$T(n) &#x3D; n + 520 &#x3D; O(n)$<br>$T(n) &#x3D; n^2 + 4n + 5 &#x3D; O(n^2)$<br>$T(n) &#x3D; nlog_2n + n + 99999 &#x3D; O(nlogn)$<br>$T(n) &#x3D; n^3 + n^2 &#x3D; O(n^3)$<br>$T(n) &#x3D; O(n^3 + n^2) &#x3D; O(n^3)$</p><p>所以，使用大 O 表示法可以让我们忽略那些低阶的因子，把精力放在那些高阶的因子上，毕竟当 n 的规模足够大时，影响运行效率的往往是那些高阶的因子。</p><p>对于复杂度的比较遵循以下原则：</p><p>$O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)$</p><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><div class="note info no-icon flat"><h3 id="数据结构与算法文章导航-🌏"><a href="#数据结构与算法文章导航-🌏" class="headerlink" title="数据结构与算法文章导航 🌏"></a>数据结构与算法文章导航 🌏</h3><ol><li><a href="/post/4u11a4r5.html" title="数据结构与算法">数据结构与算法</a></li><li><a href="/post/t0326b24.html" title="表、栈和队列">表、栈和队列</a></li><li><a href="/post/bdiou7vx.html" title="表达式求值">表达式求值</a></li></ol></div>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间类</title>
      <link href="/post/tgpsr7if.html"/>
      <url>/post/tgpsr7if.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在 Java 中，日期和时间的处理经历了重要的变化，特别是在 Java 8 引入了全新的日期时间 API。使用这些工具可以很方便的进行时间日期相关的运算和处理。</p><h2 id="Java8-以前的时间类"><a href="#Java8-以前的时间类" class="headerlink" title="Java8 以前的时间类"></a>Java8 以前的时间类</h2><p>Java 8 之前，主要使用的日期时间类包括 Date 和 Calendar 以及时间格式化类 SimpleDateFormat。但由于设计缺陷和线程不安全，它们在 Java 8 之后逐渐被新的日期时间 API 所替代。</p><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p><code>Date</code>类表示特定的瞬时点（时间戳），可以精确到毫秒。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;Current Date: &quot;</span> + date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h3><p><code>Calendar</code>是一个抽象类，用于操作日期和时间。它支持多种日历系统。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalendarExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> calendar.get(Calendar.YEAR);</span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> calendar.get(Calendar.MONTH) + <span class="number">1</span>; <span class="comment">// 月份从0开始</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(<span class="string">&quot;Current Date: &quot;</span> + year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + day);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h3><p><code>SimpleDateFormat</code> 允许定义日期的格式，以便将 Date 对象转换为字符串或将字符串解析为 Date 对象。</p><p>格式化日期：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleDateFormatExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">formatter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">formattedDate</span> <span class="operator">=</span> formatter.format(date);</span><br><span class="line">        System.out.println(<span class="string">&quot;Formatted Date: &quot;</span> + formattedDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析字符串为日期：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParseDateExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dateString</span> <span class="operator">=</span> <span class="string">&quot;2023-10-17 14:30:00&quot;</span>;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">formatter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> formatter.parse(dateString);</span><br><span class="line">            System.out.println(<span class="string">&quot;Parsed Date: &quot;</span> + date);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三者的结合使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalendarAndSimpleDateFormatExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        calendar.set(<span class="number">2023</span>, Calendar.OCTOBER, <span class="number">17</span>, <span class="number">14</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">formatter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">formattedDate</span> <span class="operator">=</span> formatter.format(date);</span><br><span class="line">        System.out.println(<span class="string">&quot;Formatted Calendar Date: &quot;</span> + formattedDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java8-新增的时间类"><a href="#Java8-新增的时间类" class="headerlink" title="Java8 新增的时间类"></a>Java8 新增的时间类</h2><p>Java 8 引入的日期时间 API 提供了更清晰、易用和功能丰富的方式来处理日期和时间。相较于 Java 8 之前的类，新的 API 更符合现代编程的需求，尤其是在多线程环境下的安全性和可维护性。使用新 API 时，建议尽量避免使用旧的 Date 和 Calendar 类。</p><h3 id="1-LocalDate"><a href="#1-LocalDate" class="headerlink" title="1. LocalDate"></a>1. LocalDate</h3><p>表示没有时区的日期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalDateExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">today</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">        System.out.println(<span class="string">&quot;Today: &quot;</span> + today);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-LocalTime"><a href="#2-LocalTime" class="headerlink" title="2. LocalTime"></a>2. LocalTime</h3><p>表示没有时区的时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalTimeExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">        System.out.println(<span class="string">&quot;Current Time: &quot;</span> + now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-LocalDateTime"><a href="#3-LocalDateTime" class="headerlink" title="3. LocalDateTime"></a>3. LocalDateTime</h3><p>结合日期和时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalDateTimeExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        System.out.println(<span class="string">&quot;Current DateTime: &quot;</span> + now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-DateTimeFormatter"><a href="#4-DateTimeFormatter" class="headerlink" title="4. DateTimeFormatter"></a>4. DateTimeFormatter</h3><p>格式化日期时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTimeFormatterExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">formattedDateTime</span> <span class="operator">=</span> now.format(formatter);</span><br><span class="line">        System.out.println(<span class="string">&quot;Formatted DateTime: &quot;</span> + formattedDateTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-ZoneId"><a href="#5-ZoneId" class="headerlink" title="5. ZoneId"></a>5. ZoneId</h3><p>表示时区。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZoneIdExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ZoneId</span> <span class="variable">zoneId</span> <span class="operator">=</span> ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Zone ID: &quot;</span> + zoneId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-Instant"><a href="#6-Instant" class="headerlink" title="6. Instant"></a>6. Instant</h3><p>表示一个瞬时点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstantExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">        System.out.println(<span class="string">&quot;Current Instant: &quot;</span> + instant);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-ZonedDateTime"><a href="#7-ZonedDateTime" class="headerlink" title="7. ZonedDateTime"></a>7. ZonedDateTime</h3><p>带时区的日期时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.ZonedDateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZonedDateTimeExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ZonedDateTime</span> <span class="variable">zonedDateTime</span> <span class="operator">=</span> ZonedDateTime.now();</span><br><span class="line">        System.out.println(<span class="string">&quot;Current ZonedDateTime: &quot;</span> + zonedDateTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-Duration"><a href="#8-Duration" class="headerlink" title="8. Duration"></a>8. Duration</h3><p>表示时间间隔。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DurationExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Instant</span> <span class="variable">start</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">        <span class="comment">// Simulate some processing time</span></span><br><span class="line">        <span class="keyword">try</span> &#123; Thread.sleep(<span class="number">1000</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; &#125;</span><br><span class="line">        <span class="type">Instant</span> <span class="variable">end</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">        <span class="type">Duration</span> <span class="variable">duration</span> <span class="operator">=</span> Duration.between(start, end);</span><br><span class="line">        System.out.println(<span class="string">&quot;Duration in seconds: &quot;</span> + duration.getSeconds());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-Period"><a href="#9-Period" class="headerlink" title="9. Period"></a>9. Period</h3><p>表示日期之间的时间量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.Period;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PeriodExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">startDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">endDate</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">        <span class="type">Period</span> <span class="variable">period</span> <span class="operator">=</span> Period.between(startDate, endDate);</span><br><span class="line">        System.out.println(<span class="string">&quot;Years: &quot;</span> + period.getYears() + <span class="string">&quot;, Months: &quot;</span> + period.getMonths() + <span class="string">&quot;, Days: &quot;</span> + period.getDays());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-ChronoUnit"><a href="#10-ChronoUnit" class="headerlink" title="10. ChronoUnit"></a>10. ChronoUnit</h3><p>定义时间单位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.ChronoUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChronoUnitExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">start</span> <span class="operator">=</span> LocalDate.of(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">end</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">        <span class="type">long</span> <span class="variable">daysBetween</span> <span class="operator">=</span> ChronoUnit.DAYS.between(start, end);</span><br><span class="line">        System.out.println(<span class="string">&quot;Days between: &quot;</span> + daysBetween);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端开发基础（二）- Java基础</title>
      <link href="/post/u9rubdog.html"/>
      <url>/post/u9rubdog.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><h3 id="后端开发导航-🌏"><a href="#后端开发导航-🌏" class="headerlink" title="后端开发导航 🌏"></a>后端开发导航 🌏</h3><ol><li><a href="/post/z3823524.html" title="后端开发基础（一）- 简介">后端开发基础（一）- 简介</a></li><li><a href="/post/u9rubdog.html" title="后端开发基础（二）- Java基础">后端开发基础（二）- Java基础</a></li><li><a href="/post/34f041e5.html" title="后端开发基础（三）- maven">后端开发基础（三）- maven</a></li></ol></div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java 是一种高级、面向对象的编程语言，以其可移植性、健壮性和可扩展性而闻名。 Java 由 Sun Microsystems（现为 Oracle）开发，遵循“一次编写，随处运行”的原则，允许代码在任何具有 Java 虚拟机 (JVM) 的设备上运行。它广泛用于构建大型企业应用程序、Android 移动应用程序和 Web 服务。 Java 具有自动内存管理（垃圾收集）、庞大的标准库和强大的安全功能，使其成为后端系统、分布式应用程序和基于云的解决方案的流行选择。学习 Java 语言也是为之后深入学习企业常用的后端开发框架 SSM 打好基础。</p><h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><ol><li><p><strong>Java 环境配置</strong></p><ul><li><strong>安装 JDK</strong>：下载并安装最新版本的 JDK，理解 JDK 与 JRE 的区别。</li><li><strong>IDE 使用</strong>：学习如何使用集成开发环境（如 IntelliJ IDEA、Eclipse 或 VS Code）编写和运行 Java 程序。</li><li><strong>命令行编译和运行</strong>：熟悉使用 <code>javac</code> 编译 Java 文件和 <code>java</code> 命令运行 Java 程序。</li></ul></li><li><p><strong>基础语法</strong></p><ul><li><strong>基本数据类型</strong>：<ul><li>八种原始数据类型：<code>int</code>、<code>char</code>、<code>double</code>、<code>boolean</code> 等。</li><li>包装类：了解原始数据类型对应的包装类（如 <code>Integer</code>、<code>Double</code>）。</li></ul></li><li><strong>变量与常量</strong>：学习局部变量、成员变量、<code>final</code> 常量的定义与使用。</li><li><strong>运算符</strong>：掌握基本运算符（算术运算符、关系运算符、逻辑运算符、位运算符等）。</li><li><strong>流程控制</strong>：<ul><li>条件语句：<code>if</code>、<code>else if</code>、<code>else</code>、<code>switch</code>。</li><li>循环语句：<code>for</code>、<code>while</code>、<code>do-while</code>。</li></ul></li><li><strong>输入输出</strong>：<ul><li>使用 <code>Scanner</code> 获取用户输入。</li><li>基本的 <code>System.out.println</code> 和 <code>System.in</code> 输入。</li></ul></li></ul></li><li><p><strong>方法和参数</strong></p><ul><li><strong>方法的定义与调用</strong>：<ul><li>定义带有返回值和不带返回值的方法。</li><li>传递参数，值传递机制。</li></ul></li><li><strong>方法的重载</strong>：学习同名方法的不同参数列表。</li><li><strong>递归</strong>：编写递归方法，理解递归的原理及其应用场景。</li></ul></li><li><p><strong>面向对象编程 (OOP)</strong></p><ul><li><strong>类与对象</strong>：<ul><li>创建类与对象，理解类的结构（字段、方法、构造器）。</li><li>实例化对象，使用构造方法初始化对象。</li><li><code>this</code> 关键字的使用，理解其作用。</li></ul></li><li><strong>封装</strong>：<ul><li>使用 <code>private</code>、<code>public</code>、<code>protected</code> 修饰符封装类中的数据。</li><li>编写 getter 和 setter 方法访问类的私有字段。</li></ul></li><li><strong>继承</strong>：<ul><li>理解继承的概念，使用 <code>extends</code> 实现类的继承。</li><li>方法重写（<code>@Override</code>）和构造器的继承。</li><li><code>super</code> 关键字的使用。</li></ul></li><li><strong>多态</strong>：<ul><li>理解多态的概念，父类引用指向子类对象。</li><li>方法重载和方法重写的区别。</li></ul></li><li><strong>抽象类与接口</strong>：<ul><li>理解抽象类的定义与作用，使用 <code>abstract</code> 关键字。</li><li>接口的定义，使用 <code>implements</code> 实现接口。</li><li>Java 8 中的接口默认方法与静态方法。</li></ul></li></ul></li><li><p><strong>常用类</strong></p><ul><li><strong>String 类</strong>：<ul><li>理解 <code>String</code> 是不可变的。</li><li>常用方法：<code>length()</code>、<code>substring()</code>、<code>equals()</code>、<code>trim()</code>、<code>toUpperCase()</code>、<code>toLowerCase()</code>、<code>split()</code> 等。</li><li><code>StringBuilder</code> 和 <code>StringBuffer</code> 的区别及其用法。</li></ul></li><li><strong>包装类</strong>：<ul><li>使用 <code>Integer</code>、<code>Double</code> 等包装类。</li><li>基本数据类型与包装类的自动装箱与拆箱。</li></ul></li><li><strong>Math 类</strong>：<ul><li>常见数学方法：<code>Math.abs()</code>、<code>Math.pow()</code>、<code>Math.sqrt()</code>、<code>Math.random()</code> 等。</li></ul></li><li><strong>大数运算类</strong>：<ul><li>大整数运算类：<code>BigInteger</code>类。</li><li>大实数运算类：<code>BigDecimal</code>类。</li></ul></li><li><strong>日期与时间类</strong>：<ul><li>Java 8 之前的 <code>Date</code>、<code>Calendar</code> 类。</li><li>Java 8 之后的 <code>LocalDate</code>、<code>LocalTime</code>、<code>LocalDateTime</code>、<code>DateTimeFormatter</code>。</li></ul></li></ul></li><li><p><strong>数组与集合</strong></p><ul><li><strong>数组</strong>：<ul><li>声明与初始化数组：一维数组与多维数组。</li><li>遍历数组，常见操作（排序、查找）。</li></ul></li><li><strong>集合框架</strong>：<ul><li><strong>List</strong>：如 <code>ArrayList</code>、<code>LinkedList</code> 的使用及其区别。</li><li><strong>Set</strong>：如 <code>HashSet</code>、<code>TreeSet</code>，理解集合中的元素无序性与唯一性。</li><li><strong>Map</strong>：如 <code>HashMap</code>、<code>TreeMap</code>，键值对存储结构，常用方法如 <code>put()</code>、<code>get()</code>、<code>keySet()</code>。</li><li><strong>迭代器</strong>：使用 <code>Iterator</code> 和增强型 <code>for</code> 循环遍历集合。</li></ul></li></ul></li><li><p><strong>Stream API</strong></p><ul><li><strong>基本概念</strong>：理解流是什么，为什么要使用流，分清楚中间操作和终止操作。</li><li><strong>常用操作</strong>：<ul><li><strong>常用的中间操作</strong>：如<code>map()</code>、<code>filter()</code>、<code>sorted()</code>、<code>distinct()</code>等。</li><li><strong>常用的终止操作</strong>：如<code>forEach()</code>、<code>collect()</code>、<code>reduce()</code>、<code>count()</code>等。</li></ul></li></ul></li><li><p><strong>异常处理</strong></p><ul><li><strong>基本概念</strong>：理解异常的分类：<code>Checked Exception</code> 和 <code>Unchecked Exception</code>。</li><li><strong>try-catch 语句</strong>：编写异常处理代码，捕获并处理异常。</li><li><strong>finally 关键字</strong>：理解 <code>finally</code> 块的作用。</li><li><strong>自定义异常</strong>：创建自定义异常类，抛出和捕获自定义异常。</li></ul></li><li><p><strong>输入输出 (IO) 操作</strong></p><ul><li><strong>文件操作</strong>：使用 <code>File</code> 类进行文件和目录操作。</li><li><strong>字节流与字符流</strong>：<ul><li>学习 <code>InputStream</code>、<code>OutputStream</code>（字节流），以及 <code>Reader</code>、<code>Writer</code>（字符流）的使用。</li></ul></li><li><strong>缓冲流</strong>：使用 <code>BufferedReader</code>、<code>BufferedWriter</code> 进行高效文件读写。</li></ul></li><li><p><strong>多线程基础</strong></p><ul><li><strong>线程的概念</strong>：理解什么是线程，如何在 Java 中创建线程。</li><li><strong>实现多线程</strong>：<ul><li>继承 <code>Thread</code> 类并重写 <code>run()</code> 方法。</li><li>实现 <code>Runnable</code> 接口并传递给 <code>Thread</code> 对象。</li></ul></li><li><strong>线程控制</strong>：常见方法如 <code>start()</code>、<code>sleep()</code>、<code>join()</code>。</li><li><strong>JUC</strong>：强大的 java 并发工具包。</li></ul></li><li><p><strong>网络编程</strong></p><ul><li><strong>基本概念</strong>：理解 TCP&#x2F;IP 协议，熟悉网络编程中的基本术语（如客户端、服务器、端口、IP 地址）。</li><li><strong>TCP 通信</strong>：<ul><li>使用 ServerSocket 和 Socket 实现服务器和客户端之间的通信。</li><li>服务器端通过 accept() 方法接收客户端连接，客户端通过 connect() 方法连接服务器。</li><li>使用输入输出流（InputStream 和 OutputStream）进行数据传输。</li></ul></li><li><strong>UDP 通信</strong>：<ul><li>使用 DatagramSocket 和 DatagramPacket 进行无连接的 UDP 单播通信。</li><li>使用 DatagramSocket 和 DatagramPacket 进行广播通信。</li><li>使用 DatagramSocket、MulticastSocket 和 DatagramPacket 进行组播通信。</li></ul></li></ul></li><li><p><strong>反射</strong></p><ul><li><strong>基本概念</strong>：什么是反射，反射的作用以及它的优势与缺点。</li><li><strong>常用操作</strong>：<ul><li><strong>获取类信息</strong>：通过 Class.forName()、getClass() 获取类的 Class 对象。</li><li><strong>获取构造方法</strong>：使用 getConstructors() 获取类的构造方法并实例化对象。</li><li><strong>获取方法</strong>：使用 getMethods() 或 getDeclaredMethods() 获取类中的方法并调用。</li><li><strong>获取字段</strong>：使用 getFields() 或 getDeclaredFields() 获取类中的字段，并进行修改。</li></ul></li></ul></li><li><p><strong>代理</strong></p><ul><li><strong>基本概念</strong>：代理模式是一种设计模式，允许通过代理对象控制对目标对象的访问。</li><li><strong>静态代理</strong>：代理类与目标类实现相同的接口，代理类中控制对目标类的调用。</li><li><strong>动态代理</strong>：使用 Proxy 类和 InvocationHandler 接口实现动态代理。代理对象在运行时生成，并可以在调用目标方法前后添加额外的功能。</li></ul></li></ol><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><div class="note info no-icon flat"><h3 id="Java基础文章导航-🌏"><a href="#Java基础文章导航-🌏" class="headerlink" title="Java基础文章导航 🌏"></a>Java基础文章导航 🌏</h3><ol><li><a href="/post/4g7gt549.html" title="字符编码">字符编码</a></li><li><a href="/post/x4idevfe.html" title="正则表达式">正则表达式</a></li><li><a href="/post/haki98t3.html" title="regex和replacement转义">regex和replacement转义</a></li><li><a href="/post/j9ujeumh.html" title="集合">集合</a></li><li><a href="/post/c0460286.html" title="BigInteger">BigInteger</a></li><li><a href="/post/9m407u54.html" title="BigDecimal">BigDecimal</a></li><li><a href="/post/6882356e.html" title="Java变量名和包名命名规范">Java变量名和包名命名规范</a></li><li><a href="/post/7tcb7iuv.html" title="Stream">Stream</a></li><li><a href="/post/p83a54r9.html" title="Error">Error</a></li><li><a href="/post/tgpsr7if.html" title="File">File</a></li><li><a href="/post/g9jeg624.html" title="Thread">Thread</a></li><li><a href="/post/d82hjg08.html" title="代理">代理</a></li><li><a href="/post/3859609d.html" title="反射">反射</a></li><li><a href="/post/wwuiij1v.html" title="网络编程">网络编程</a></li><li><a href="/post/tgpsr7if.html" title="时间类">时间类</a></li></ol></div><script src='/js/series.js'></script>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/post/wwuiij1v.html"/>
      <url>/post/wwuiij1v.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Java 网络编程主要是通过套接字 (Socket) 来实现的，它允许程序在网络上进行通信。Java 提供了丰富的网络编程 API，特别是 java.net 包，其中包括一些核心类，如 Socket、ServerSocket、InetAddress 等。<br>根据使用的传输协议的不同将我们将网络编程分为以下两大类：</p><ul><li>UDP (用户数据报协议)：无连接协议，适合对速度要求高但不一定需要可靠传输的应用场景。</li><li>TCP (传输控制协议)：面向连接，提供可靠的数据传输。</li></ul><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>UDP 是一种无连接协议，适合需要快速传输而不要求可靠性的应用场景。<br>在客户端使用 DatagramSocket 将 DatagramPacket 发送至指定 IP 的指定端口，在服务器端使用 DatagramSocket 监听指定端口。</p><p>UDP 服务器示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">12345</span>)) &#123;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, buffer.length);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;UDP 服务器已启动，等待数据...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                socket.receive(packet); <span class="comment">// 接收数据</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">received</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(packet.getData(), <span class="number">0</span>, packet.getLength());</span><br><span class="line">                System.out.println(<span class="string">&quot;收到数据：&quot;</span> + received);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 发送回应</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> <span class="string">&quot;服务器返回：&quot;</span> + received;</span><br><span class="line">                <span class="type">byte</span>[] responseData = response.getBytes();</span><br><span class="line">                <span class="type">DatagramPacket</span> <span class="variable">responsePacket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(responseData, responseData.length,</span><br><span class="line">                        packet.getAddress(), packet.getPort());</span><br><span class="line">                socket.send(responsePacket);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UDP 客户端示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello UDP Server!&quot;</span>;</span><br><span class="line">            <span class="type">byte</span>[] buffer = message.getBytes();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发送数据包</span></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, buffer.length, InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>), <span class="number">12345</span>);</span><br><span class="line">            socket.send(packet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 接收回应</span></span><br><span class="line">            <span class="type">byte</span>[] responseBuffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">responsePacket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(responseBuffer, responseBuffer.length);</span><br><span class="line">            socket.receive(responsePacket);</span><br><span class="line">            <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(responsePacket.getData(), <span class="number">0</span>, responsePacket.getLength());</span><br><span class="line">            System.out.println(<span class="string">&quot;从服务器收到数据：&quot;</span> + response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上示例是基于 UDP 的单播实现，使用 UDP 还可以实现组播和广播。</p><p>在服务器使用 DatagramSocket 将 DatagramPacket 发送到指定 IP 的指定端口，在客户端使用 MulticastSocket 加入组播组监听指定端口。</p><p>UDP 组播服务器示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MulticastServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello, this is a multicast message!&quot;</span>;</span><br><span class="line">            <span class="type">byte</span>[] buffer = message.getBytes();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 组播地址 (224.0.0.1 是保留的组播地址之一，可用的组播地址为 224.0.0.0 - 239.255.255.255)</span></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">group</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;224.0.0.1&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, buffer.length, group, <span class="number">12345</span>);</span><br><span class="line"></span><br><span class="line">            socket.send(packet); <span class="comment">// 发送组播消息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;组播消息已发送到组播地址：&quot;</span> + group.getHostAddress());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UDP 组播客户端示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MulticastClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建一个 MulticastSocket 用于加入组播组</span></span><br><span class="line">            <span class="type">MulticastSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MulticastSocket</span>(<span class="number">12345</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 加入组播组 (224.0.0.1)</span></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">group</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;224.0.0.1&quot;</span>);</span><br><span class="line">            socket.joinGroup(group);</span><br><span class="line">            System.out.println(<span class="string">&quot;已加入组播组：&quot;</span> + group.getHostAddress());</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, buffer.length);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 接收组播消息</span></span><br><span class="line">            socket.receive(packet);</span><br><span class="line">            <span class="type">String</span> <span class="variable">received</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(packet.getData(), <span class="number">0</span>, packet.getLength());</span><br><span class="line">            System.out.println(<span class="string">&quot;接收到的组播消息：&quot;</span> + received);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 退出组播组</span></span><br><span class="line">            socket.leaveGroup(group);</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UDP 的广播实现与单播无太大差异，发送信号端将指定 IP 更改为 255.255.255.255 即可。</p><p>UDP 广播服务器示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BroadcastServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>()) &#123;</span><br><span class="line">            socket.setBroadcast(<span class="literal">true</span>); <span class="comment">// 启用广播模式</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello, this is a broadcast message!&quot;</span>;</span><br><span class="line">            <span class="type">byte</span>[] buffer = message.getBytes();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建广播地址 255.255.255.255</span></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, buffer.length,</span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;255.255.255.255&quot;</span>), <span class="number">12345</span>);</span><br><span class="line"></span><br><span class="line">            socket.send(packet); <span class="comment">// 发送广播</span></span><br><span class="line">            System.out.println(<span class="string">&quot;广播消息已发送&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UDP 广播客户端示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BroadcastClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">12345</span>)) &#123;</span><br><span class="line">            socket.setBroadcast(<span class="literal">true</span>); <span class="comment">// 启用广播模式</span></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, buffer.length);</span><br><span class="line">            System.out.println(<span class="string">&quot;等待广播消息...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            socket.receive(packet); <span class="comment">// 接收广播消息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">received</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(packet.getData(), <span class="number">0</span>, packet.getLength());</span><br><span class="line">            System.out.println(<span class="string">&quot;接收到的广播消息：&quot;</span> + received);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>TCP 是面向连接的协议，单播通信中常用 TCP 来保证数据的可靠传输。<br>在客户端使用 Socket 连接到服务器，在服务器使用 ServerSocket 监听连接。</p><p>服务器示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">12345</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器已启动，等待客户端连接...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 接受客户端的连接</span></span><br><span class="line">                <span class="type">Socket</span> <span class="variable">clientSocket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">                System.out.println(<span class="string">&quot;客户端已连接：&quot;</span> + clientSocket.getInetAddress());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 为每个客户端连接创建一个线程处理</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClientHandler</span>(clientSocket).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClientHandler</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Socket clientSocket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClientHandler</span><span class="params">(Socket socket)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clientSocket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(clientSocket.getInputStream()));</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(clientSocket.getOutputStream(), <span class="literal">true</span>)</span><br><span class="line">        ) &#123;</span><br><span class="line">            String clientInput;</span><br><span class="line">            <span class="keyword">while</span> ((clientInput = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;收到客户端信息：&quot;</span> + clientInput);</span><br><span class="line">                out.println(<span class="string">&quot;服务器返回：&quot;</span> + clientInput); <span class="comment">// 将信息返回给客户端</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                clientSocket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">12345</span>); <span class="comment">// 连接到服务器</span></span><br><span class="line">             <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(socket.getOutputStream(), <span class="literal">true</span>);</span><br><span class="line">             <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()))</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="comment">// 向服务器发送数据</span></span><br><span class="line">            out.println(<span class="string">&quot;Hello Server!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取服务器的返回数据</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> in.readLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;从服务器收到信息：&quot;</span> + response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理并发连接"><a href="#处理并发连接" class="headerlink" title="处理并发连接"></a>处理并发连接</h2><p>上面的例子使用多线程来处理并发连接的问题，但是这个例子的实现并不好，频繁的创建和销毁线程往往是一笔巨大的开销，所以在多客户端的场景中，使用线程池来处理并发连接是很常见的做法。</p><p>使用线程池对服务器进行改造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PORT</span> <span class="operator">=</span> <span class="number">12345</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>); <span class="comment">// 创建线程池</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(PORT)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器已启动，等待客户端连接...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">clientSocket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">                pool.execute(<span class="keyword">new</span> <span class="title class_">ClientHandler</span>(clientSocket)); <span class="comment">// 将客户端请求交给线程池处理</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            pool.shutdown(); <span class="comment">// 关闭线程池</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="错误处理和异常管理"><a href="#错误处理和异常管理" class="headerlink" title="错误处理和异常管理"></a>错误处理和异常管理</h2><p>网络编程中，错误和异常处理非常重要，例如：</p><ul><li>网络不通</li><li>超时</li><li>IO 异常</li></ul><p>使用 try-catch 块捕获异常，并适时记录或处理。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/post/3859609d.html"/>
      <url>/post/3859609d.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Java 反射（Reflection）是 Java 语言中的一个功能强大的特性，允许程序在运行时检查或修改自身的结构（类、方法、字段等）。通过反射，开发者可以在程序运行时动态地访问类和对象的属性、调用方法，甚至修改其行为。反射主要用于框架开发、工具类库、动态代理等场景。</p><h2 id="Java-反射的常见用途："><a href="#Java-反射的常见用途：" class="headerlink" title="Java 反射的常见用途："></a>Java 反射的常见用途：</h2><ol><li><strong>在运行时获取类信息</strong>：可以获取一个类的名称、构造方法、字段、方法、父类等信息。</li><li><strong>动态创建对象</strong>：通过反射动态地创建类的实例，甚至可以调用私有构造方法。</li><li><strong>调用方法</strong>：可以在运行时调用对象的公开或私有方法。</li><li><strong>访问和修改字段</strong>：可以在运行时访问或修改对象的公开或私有字段。</li><li><strong>动态代理</strong>：使用反射机制可以实现动态代理，特别是 AOP（面向切面编程）和其他框架中的功能。</li></ol><h2 id="常用的反射类"><a href="#常用的反射类" class="headerlink" title="常用的反射类"></a>常用的反射类</h2><ul><li><code>Class&lt;?&gt;</code>：代表一个类，提供了很多用于获取类信息的方法，比如 <code>getDeclaredFields()</code>、<code>getDeclaredMethods()</code>。</li><li><code>Constructor&lt;?&gt;</code>：代表构造方法，可以通过反射创建对象。</li><li><code>Field</code>：代表类的字段，可以用来访问和修改对象的字段。</li><li><code>Method</code>：代表类的方法，可以用来调用对象的方法。</li></ul><h2 id="反射的使用"><a href="#反射的使用" class="headerlink" title="反射的使用"></a>反射的使用</h2><ol><li>获取 Class 对象：</li></ol><ul><li>通过类名：<code>Class.forName(&quot;com.example.MyClass&quot;)</code></li><li>通过对象：<code>object.getClass()</code></li><li>通过类字面量：<code>MyClass.class</code></li></ul><ol start="2"><li>获取构造方法：</li></ol><ul><li><code>Constructor&lt;?&gt;[] getConstructors()</code>：返回所有公共构造方法对象的数组</li><li><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code>：返回所有构造方法对象的数组</li><li><code>Constructor&lt;T&gt;[] getConstructor(Class&lt;?&gt;... parameterTypes)</code>：返回单个公共构造方法对象</li><li><code>Constructor&lt;?&gt;[] getDeclaredConstructors(Class&lt;?&gt;... parameterTypes)</code>：返回单个构造方法对象</li></ul><p>成员方法：</p><ul><li><code>T newInstance(Object... initargs)</code>：根据指定的构造方法创建对象</li><li><code>setAccessible(boolean flag)</code>：设置为 true，代表取消访问检查</li></ul><ol start="3"><li>获取字段：</li></ol><ul><li><code>Field[] getFields()</code>：返回所有公共成员变量对象的数组</li><li><code>Field[] getDelaredFields</code>：返回所有成员变量对象的数组</li><li><code>Field getField(String name)</code>：返回单个公共成员变量对象</li><li><code>Field getDelaredFiedl(String name)</code>：返回单个成员变量对象</li></ul><p>成员方法：</p><ul><li><code>void set(Object obj, Object value)</code>：赋值</li><li><code>Object get(Object obj)</code>：获取值</li><li><code>setAccessible(boolean flag)</code>：设置为 true，代表取消访问检查</li></ul><ol start="4"><li>获取方法：</li></ol><ul><li><code>Method[] getMethods</code>：返回所有公共成员方法对象的数组，包括继承的</li><li><code>Method[] getDelaredMethods</code>：放回成员方法对象的数组，不包括继承的</li><li><code>Method getMethod(String name, Class&lt;?&gt;... parameterTypes)</code>：返回单个公共成员方法对象</li><li><code>Method getDelaredMethod(String name, Class&lt;?&gt;... parameterTypes)</code>：返回单个成员方法对象</li></ul><p>成员方法：</p><ul><li><code>Object invoke(Object obj, Object... args)</code>：运行方法</li><li><code>setAccessible(boolean flag)</code>：设置为 true，代表取消访问检查</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReflectionExample</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;Initial Name&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. 获取Class对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = ReflectionExample.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建对象实例</span></span><br><span class="line">        <span class="type">ReflectionExample</span> <span class="variable">instance</span> <span class="operator">=</span> (ReflectionExample) clazz.getDeclaredConstructor().newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 访问私有字段</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(instance, <span class="string">&quot;Updated Name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 调用私有方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">printNameMethod</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;printName&quot;</span>);</span><br><span class="line">        printNameMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        printNameMethod.invoke(instance); <span class="comment">// 输出：Name: Updated Name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实际开发中，反射的性能相对较低，因此不推荐频繁使用。它主要用于框架开发或当需要动态操作对象时才会使用。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理</title>
      <link href="/post/d82hjg08.html"/>
      <url>/post/d82hjg08.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在 Java 中，代理（Proxy）模式是一种设计模式，它允许你为对象提供一个替身或占位符，以控制对该对象的访问。代理模式可以用于各种场景，比如延迟加载、访问控制、日志记录、事务处理等。</p><p>Java 中有两种常见的代理方式：</p><ul><li>静态代理</li><li>动态代理</li></ul><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>静态代理类在编译期间就已经确定，需要手动编写代理类，通常，静态代理类实现与被代理对象相同的接口，并且在代理类中可以对方法的调用进行增强处理。</p><p>在下面的例子中，ServiceProxy 是 RealService 的代理，它在调用 performAction 方法之前和之后做了一些额外的工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">performAction</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口的真实对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RealService</span> <span class="keyword">implements</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performAction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Performing action in RealService&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceProxy</span> <span class="keyword">implements</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Service realService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceProxy</span><span class="params">(Service realService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.realService = realService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performAction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Proxy before action&quot;</span>);</span><br><span class="line">        realService.performAction();  <span class="comment">// 调用真实对象的方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Proxy after action&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Service</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceProxy</span>(<span class="keyword">new</span> <span class="title class_">RealService</span>());</span><br><span class="line">        service.performAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>Java 的动态代理是在运行时生成代理类。Java 提供了两种动态代理的方式：</p><ul><li>JDK 动态代理：用于代理实现了接口的类。</li><li>CGLIB 动态代理：用于代理没有实现接口的类。</li></ul><h3 id="JDK-动态代理"><a href="#JDK-动态代理" class="headerlink" title="JDK 动态代理"></a>JDK 动态代理</h3><p>JDK 动态代理依赖于 java.lang.reflect.Proxy 类和 InvocationHandler 接口。</p><p>在这个示例中，Proxy.newProxyInstance 方法用于动态创建一个代理对象。通过 InvocationHandler 接口的 invoke 方法，可以在调用真实对象的方法之前或之后执行一些额外操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">performAction</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口的真实对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RealService</span> <span class="keyword">implements</span> <span class="title class_">Service</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performAction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Performing action in RealService&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceInvocationHandler</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Proxy before action&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);  <span class="comment">// 调用真实对象的方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Proxy after action&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Service</span> <span class="variable">realService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RealService</span>();</span><br><span class="line">        <span class="type">Service</span> <span class="variable">proxyService</span> <span class="operator">=</span> (Service) Proxy.newProxyInstance(</span><br><span class="line">                realService.getClass().getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Service.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ServiceInvocationHandler</span>(realService)</span><br><span class="line">        );</span><br><span class="line">        proxyService.performAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CGLIB-动态代理"><a href="#CGLIB-动态代理" class="headerlink" title="CGLIB 动态代理"></a>CGLIB 动态代理</h3><p>CGLIB 动态代理不要求目标类实现接口，它通过继承目标类来创建代理对象。CGLIB 常用于没有实现接口的类的代理。<br>需要注意，JDK 动态代理只能代理实现了接口的类，而 CGLIB 可以代理没有接口的类。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thread</title>
      <link href="/post/g9jeg624.html"/>
      <url>/post/g9jeg624.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Java 的多线程编程是一个非常强大的部分 😎，它使得我们能过在一个程序中并发的执行多个任务。合理使用多线程，可以提高 Java 应用程序的性能，尤其是在处理 I&#x2F;O 操作或计算密集型任务时。</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>以下是一些在 Java 中实现多线程的主要方式和相关概念：</p><ol><li>继承 Thread 类</li></ol><p>通过继承 Thread 类并重写 run()方法，可以创建一个新线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; - &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        thread1.start(); <span class="comment">// 启动线程1</span></span><br><span class="line">        thread2.start(); <span class="comment">// 启动线程2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法适合简单的多线程任务。<br>不推荐用于复杂项目中，因为 Java 只允许单继承，这限制了灵活性。</p><ol start="2"><li>实现 Runnable 接口</li></ol><p>实现 Runnable 接口是一种更常见的方式，适合需要实现多个线程类时的需求，它避免了 Java 单继承的限制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; - &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">myRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>()</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myRunnable);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myRunnable);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>推荐在大多数场景下使用，特别是当需要将线程与业务逻辑解耦时。<br>更灵活，适合多继承的类结构，因为可以实现多个接口。</p><ol start="3"><li>ExecutorService</li></ol><p>ExecutorService 是一个更高级的多线程管理工具，提供线程池的功能，适合需要管理大量线程的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>); <span class="comment">// 创建线程池</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            executorService.submit(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; is running&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown(); <span class="comment">// 关闭线程池</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当需要处理大量线程时，手动管理每个线程的创建、启动、关闭较为复杂。<br>ExecutorService 提供了一个线程池，可以高效地管理线程的生命周期，适合并发任务或需要复用线程的情况。</p><ol start="4"><li>Callable 和 Future</li></ol><p>Callable 接口与 Runnable 类似，但它可以返回结果或抛出异常。配合 Future 可以获取线程执行的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line">        Callable&lt;Integer&gt; task = () -&gt; &#123;</span><br><span class="line">            <span class="comment">// 返回计算结果</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        Future&lt;Integer&gt; future = executor.submit(task);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Result: &quot;</span> + future.get());</span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当需要线程返回结果时，可以使用 Callable 接口，它允许线程任务返回一个值。<br>配合 Future 对象，可以异步获取线程的执行结果。</p><h2 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h2><p>Java 线程的生命周期主要有以下几个状态：</p><ul><li>新建（NEW）：线程对象已创建，但未启动。</li><li>就绪（READY）：线程已启动，正在等待 CPU 调度。</li><li>运行（RUNNING）：线程获得 CPU，正在执行任务。</li><li>阻塞（BLOCKED）：线程因等待锁或资源被阻塞。</li><li>等待（WAITING）：线程在等待某个条件（例如等待另一个线程的通知）。</li><li>超时等待（TIMED_WAITING）：线程在等待一段时间后再进行操作，例如 Thread.sleep()。</li><li>终止（TERMINATED）：线程的任务执行完毕或由于异常终止。</li></ul><p>在 java.lang.Thread.State 枚举类中定义了以下几种状态：</p><ul><li>NEW</li><li>RUNNABLE</li><li>BLOCKED</li><li>WAITING</li><li>TIME_WAITING</li><li>TERMAINATED</li></ul><p>并没有见到 RUNNING 的状态，这是因为 RUNNABLE 状态已经足够描述线程是否可以执行，且线程调度的具体时机由操作系统控制。RUNNABLE 状态涵盖了 READY 和 RUNNING 这两种情况，将其进一步细分并无太大必要，也无法完全掌控线程在 CPU 上的具体执行情况。这种设计使得线程状态管理更加简洁，同时又能灵活应对大多数并发场景。</p><h2 id="守护线程（Daemon-Thread）"><a href="#守护线程（Daemon-Thread）" class="headerlink" title="守护线程（Daemon Thread）"></a>守护线程（Daemon Thread）</h2><p>守护线程（Daemon Thread）是一种在后台运行的线程，通常用于执行辅助性任务，如垃圾回收、日志记录等。当所有的非守护线程（用户线程）都结束时，JVM 将会退出，不管是否有守护线程仍在运行。</p><p>使用 setDaemon(true) 方法将线程设置为守护线程，必须在 start() 方法调用之前设置，否则会抛出 IllegalThreadStateException。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaemonThreadExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">daemonThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;守护线程运行中...&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        daemonThread.setDaemon(<span class="literal">true</span>);  <span class="comment">// 设置为守护线程</span></span><br><span class="line">        daemonThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：当主线程结束时，守护线程也会立即终止。</p><h2 id="礼让线程"><a href="#礼让线程" class="headerlink" title="礼让线程"></a>礼让线程</h2><p>礼让线程是指线程主动放弃 CPU 使用权，将执行机会交给其他线程。Java 中，Thread.yield() 方法用于实现这种功能。</p><p>当一个线程调用 yield() 方法时，它会尝试让出 CPU，回到就绪状态，但它不能保证当前正在运行的线程会立刻停止运行。<br>操作系统会根据调度算法选择其他处于就绪状态的线程执行。如果没有其他线程或其他线程的优先级较低，当前线程可能会再次执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YieldExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 1 - &quot;</span> + i);</span><br><span class="line">                Thread.<span class="keyword">yield</span>();  <span class="comment">// 礼让 CPU</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 2 - &quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入线程"><a href="#插入线程" class="headerlink" title="插入线程"></a>插入线程</h2><p>插入线程是指一个线程等待另一个线程执行完成后再继续执行。Java 提供了 Thread.join() 方法来实现这种功能。</p><p>当线程调用另一个线程的 join() 方法时，当前线程会进入等待状态，直到被调用的线程执行完毕为止。<br>也可以指定超时时间，使用 join(long millis) 让当前线程等待指定的时间后继续执行，不管目标线程是否已经完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JoinExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程 1 - &quot;</span> + i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);  <span class="comment">// 模拟耗时任务</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程 2 - &quot;</span> + i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);  <span class="comment">// 模拟耗时任务</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            thread1.join();  <span class="comment">// 等待 thread1 完成</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程继续执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：thread1 会先执行完成，主线程才会继续执行。<br>如果不使用 join()，则主线程与其他线程可能会并行执行。</p><h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><p>Java 线程可以通过设置优先级来建议操作系统调度器决定哪个线程应该优先运行。线程优先级是一个整数，取值范围从 1 到 10，默认优先级为 5。通过 setPriority(int newPriority) 方法可以设置线程的优先级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriorityExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">highPriorityThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;高优先级线程&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">lowPriorityThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;低优先级线程&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        highPriorityThread.setPriority(Thread.MAX_PRIORITY);  <span class="comment">// 设置高优先级</span></span><br><span class="line">        lowPriorityThread.setPriority(Thread.MIN_PRIORITY);  <span class="comment">// 设置低优先级</span></span><br><span class="line"></span><br><span class="line">        lowPriorityThread.start();</span><br><span class="line">        highPriorityThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程优先级只是给操作系统的一个建议，线程的实际调度还是由操作系统决定。因此，在不同的操作系统上，线程优先级的效果可能不同。<br>不应依赖线程优先级来确保程序的正确性，应将其视为一个优化工具。</p><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>多线程程序中一个关键问题就是线程安全，即多个线程并发访问共享资源，不管运行时环境采用何种调度方式或者这些进程将如何交替进行，并且在主调代码中不需要任何额外的同步和协作，这个类都能表现出正常的行为，那么就称这个类是线程安全的。</p><p>如何保证一个类是线程安全的，可以从以下三个特性出发，分别有以下手段：</p><ol><li>原子性（Atomicity）：单个或多个操作是要么全部执行，要么都不执行，提供了互斥访问，同一时刻只能有一个线程来对它进行操作。</li><li>可见性（Visibility）：一个线程对主内存的修改可以及时的被其他线程观察到。</li><li>有序性（Ordering）：一个线程观察其他指令执行顺序，由于指令重排序的存在，该观察结果一般杂乱无序。</li></ol><p>原子性（Atomicity）：</p><ul><li>Atomic 包<ul><li>AtomicInteger、AtomicLong、AtomicBoolean：提供了对 int、long、boolean 类型的原子操作。</li><li>AtomicReference：提供对任意对象的原子引用操作，适合于需要保证线程安全的对象引用。</li><li>AtomicStampReference：解决 CAS 的 ABA 问题。</li></ul></li><li>synchronized<ul><li>修饰代码块：对代码块上锁，锁住的是指定对象。</li><li>修饰方法：对整个方法上锁，锁住的是调用的对象。</li><li>修饰静态方法：对整个静态方法上锁，锁住的是这个类。</li></ul></li><li>锁<ul><li>synchronized：内置锁，简单易用。</li><li>ReentrantLock：可重入锁，灵活控制加锁与解锁，支持公平性、可重入性和可中断性。</li><li>ReadWriteLock：读写锁，允许多线程并发读，写操作独占锁。</li><li>StampedLock：支持乐观读锁，适合读多写少的场景。</li><li>Condition：与 ReentrantLock 搭配使用，实现复杂的等待与通知机制。</li><li>Semaphore：信号量，用于控制访问资源的线程数量。</li></ul></li></ul><p>对比：</p><ul><li>atomic 包 提供了高效的无锁机制，适合简单的状态管理和计数器，但仅适用于单一变量的原子性操作，不能处理复杂的多变量同步。</li><li>synchronized 是最简单的锁机制，适用于需要确保多个线程对共享资源的访问同步的场景。其性能在现代 JVM 中得到了优化，但在复杂应用中可能不够灵活。</li><li>Lock 提供了更灵活的锁控制，适用于需要定制锁行为或复杂的同步场景。相比 synchronized，Lock 可以提高性能，但需要开发者手动管理锁的释放，增加了使用的复杂性。</li></ul><p>可见性（Visibility）：</p><ul><li>volatile：volatile 是 Java 中提供的轻量级同步机制，确保对变量的读写操作具有可见性。使用 volatile 修饰的变量，线程对该变量的修改会立即更新到主内存，其他线程读取该变量时也会直接从主内存中获取最新的值，而不是使用线程本地缓存。</li><li>synchronized：synchronized 也可以确保可见性。在一个线程进入 synchronized 块之前，它会从主内存中获取所有共享变量的最新值；在退出 synchronized 块时，它会把对共享变量的修改写回主内存。因此，在 synchronized 块内进行的操作是对其他线程可见的。</li><li>final：当一个字段被声明为 final 时，Java 确保它在构造器中初始化完成后，其他线程能够看到这个字段的正确值。这意味着对象一旦构造完成，所有线程都能够看见 final 字段的值。</li></ul><p>有序性（Ordering）：</p><ul><li>volatile 关键字：除了保证可见性，volatile 还可以保证一定的有序性。对于 volatile 变量，JMM 保证对它的写操作会在它后面的读操作之前完成，即禁止了特定情况下的指令重排序。</li><li>synchronized 块：synchronized 不仅可以保证可见性，也可以保证有序性。在一个线程持有 synchronized 锁的期间，Java 会保证线程之间的操作按顺序执行，禁止指令重排序。</li></ul><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>死锁是指两个或多个线程互相等待对方持有的资源，导致任务无法进行。常见的死锁场景是线程 A 锁定资源 1，同时等待资源 2，而线程 B 锁定资源 2，等待资源 1。</p><p>避免死锁的方法：</p><ul><li>尽量减少锁的使用。</li><li>遵循一致的资源请求顺序，防止循环等待。</li></ul><h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><p>这三个方法是 Java 内置的线程通信机制，定义在 Object 类中，因为每个对象都可以作为锁来控制线程的同步。</p><ul><li>wait()：让当前线程等待，并释放当前对象的锁，直到其他线程调用 notify() 或 notifyAll() 使其唤醒。</li><li>notify()：唤醒在当前对象监视器上等待的一个线程。</li><li>notifyAll()：唤醒在当前对象监视器上等待的所有线程。</li></ul><p>这三者必须在同步代码块或者同步方法中使用，否则会抛出 IllegalMonitorStateException 异常。</p><p>示例：生产者-消费者模型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SharedResource</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">available</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">produce</span><span class="params">(<span class="type">int</span> value)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (available) &#123;</span><br><span class="line">            wait(); <span class="comment">// 等待消费者消费完毕</span></span><br><span class="line">        &#125;</span><br><span class="line">        data = value;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产者生产: &quot;</span> + value);</span><br><span class="line">        available = <span class="literal">true</span>;</span><br><span class="line">        notify(); <span class="comment">// 通知消费者数据已准备好</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">consume</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (!available) &#123;</span><br><span class="line">            wait(); <span class="comment">// 等待生产者生产数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者消费: &quot;</span> + data);</span><br><span class="line">        available = <span class="literal">false</span>;</span><br><span class="line">        notify(); <span class="comment">// 通知生产者可以继续生产</span></span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SharedResource resource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(SharedResource resource)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resource = resource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                resource.produce(value++);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>); <span class="comment">// 模拟生产时间</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SharedResource resource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(SharedResource resource)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resource = resource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                resource.consume();</span><br><span class="line">                Thread.sleep(<span class="number">1500</span>); <span class="comment">// 模拟消费时间</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerConsumerExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SharedResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SharedResource</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Producer</span>(resource));</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Consumer</span>(resource));</span><br><span class="line"></span><br><span class="line">        producer.start();</span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，生产者线程和消费者线程通过 wait() 和 notify() 方法进行通信。生产者在缓冲区满时等待消费者消费，消费者在缓冲区为空时等待生产者生产。</p><h2 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h2><p>JUC 是 Java 并发工具包（Java Util Concurrent）的缩写，它是 Java 5 中引入的一个强大的并发框架，旨在简化和增强 Java 应用中的并发编程。</p><ol><li>线程池</li></ol><p>JUC 提供了丰富的线程池实现，使用线程池可以避免手动管理线程的创建和销毁，提升系统性能。线程池通过 Executors 工厂类来创建，主要包括以下几种：</p><ul><li>FixedThreadPool：一个固定数量的线程池。</li><li>CachedThreadPool：一个可根据需要创建新线程的线程池，但如果线程闲置超过 60 秒则会被终止并移除。</li><li>SingleThreadExecutor：只有一个线程的线程池，确保任务按顺序执行。</li><li>ScheduledThreadPool：用于定时任务执行或周期性任务调度的线程池。</li></ul><p>自定义线程池 ThreadPoolExecutor：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="type">int</span> corePoolSize,          // 核心线程数</span></span><br><span class="line"><span class="params">    <span class="type">int</span> maximumPoolSize,       // 最大线程数</span></span><br><span class="line"><span class="params">    <span class="type">long</span> keepAliveTime,        // 空闲线程存活时间</span></span><br><span class="line"><span class="params">    TimeUnit unit,             // 空闲线程存活时间的单位</span></span><br><span class="line"><span class="params">    BlockingQueue&lt;Runnable&gt; workQueue,  // 任务队列</span></span><br><span class="line"><span class="params">    ThreadFactory threadFactory,        // 线程工厂</span></span><br><span class="line"><span class="params">    RejectedExecutionHandler handler    // 拒绝策略</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure><p>参数说明：</p><ol><li><p>corePoolSize（核心线程数）：</p><ul><li>核心线程是线程池中的基本线程数，在没有超时机制时，它们会一直存在，不会被回收，即使处于空闲状态。</li><li>当提交一个任务时，如果当前线程数小于核心线程数，即使线程池中有空闲线程，也会创建新的线程来执行任务。</li></ul></li><li><p>maximumPoolSize（最大线程数）：</p><ul><li>最大线程数是线程池能容纳的最大线程数量，当核心线程全部繁忙，且任务队列已满时，线程池会创建新的线程，直到达到 maximumPoolSize。</li></ul></li><li><p>keepAliveTime（空闲线程存活时间）：</p><ul><li>当线程数超过 corePoolSize，多余的空闲线程将会在超过 keepAliveTime 后被终止。这个值只对超过核心线程数的线程起作用。</li></ul></li><li><p>unit（时间单位）：</p><ul><li>keepAliveTime 的时间单位，如 TimeUnit.SECONDS、TimeUnit.MILLISECONDS 等。</li></ul></li><li><p>workQueue（任务队列）：<br>一个阻塞队列，用来存放等待执行的任务。常用的队列类型有：</p><ul><li>LinkedBlockingQueue：一个无界队列，可以存储任意数量的任务。</li><li>ArrayBlockingQueue：一个有界队列，任务数量超过其容量后会阻塞新的任务提交。</li><li>SynchronousQueue：每提交一个任务都需要立刻有线程执行，否则会阻塞。</li></ul></li><li><p>threadFactory（线程工厂）：</p><ul><li>线程工厂用于创建新线程，一般使用默认的 Executors.defaultThreadFactory()，但也可以自定义以便对线程命名、设置优先级等。</li></ul></li><li><p>handler（拒绝策略）：<br>当任务队列满且线程数达到最大线程数时，线程池无法处理新的任务，此时需要采取拒绝策略。ThreadPoolExecutor 提供了几种内置的拒绝策略：</p><ul><li>AbortPolicy（默认）：直接抛出 RejectedExecutionException 异常。</li><li>CallerRunsPolicy：调用线程执行任务，即提交任务的线程自己执行该任务。</li><li>DiscardPolicy：直接丢弃无法处理的任务，不抛出异常。</li><li>DiscardOldestPolicy：丢弃队列中最旧的任务，并尝试重新提交新的任务。</li></ul></li><li><p>同步工具类</p></li></ol><p>JUC 中提供了多个同步工具类来协调多个线程之间的执行顺序。</p><ul><li>CountDownLatch：允许一个或多个线程等待其他线程完成任务。常用于多个子线程完成任务后再继续主线程。</li><li>CyclicBarrier：类似于 CountDownLatch，但它允许一组线程相互等待，所有线程都到达屏障点后一起继续执行。可以在并发任务的阶段性同步时使用。</li><li>Semaphore：信号量，用来限制访问共享资源的线程数量。常用于控制并发量，比如限制对某些资源的并发访问数量。</li><li>Exchanger：用于在线程之间交换数据。两个线程到达同步点后可以交换数据。</li></ul><ol start="3"><li>并发集合</li></ol><p>JUC 提供了线程安全的集合类，用于解决并发环境下对集合进行修改时的线程安全问题。常用的并发集合有：</p><ul><li>ConcurrentHashMap：线程安全的哈希表，允许多个线程并发地访问和修改。</li><li>CopyOnWriteArrayList：适用于读多写少的场景，每次写操作都会复制整个列表。</li><li>ConcurrentLinkedQueue：高效的非阻塞并发队列，适用于多线程环境下的队列操作。</li><li>BlockingQueue：支持阻塞操作的队列，在生产者-消费者模式中非常有用。实现类有 ArrayBlockingQueue、LinkedBlockingQueue、PriorityBlockingQueue 等。</li></ul><ol start="4"><li>原子类</li></ol><p>JUC 提供了一系列的原子操作类，它们保证在多线程环境下对基本数据类型的操作是原子的，避免了显式的同步开销。这些类主要包括：</p><ul><li>AtomicInteger、AtomicLong、AtomicBoolean：对基本类型（如 int、long、boolean）的原子操作。</li><li>AtomicReference：对对象引用进行原子操作。</li><li>AtomicStampedReference：解决 CAS（Compare-And-Swap）中的 ABA 问题。</li></ul><h2 id="线程池最佳线程数"><a href="#线程池最佳线程数" class="headerlink" title="线程池最佳线程数"></a>线程池最佳线程数</h2><p>确定线程池的最佳线程数需要根据任务的特性和硬件资源来调整。</p><ol><li><p>任务类型主要分为两类：</p><ul><li>CPU 密集型任务：这种任务主要消耗 CPU 资源，如复杂的计算、数据处理等。</li><li>I&#x2F;O 密集型任务：这种任务主要依赖 I&#x2F;O 操作，如文件读写、网络请求等，CPU 在等待 I&#x2F;O 完成时通常会处于空闲状态。</li></ul></li><li><p>硬件资源<br>主要是服务器的 CPU 核心数 和 I&#x2F;O 带宽。合理配置线程数可以最大化利用这些资源。</p></li></ol><p>最佳线程数计算公式</p><ol><li>CPU 密集型任务</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">线程数 = CPU 核心数 + 1</span><br></pre></td></tr></table></figure><p>这里加 1 是为了保证即使有某个线程发生上下文切换或者等待时，仍有线程可以继续执行。</p><ol start="2"><li>I&#x2F;O 密集型任务</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">线程数 = CPU 核心数 * 期望CPU利用率 * (1 + 任务等待时间/任务计算时间)</span><br></pre></td></tr></table></figure><p>任务的等待时间与计算时间的比值越大，说明任务越依赖 I&#x2F;O，线程数就应该相应地增加。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这里只是浅尝即止的讨论java的多线程技术，在后续的java并发编程一系列中会深入研究java的并发编程技术。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流</title>
      <link href="/post/qcoitct2.html"/>
      <url>/post/qcoitct2.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Java I&#x2F;O 流（Input&#x2F;Output Stream）是 Java 中进行数据输入和输出的核心组件，分为字节流和字符流两大类。它们可以处理文件、内存、网络、管道等不同的 I&#x2F;O 源。</p><h2 id="IO-流"><a href="#IO-流" class="headerlink" title="IO 流"></a>IO 流</h2><p>IO 流层次结构图</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">java.io.InputStream</span><br><span class="line">    ├── FileInputStream</span><br><span class="line">    ├── BufferedInputStream</span><br><span class="line">    ├── DataInputStream</span><br><span class="line">    ├── ObjectInputStream</span><br><span class="line">    ├── ByteArrayInputStream</span><br><span class="line">    └── PipedInputStream</span><br><span class="line"></span><br><span class="line">java.io.OutputStream</span><br><span class="line">    ├── FileOutputStream</span><br><span class="line">    ├── BufferedOutputStream</span><br><span class="line">    ├── DataOutputStream</span><br><span class="line">    ├── ObjectOutputStream</span><br><span class="line">    ├── ByteArrayOutputStream</span><br><span class="line">    └── PipedOutputStream</span><br><span class="line"></span><br><span class="line">java.io.Reader</span><br><span class="line">    ├── FileReader</span><br><span class="line">    ├── BufferedReader</span><br><span class="line">    ├── InputStreamReader</span><br><span class="line">    ├── StringReader</span><br><span class="line">    └── PipedReader</span><br><span class="line"></span><br><span class="line">java.io.Writer</span><br><span class="line">    ├── FileWriter</span><br><span class="line">    ├── BufferedWriter</span><br><span class="line">    ├── OutputStreamWriter</span><br><span class="line">    ├── StringWriter</span><br><span class="line">    └── PipedWriter</span><br></pre></td></tr></table></figure><p>以上的 IO 流主要分为两个大类：</p><ol><li>字节流（Byte Streams）<br>字节流处理的是二进制数据（8 位字节），用于处理任意类型的文件，如图像、音频等。字节流的两个核心抽象类是：<ul><li>InputStream：字节输入流，用于从数据源读取字节数据。</li><li>OutputStream：字节输出流，用于向目标输出字节数据。</li></ul></li><li>字符流（Character Streams）<br>字符流处理的是文本数据（16 位 Unicode 字符），用于处理文本文件。字符流的两个核心抽象类是：<ul><li>Reader：字符输入流，用于从数据源读取字符。</li><li>Writer：字符输出流，用于向目标输出字符。</li></ul></li></ol><p>常用类：</p><ol><li>InputStream<ul><li>FileInputStream：从文件中读取字节数据。</li><li>BufferedInputStream：为输入流提供缓冲机制，减少对磁盘等资源的频繁访问。</li><li>DataInputStream：用于读取 Java 基本数据类型（如 int、float 等）。</li><li>ObjectInputStream：用于反序列化对象，从流中恢复对象。</li><li>ByteArrayInputStream：从字节数组中读取字节数据。</li><li>PipedInputStream：实现管道输入流，用于线程间通信。</li></ul></li><li>OutputStream<ul><li>FileOutputStream：向文件中写入字节数据。</li><li>BufferedOutputStream：为输出流提供缓冲机制，减少频繁的磁盘写入操作。</li><li>DataOutputStream：用于将 Java 基本数据类型写入到输出流中。</li><li>ObjectOutputStream：用于序列化对象，并将其写入输出流。</li><li>ByteArrayOutputStream：将字节数据写入字节数组中。</li><li>PipedOutputStream：实现管道输出流，用于线程间通信。</li></ul></li><li>Reader<ul><li>FileReader：从文件中读取字符数据，通常是文本文件。</li><li>BufferedReader：为输入流提供缓冲机制，提高读取效率，提供按行读取的功能（readLine()）。</li><li>InputStreamReader：将字节流转换为字符流（常用于字节流与字符流之间的桥梁，如读取带有编码的文件）。</li><li>StringReader：从字符串中读取字符数据。</li><li>PipedReader：实现管道字符输入流，用于线程间通信。</li></ul></li><li>Writer<ul><li>FileWriter：向文件中写入字符数据，通常是文本文件。</li><li>BufferedWriter：为输出流提供缓冲机制，提高写入效率。</li><li>OutputStreamWriter：将字符流转换为字节流（常用于将字符数据写入带有编码的输出流中）。</li><li>StringWriter：将字符数据写入字符串。</li><li>PipedWriter：实现管道字符输出流，用于线程间通信。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Error</title>
      <link href="/post/p83a54r9.html"/>
      <url>/post/p83a54r9.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在 Java 中，异常处理是一种应对程序运行过程中可能出现的错误或异常事件的机制。Java 提供了一套强大的异常处理框架，确保程序能够优雅地处理错误，而不会导致程序崩溃 😎</p><h2 id="异常类"><a href="#异常类" class="headerlink" title="异常类"></a>异常类</h2><p>异常类层次结构图</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Throwable</span><br><span class="line">    ├── java.lang.Exception</span><br><span class="line">    │       ├── java.lang.RuntimeException</span><br><span class="line">    │       │       ├── NullPointerException</span><br><span class="line">    │       │       ├── ArithmeticException</span><br><span class="line">    │       │       ├── IndexOutOfBoundsException</span><br><span class="line">    │       │       └── ...</span><br><span class="line">    │       ├── IOException</span><br><span class="line">    │       ├── SQLException</span><br><span class="line">    │       └── ...</span><br><span class="line">    └── java.lang.Error</span><br><span class="line">            ├── OutOfMemoryError</span><br><span class="line">            ├── StackOverflowError</span><br><span class="line">            ├── VirtualMachineError</span><br><span class="line">            └── ...</span><br></pre></td></tr></table></figure><h3 id="Throwable-类"><a href="#Throwable-类" class="headerlink" title="Throwable 类"></a>Throwable 类</h3><p>所有的异常类都继承自<code>Throwable</code>类，<code>Throwable</code> 有两个重要子类：</p><ul><li><code>Exception</code>：应用程序可能需要处理的可检查异常</li><li><code>Error</code>：严重错误，如内存溢出等，程序不应尝试捕捉这些问题</li></ul><p>常用方法：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public String getMessage()</td><td>放回 throwable 的详细消息字符串</td></tr><tr><td>public String toString()</td><td>返回异常对象的类型和描述信息</td></tr><tr><td>public void printStackTrace()</td><td>在标准错误流中打印异常的堆栈跟踪信息</td></tr><tr><td>public StackTraceElement[] getStackTrace()</td><td>返回表示异常堆栈跟踪的数组，每个元素都是一个 StackTraceElement 对象，包含文件名、类名、方法名和行号</td></tr><tr><td>public Throwable getCause()</td><td>返回导致当前异常的原因（另一个 Throwable 对象），即链式异常中的原始异常。</td></tr></tbody></table><h3 id="Exception-类"><a href="#Exception-类" class="headerlink" title="Exception 类"></a>Exception 类</h3><p><code>Exception</code>是程序中常见的异常类型，它代表程序中可预见的错误情况，开发者可以通过捕获异常来处理。</p><p>Exception 的两种类型：</p><ol><li>受检查异常（Checked Exception）：</li></ol><ul><li>必须在编译时处理（通过 try-catch 或 throws 关键字声明）</li><li>常见的受检查异常包括：<ul><li><code>IOException</code></li><li><code>SQLException</code></li><li><code>ClassNotFoundException</code></li></ul></li></ul><ol start="2"><li>非受检查异常（Unchecked Exception）：</li></ol><ul><li>继承自 <code>RuntimeException</code>，编译器不会强制要求处理，通常由编程错误引发。</li><li>常见的非受检查异常包括：<ul><li><code>NullPointerException</code></li><li><code>ArrayIndexOutOfBoundsException</code></li><li><code>ArithmeticException</code></li></ul></li></ul><h3 id="Error-类"><a href="#Error-类" class="headerlink" title="Error 类"></a>Error 类</h3><p>Error 类表示严重的系统错误，这些错误通常是不可恢复的，程序不应该捕获或处理这些错误。例如，内存不足（<code>OutOfMemoryError</code>）或虚拟机错误（<code>VirtualMachineError</code>）。开发者通常不用显式地处理这些异常，因为它们反映了运行时环境的不可恢复问题。</p><h2 id="异常处理的语法"><a href="#异常处理的语法" class="headerlink" title="异常处理的语法"></a>异常处理的语法</h2><p>使用 <code>try-catch-finally</code> 结构来处理异常，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 可能会抛出异常的代码</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (异常类型<span class="number">1</span> e) &#123;</span><br><span class="line">    <span class="comment">// 处理异常</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (异常类型<span class="number">2</span> e) &#123;</span><br><span class="line">    <span class="comment">// 处理异常</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 可选的finally块，始终执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常的抛出"><a href="#异常的抛出" class="headerlink" title="异常的抛出"></a>异常的抛出</h2><ul><li><code>throw</code>：可以在方法中显式抛出异常并结束这个方法</li><li><code>throws</code>：用于声明方法可能抛出的异常，告诉调用者可能会遇到的异常，如果在方法体中抛出了受检查异常则必须在方法名处声明，非受检查异常则不必须</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;&#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        getMax(arr);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;空指针异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(<span class="string">&quot;数组长度为零&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; max) &#123;</span><br><span class="line">            max = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常的链式抛出"><a href="#异常的链式抛出" class="headerlink" title="异常的链式抛出"></a>异常的链式抛出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChainExceptionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method1();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace(); <span class="comment">// 打印堆栈跟踪</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;除零错误&quot;</span>, e); <span class="comment">// 链式异常</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Exception: 除零错误</span><br><span class="line">at ChainExceptionExample.method1(ChainExceptionExample.java:<span class="number">11</span>)</span><br><span class="line">at ChainExceptionExample.main(ChainExceptionExample.java:<span class="number">5</span>)</span><br><span class="line">Caused by: java.lang.ArithmeticException: / by zero</span><br><span class="line">at ChainExceptionExample.method1(ChainExceptionExample.java:<span class="number">9</span>)</span><br><span class="line">... <span class="number">1</span> more</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>File</title>
      <link href="/post/tgpsr7if.html"/>
      <url>/post/tgpsr7if.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>File</code> 类是 Java 中用于表示文件和目录路径名的类，位于 <code>java.io</code> 包中。它提供了对文件和目录的操作方法，但并不代表实际的文件内容读写。<code>File</code> 类的主要功能是检查文件的存在、创建文件或目录、删除文件、获取文件信息等。</p><h2 id="常用的-File-类方法"><a href="#常用的-File-类方法" class="headerlink" title="常用的 File 类方法"></a>常用的 <code>File</code> 类方法</h2><ol><li><p><strong>创建文件或目录</strong></p><ul><li><code>boolean createNewFile()</code>：创建一个新的文件，如果文件已存在，则返回 <code>false</code>。</li><li><code>boolean mkdir()</code>：创建一个目录。</li><li><code>boolean mkdirs()</code>：创建多个目录（包括必要的但不存在的父目录）。</li></ul></li><li><p><strong>删除文件或目录</strong></p><ul><li><code>boolean delete()</code>：删除文件或目录。如果是目录，必须是空的。</li></ul></li><li><p><strong>检查文件&#x2F;目录信息</strong></p><ul><li><code>boolean exists()</code>：检查文件或目录是否存在。</li><li><code>boolean isDirectory()</code>：判断该路径是否是目录。</li><li><code>boolean isFile()</code>：判断该路径是否是文件。</li><li><code>long length()</code>：返回文件的长度（以字节为单位），不能用于目录。</li><li><code>String getName()</code>：获取文件或目录的名称。</li><li><code>String getPath()</code>：获取文件或目录的路径。</li><li><code>String getAbsolutePath()</code>：获取文件或目录的绝对路径。</li><li><code>String getParent()</code>：获取父目录的路径。</li></ul></li><li><p><strong>读取文件列表</strong></p><ul><li><code>String[] list()</code>：列出目录中的文件和目录名。</li><li><code>String[] list(FilenameFilter filter)</code>：根据文件名过滤器返回列表。</li><li><code>File[] listFiles()</code>：列出目录中的文件和目录，以 <code>File</code> 对象数组的形式返回。</li><li><code>File[] listFiles(FileFilter filter)</code>：根据文件过滤器返回列表。</li><li><code>File[] listFiles(FilenameFilter filter)</code>：根据文件名过滤器返回列表。</li></ul></li><li><p><strong>文件重命名</strong></p><ul><li><code>boolean renameTo(File dest)</code>：重命名文件或目录。</li></ul></li><li><p><strong>文件权限</strong></p><ul><li><code>boolean canRead()</code>：判断是否可读。</li><li><code>boolean canWrite()</code>：判断是否可写。</li><li><code>boolean canExecute()</code>：判断是否可执行。</li></ul></li></ol><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;example.txt&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.createNewFile()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件已创建: &quot;</span> + file.getName());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件已存在。&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生错误。&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取文件信息</span></span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件名: &quot;</span> + file.getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;绝对路径: &quot;</span> + file.getAbsolutePath());</span><br><span class="line">            System.out.println(<span class="string">&quot;可写: &quot;</span> + file.canWrite());</span><br><span class="line">            System.out.println(<span class="string">&quot;可读: &quot;</span> + file.canRead());</span><br><span class="line">            System.out.println(<span class="string">&quot;文件大小: &quot;</span> + file.length() + <span class="string">&quot; 字节&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件不存在。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除文件</span></span><br><span class="line">        <span class="keyword">if</span> (file.delete()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件已删除: &quot;</span> + file.getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;删除文件失败。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FilenameFilter"><a href="#FilenameFilter" class="headerlink" title="FilenameFilter"></a>FilenameFilter</h2><p><code>FilenameFilter</code> 是一个用于过滤目录中文件名的接口，通常与 <code>File</code> 类的 <code>list()</code> 或 <code>listFiles()</code> 方法配合使用。它的过滤条件基于文件的名称。</p><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><ul><li><code>boolean accept(File dir, String name)</code>：这个方法用来定义过滤的逻辑。<code>dir</code> 表示当前的目录，<code>name</code> 是当前文件的名称。如果返回 <code>true</code>，该文件将包含在过滤结果中。</li></ul><h3 id="示例代码（使用-FilenameFilter）"><a href="#示例代码（使用-FilenameFilter）" class="headerlink" title="示例代码（使用 FilenameFilter）"></a>示例代码（使用 <code>FilenameFilter</code>）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FilenameFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilenameFilterExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;example_directory&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建FilenameFilter来过滤扩展名为&quot;.txt&quot;的文件</span></span><br><span class="line">        <span class="type">FilenameFilter</span> <span class="variable">txtFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilenameFilter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File dir, String name)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> name.endsWith(<span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取目录下的所有.txt文件</span></span><br><span class="line">        String[] files = dir.list(txtFilter);</span><br><span class="line">        <span class="keyword">if</span> (files != <span class="literal">null</span> &amp;&amp; files.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String file : files) &#123;</span><br><span class="line">                System.out.println(file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有找到.txt文件。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FileFilter"><a href="#FileFilter" class="headerlink" title="FileFilter"></a>FileFilter</h2><p><code>FileFilter</code> 是一个用于过滤 <code>File</code> 对象的接口，通常与 <code>File</code> 类的 <code>listFiles()</code> 方法配合使用。与 <code>FilenameFilter</code> 不同，它直接过滤 <code>File</code> 对象，而不是仅基于文件名。</p><h3 id="方法：-1"><a href="#方法：-1" class="headerlink" title="方法："></a>方法：</h3><ul><li><code>boolean accept(File pathname)</code>：这个方法用来定义过滤的逻辑。<code>pathname</code> 是当前的 <code>File</code> 对象。如果返回 <code>true</code>，该文件将包含在过滤结果中。</li></ul><h3 id="示例代码（使用-FileFilter）"><a href="#示例代码（使用-FileFilter）" class="headerlink" title="示例代码（使用 FileFilter）"></a>示例代码（使用 <code>FileFilter</code>）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileFilterExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;example_directory&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建FileFilter来过滤扩展名为&quot;.txt&quot;的文件</span></span><br><span class="line">        <span class="type">FileFilter</span> <span class="variable">txtFileFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileFilter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File file)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> file.isFile() &amp;&amp; file.getName().endsWith(<span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取目录下的所有.txt文件</span></span><br><span class="line">        File[] files = dir.listFiles(txtFileFilter);</span><br><span class="line">        <span class="keyword">if</span> (files != <span class="literal">null</span> &amp;&amp; files.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">                System.out.println(file.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有找到.txt文件。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lambda表达式</title>
      <link href="/post/4829566o.html"/>
      <url>/post/4829566o.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在JDK8中，Java引入了一个重要特性，主要用于简化代码，尤其是在处理函数式编程时🤔</p><h2 id="函数式接口（Functional-Interface）"><a href="#函数式接口（Functional-Interface）" class="headerlink" title="函数式接口（Functional Interface）"></a>函数式接口（Functional Interface）</h2><p>Java的<code>lambda</code>表达式必须依赖函数式接口，一个函数式接口只能有一个抽象方法,使用<code>@FunctionalInterface</code>注解来标记一个接口为函数式接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyFunctionalInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">defaultMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a default method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a static method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><p>当在使用一些方法，方法要求传入一个函数式接口的实现类对象时，便可以使用lambda表达式去简写这个对象，假设现在有一个需求：</p><blockquote><p>给定一个名单列表，使用Stream流来筛选剩下名字开头为A的，并将名字转换成大写输出</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>, <span class="string">&quot;David&quot;</span>);</span><br><span class="line"></span><br><span class="line">names.stream()</span><br><span class="line">     .filter(name -&gt; name.startsWith(<span class="string">&quot;A&quot;</span>))  <span class="comment">// 过滤名字以 &quot;A&quot; 开头的元素</span></span><br><span class="line">     .map(String::toUpperCase)              <span class="comment">// 转换为大写</span></span><br><span class="line">     .forEach(System.out::println);         <span class="comment">// 打印结果</span></span><br></pre></td></tr></table></figure><p>lambda表达式可以有三种不同的形式：</p><ul><li>无参数，无返回值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">() -&gt; System.out.println(<span class="string">&quot;Hello, World&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>有参数，无返回值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="type">int</span> x, <span class="type">int</span> y) -&gt; System.out.println(x + y);</span><br></pre></td></tr></table></figure></li><li>有参数，有返回值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="type">int</span> x, <span class="type">int</span> y) -&gt; &#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure></li></ul><p>简写：</p><ol><li>如果只有一个参数，可以省略小括号  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str -&gt; System.out.println(str);</span><br></pre></td></tr></table></figure></li><li>如果表达式体只有一个语句，可以省略大括号和<code>return</code>关键字  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(x, y) -&gt; x + y; <span class="comment">// 等价于 (x, y) -&gt; &#123; return x + y; &#125;</span></span><br></pre></td></tr></table></figure></li><li>在使用 lambda 表达式时，编译器会根据上下文自动推断参数的类型，所以可以省略参数类型  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comparatpr&lt;Integer&gt; cpr = (a, b) -&gt; a.compareTo(b);</span><br></pre></td></tr></table></figure></li></ol><h2 id="方法引用（Method-References）"><a href="#方法引用（Method-References）" class="headerlink" title="方法引用（Method References）"></a>方法引用（Method References）</h2><p>方法引用是lambda表达式的简化形式，它直接引用现有的方法</p><ol><li>引用静态方法<br>  语法：类名::方法名  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;Integer&gt; print = System.out::println;</span><br><span class="line">print.accept(<span class="number">123</span>);</span><br></pre></td></tr></table></figure></li><li>引用其他类成员方法<br>  语法：对象::方法  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">Supplier&lt;Integer&gt; length = str::length;</span><br><span class="line">System.out.println(length.get());</span><br></pre></td></tr></table></figure></li><li>引用本类成员方法<br>  语法：this::方法</li><li>引用父类成员方法<br>  语法：super::方法</li><li>引用构造方法<br>  语法：类名::new  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;List&lt;String&gt;&gt; listSupplier = ArrayList::<span class="keyword">new</span>;</span><br><span class="line">List&lt;String&gt; list = listSupplier.get();</span><br></pre></td></tr></table></figure></li></ol><h2 id="lambda表达式的局部变量捕获"><a href="#lambda表达式的局部变量捕获" class="headerlink" title="lambda表达式的局部变量捕获"></a>lambda表达式的局部变量捕获</h2><p>在lambda表达式中，可以访问局部变量，但是这些变量必须是隐式<code>final</code>的，也就是说不能够在lambda表达式外修改它们</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">Consumer&lt;Integer&gt; consumer = x -&gt; System.out.println(x + num);</span><br><span class="line"><span class="comment">// num = 11;  // 这样会报错，因为 `num` 必须保持不变</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream</title>
      <link href="/post/7tcb7iuv.html"/>
      <url>/post/7tcb7iuv.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>当我们在对<code>数组</code>、<code>collection</code>等集合中的元素进行操作的时候一般会使用迭代的方式去逐个处理，为了简化代码，加快开发速度，Java 在 JDK8 版本添加<code>Stream</code>流操作，用来以“做什么而非怎么做”的方式处理集合。</p><p>例如，现在有一个需求：</p><blockquote><p>从给定句子中返回单词长度大于 5 的单词列表，并按长度倒序排列，最多返回 3 个</p></blockquote><p>在 JDK7 及以前的版本，我们可以通过以下方式进行实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">sortGetTop3LongWords</span><span class="params">(String sentence)</span> &#123;</span><br><span class="line">    <span class="comment">// 分割句子，得到单词列表</span></span><br><span class="line">    String[] words = sentence.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    List&lt;String&gt; wordList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 迭代判断单词长度，先过滤出长度按要求的单词</span></span><br><span class="line">    <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">        <span class="keyword">if</span> (word.length() &gt; <span class="number">5</span>)</span><br><span class="line">            wordList.add(word);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 按长度倒叙排列长度符合要求的单词</span></span><br><span class="line">    wordList.sort(((o1, o2) -&gt; o2.length() - o1.length()));</span><br><span class="line">    <span class="comment">// 判读List集合的长度，如果大于3截取前三个数据的子List返回</span></span><br><span class="line">    <span class="keyword">if</span> (wordList.size() &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        wordList = wordList.subList(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> wordList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 JDK8 及以后的版本，我们可以借助 Stream 流，写出更加优雅的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">sortGetTop3LongWordsByStream</span><span class="params">(String sentence)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(sentence.split(<span class="string">&quot; &quot;</span>)) <span class="comment">// 分割</span></span><br><span class="line">            .filter(word -&gt; word.length() &gt; <span class="number">5</span>)  <span class="comment">// 过滤</span></span><br><span class="line">            .sorted(((o1, o2) -&gt; o2.length() - o1.length())) <span class="comment">// 排序</span></span><br><span class="line">            .limit(<span class="number">3</span>) <span class="comment">// 限制</span></span><br><span class="line">            .collect(Collectors.toList()); <span class="comment">// 转List</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简直是太优雅力 😎</p><h2 id="Stream-流操作"><a href="#Stream-流操作" class="headerlink" title="Stream 流操作"></a>Stream 流操作</h2><p>概括的讲，Stream 流操作可以分为 3 种类型：</p><ul><li>Stream 的创建操作</li><li>Stream 的中间操作</li><li>Stream 的终止操作</li></ul><h3 id="创建操作"><a href="#创建操作" class="headerlink" title="创建操作"></a>创建操作</h3><table><thead><tr><th>数据来源</th><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>单列集合</td><td>default Stream<E> stream()</td><td>Collection 中的默认方法</td></tr><tr><td>单列集合</td><td>default Stream<E> parallelStream()</td><td>返回一个可以并行执行的 Stream 流对象</td></tr><tr><td>双列集合</td><td>无</td><td>无法直接创建 Stream 流，可以通过 keySet，entrySet 等方法间接创建</td></tr><tr><td>数组</td><td>static <T> Stream<T> stream(T[] array)</td><td>Arrays 中的静态方法</td></tr><tr><td>零散数据</td><td>static<T> Stream<T> of(T… values)</td><td>Stream 中的静态方法</td></tr></tbody></table><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><table><thead><tr><th>方法名</th><th>含义</th></tr></thead><tbody><tr><td>Stream<T> filter(Predicate&lt;? super T&gt; predicate)</td><td>用于通过设置条件过滤出元素</td></tr><tr><td>Stream<T> limit(long maxSize)</td><td>保留前 n 个元素</td></tr><tr><td>Stream<T> skip(long n)</td><td>去除前 n 个元素</td></tr><tr><td>Stream<T> sorted(Comparator&lt;? super T&gt; comparator)</td><td>对流进行排序</td></tr><tr><td>Stream<T> distinct()</td><td>元素去重（依赖 hashCode 和 equals 方法）</td></tr><tr><td>static <T> Stream<T> concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</td><td>合并两个流</td></tr><tr><td><R> Stream<R> map(Function&lt;? super T, ? extends R&gt; mapper)</td><td>转换流中的元素类型</td></tr></tbody></table><h3 id="终止操作"><a href="#终止操作" class="headerlink" title="终止操作"></a>终止操作</h3><table><thead><tr><th>方法名</th><th>含义</th></tr></thead><tbody><tr><td>void forEach(Consumer&lt;? super T&gt; action)</td><td>遍历</td></tr><tr><td>long count()</td><td>统计</td></tr><tr><td>Object[] toArray()</td><td>将流中的元素转换为 Object 类型数组</td></tr><tr><td><A> A[] toArray(IntFunction&lt;A[]&gt; generator)</td><td>将流中的元素转换为指定类型的数组</td></tr><tr><td>&lt;R, A&gt; R collect(Collector&lt;? super T, A, R&gt; collector)</td><td>将流中的元素转换为指定类型的数组</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java变量名和包名命名规范</title>
      <link href="/post/6882356e.html"/>
      <url>/post/6882356e.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java-总体命名规范"><a href="#Java-总体命名规范" class="headerlink" title="Java 总体命名规范"></a>Java 总体命名规范</h2><ul><li>项目名全部要小写</li><li>包名全部小写</li><li>类名首字母大写，其余组成词首字母大写（即驼峰命名）</li><li>变量名，方法名首字母小写，如果名称由多个单词组成，除了首字母外的每个单词的首字母都大写</li><li>常量名全部大写</li><li>所有的命名规则必须按照以下规则：</li><li>名称只能由字母、数字、下划线、$符号组成.</li><li>不能以数字开头.</li><li>名称不能使用Java中的关键字.</li><li>坚决不允许出现中文及拼音命名</li></ul><h2 id="Java-包命名规范"><a href="#Java-包命名规范" class="headerlink" title="Java 包命名规范"></a>Java 包命名规范</h2><p>为了保障每个Java Package命名的唯一性，在Java编程规范中要求开发人员在自己定义的包名前加上唯一的前缀。由于互联网上的域名称是不会重复的,所以多数开发人员采用自己公司在互联网上的域名称作为自己程序包的唯一前缀。命名规范有大致一下几种：</p><h3 id="团体"><a href="#团体" class="headerlink" title="团体"></a>团体</h3><ul><li>com：公司项目,copyright由项目发起的公司所有.<br>包名：com.公司名.项目名.模块名.……</li><li>team：团队项目,指由团队发起,并由该团队开发的项目,copyright属于该团队所有.<br>包名：team.团队名.项目名.模块名.……</li></ul><h3 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h3><p>个人的英语单词有individual、personal、private、one-man,进一步对以上四个单词词意进行分析并在保证了唯一性,继而使用每个单词的前4个字母作为前缀,与com也做了区分.</p><ul><li>indi：个体项目,指个人发起,但非自己独自完成的项目,可公开或私有项目,copyright主要属于发起者.<br>包名：indi.发起者名.项目名.模块名.……</li><li>pers：个人项目,指个人发起,独自完成,可分享的项目,copyright主要属于个人.<br>包名：pers.个人名.项目名.模块名.……</li><li>priv：私有项目,指个人发起,独自完成,非公开的私人使用的项目,copyright属于个人.<br>包名：priv.个人名.项目名.模块名.……</li><li>onem：与indi相同，推荐使用indi.</li></ul><p>转自<a href="https://blog.csdn.net/weixin_44793245/article/details/120838917">此文章</a></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端开发基础（一）- 简介</title>
      <link href="/post/z3823524.html"/>
      <url>/post/z3823524.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><h3 id="后端开发导航-🌏"><a href="#后端开发导航-🌏" class="headerlink" title="后端开发导航 🌏"></a>后端开发导航 🌏</h3><ol><li><a href="/post/z3823524.html" title="后端开发基础（一）- 简介">后端开发基础（一）- 简介</a></li><li><a href="/post/u9rubdog.html" title="后端开发基础（二）- Java基础">后端开发基础（二）- Java基础</a></li><li><a href="/post/34f041e5.html" title="后端开发基础（三）- maven">后端开发基础（三）- maven</a></li></ol></div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于什么是后端，可见<a href="/post/m514k094.html">前端技术与后端技术之间的区别</a>🤔</p><h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><ol><li>计算机网络基础知识</li><li>JavaScript，Java，Python，C#等编程语言</li><li>Git 版本控制</li><li>GitHub 等仓库托管服务</li><li>MySQL 等数据库</li><li>API 应用编程接口</li><li>ServerSide，CDN，ClientSide 缓存</li><li>网络安全基础知识</li><li>测试</li><li>CI&#x2F;CD</li><li>深入了解数据库</li><li>软件设计与架构</li><li>设计开发准则</li><li>Docker等容器化或虚拟化平台</li><li>消息代理</li><li>搜索引擎</li><li>规模化建设</li></ol><p>详细可见<a href="https://roadmap.sh/backend">Developer Roadmaps</a></p><script src='/js/series.js'></script>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端技术与后端技术之间的区别</title>
      <link href="/post/m514k094.html"/>
      <url>/post/m514k094.html</url>
      
        <content type="html"><![CDATA[<h2 id="前端和后端是什么"><a href="#前端和后端是什么" class="headerlink" title="前端和后端是什么"></a>前端和后端是什么</h2><blockquote><p><strong>前端</strong>（英语：<strong>front-end</strong>）和<strong>后端</strong>（英语：<strong>back-end</strong>）是描述进程开始和结束的通用词汇。前端作用于采集输入信息，后端进行处理。计算机程序的界面样式，视觉呈现属于前端。</p></blockquote><p>引用自<a href="https://zh.wikipedia.org/wiki/%E5%89%8D%E7%AB%AF%E5%92%8C%E5%90%8E%E7%AB%AF">维基百科</a></p><h2 id="前端的工作原理"><a href="#前端的工作原理" class="headerlink" title="前端的工作原理"></a>前端的工作原理</h2><blockquote><p>前端一词是指用户可以直接与之交互的图形用户界面（GUI），例如导航菜单、设计元素、按钮、图像和图表。采用技术术语，用户看到的带有多个 UI 组件的页面或屏幕称为文档对象模型（DOM）。<br>三种主要的计算机语言会影响用户与前端的交互方式：</p><ul><li>HTML 定义前端结构和不同的 DOM 元素</li><li>层叠样式表（CSS）定义 Web 应用程序的样式，包括布局、字体、颜色和视觉样式</li><li>JavaScript 通过操作 DOM 增加一层动态功能</li></ul><p>JavaScript 可以触发页面上的更改并显示新信息。这意味着前端可以处理基本的用户交互（或请求），例如显示日历或检查用户是否输入有效的电子邮件地址。前端将更复杂的请求传递给后端。</p></blockquote><p>引用自<a href="https://aws.amazon.com/cn/compare/the-difference-between-frontend-and-backend/">AWS</a></p><h2 id="后端的工作原理"><a href="#后端的工作原理" class="headerlink" title="后端的工作原理"></a>后端的工作原理</h2><blockquote><p>应用程序的后端有时称为服务器端，用于管理 Web 应用程序的整体功能。当用户与前端交互时，此交互会以 HTTP 格式向后端发送请求。后端处理请求并返回响应。</p><p>后端处理请求时，它通常会与以下组件进行交互：</p><ul><li>用于检索或修改相关数据的数据库服务器</li><li>执行用户所请求任务子集的微服务</li><li>用于收集额外信息或执行其他功能的第三方 API</li></ul><p>后端使用多种通信协议和技术来完成请求。此外，后端还能同时处理数千个不同的请求。后端结合并发和并行技术，例如在多个服务器上分配请求、缓存和数据复制。</p></blockquote><p><img src="https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2020/08/12/happy-path8.png"></p><p>引用自<a href="https://aws.amazon.com/cn/compare/the-difference-between-frontend-and-backend/">AWS</a></p><h2 id="前后端区别摘要"><a href="#前后端区别摘要" class="headerlink" title="前后端区别摘要"></a>前后端区别摘要</h2><table><thead><tr><th></th><th>前端</th><th>后端</th></tr></thead><tbody><tr><td>技术</td><td>前端使用 HTML、CSS、JavaScript 和前端框架。</td><td>后端使用 Java、Python、Ruby、API 和数据库管理系统等编程语言。</td></tr><tr><td>并发</td><td>每位用户都有自己的应用程序副本，因此前端不必处理并发问题。</td><td>后端使用多种策略同时处理成千上万的用户请求。</td></tr><tr><td>缓存</td><td>浏览器或客户端应用程序缓存应用程序中的文件并使用它们来提高性能。</td><td>后端系统在不同的服务器或 CDN 中缓存文件。</td></tr><tr><td>安全性</td><td>主要由用户负责前端开发中的安全性。前端开发人员主要关注用户输入验证和用户身份验证工作流程。</td><td>后端开发中的安全性更加全面，可以保护数据库、后端服务和应用程序本身。使用加密、安全身份验证系统和安全编码实践实现此安全性。</td></tr><tr><td>开发目标</td><td>前端开发侧重于创建功能齐全、响应迅速且设计良好的用户界面。</td><td>后端开发涉及创建支持前端开发的可靠架构。</td></tr><tr><td>开发技能</td><td>前端开发人员知悉 HTML、CSS 和 JavaScript。他们可以使用前端框架并创建具有视觉吸引力的页面。他们解决用户在与应用程序交互时面临的痛点。</td><td>后端开发人员具有编码和数据库管理技能。他们还了解代码安全性以及如何使用应用程序开发工具、平台和框架。</td></tr></tbody></table><h2 id="前后端主要区别"><a href="#前后端主要区别" class="headerlink" title="前后端主要区别"></a>前后端主要区别</h2><p>前端和后端是宽泛的术语，在逻辑上对任何应用程序的不同技术和软件层进行分组。前端侧重于用户可以看到的方面。相反，后端是使应用程序正常运行的一切方面。</p><p>可以将前端视为汽车的外部，将后端视为汽车内部的所有机械。只有内部机械正常运作，设计精良的汽车才能以最佳状态运行。但是，外观设计的某些方面也有助于提高汽车速度和性能。同样，应用程序的前端和后端必须经过紧密的设计才能获得最佳结果。</p><p>接下来，我们讨论前端和后端之间的其他关键区别。</p><p><img src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2022/06/15/Microservices-backend-with-the-micro-frontends.jpg"></p><h3 id="开发目标"><a href="#开发目标" class="headerlink" title="开发目标"></a>开发目标</h3><p>全栈开发旨在创建响应迅速、高效和功能齐备的应用程序。前端和后端开发人员在创建最终应用程序方面有不同的目标。</p><p>前端开发人员的目标是开发积极的用户体验，优化应用程序的可访问性和性能，以及创建响应式设计。他们的主要开发目标是确保前端易于交互、设计精良且在不同的平台和设备上完全响应。</p><p>后端开发人员构建并维护应用程序的服务器端操作。他们的主要开发目标是创建可靠的架构，以准确、高效地执行应用程序功能。它们旨在满足用户需求，同时符合所有安全和成本考虑事项。</p><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p>前端开发涉及网站面向用户的方面。这些技术包括 JavaScript、CSS 和 HTML 等计算机语言。前端软件开发还使用前端框架来提高生产效率。</p><p>后端开发使用 Ruby、Java 和 Python 等编程语言来编写服务器端逻辑。后端开发人员还使用数据库、存储技术和 API 技术，以便应用程序和系统相互通信。</p><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>并发是指应用程序能够同时运行多个任务。在前端，每位用户在其浏览器或移动应用程序中有着自己的应用程序副本。这意味着前端开发不存在并发问题。</p><p>另一方面，后端可能必须同时处理数千个请求。后端开发人员使用多种策略：</p><ul><li>多线程，用于管理任务的 CPU 处理</li><li>异步编程，例如回调和承诺</li><li>事件驱动的编程，其中后端侦听多个事件并同时运行相应的事件处理程序</li><li>锁定和同步技术，可让多个用户同时访问同一个资源，而不会出现不一致情况</li></ul><p>在分布式计算方法中，开发人员可以将后端任务分配给多个节点，以便后端同时管理数据密集型工作负载。</p><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>缓存会临时存储应用程序文件的副本，这样下次需要时可以更轻松地检索它们。可以使用缓存来缩短应用程序的加载时间和提高性能。</p><p>在前端，浏览器或客户端应用程序会在用户首次访问时缓存标头图像等数据。下次他们访问相同的内容时，前端会加载缓存的文件以提高性能。</p><p>后端开发使用缓存来减少应用程序服务器上的负载。在后端缓存中存储的内容取决于应用程序本身。缓存的内容包括静态页面、数据库查询结果、API 响应、会话数据、图像和视频。</p><p>一种策略是将文件存储在内容分发网络（CDN）上，该网络充当前端和后端之间的中介。每当用户在前端发出请求时，CDN 都会检查数据是否可用并直接响应。</p><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>前端安全侧重于面向用户的组件。其中包括输入表单、客户端脚本以及身份验证等安全工作流程中的用户体验。</p><p>常见的前端开发安全策略包括输入验证、禁用允许用户在文本框中输入代码的设置以及多重身份验证工作流程。用户负责多个前端安全方面，例如保护其密码或设备安全。</p><p>后端安全侧重于存储和传输中的数据安全。后端管理身份验证、访问控制和会话安全的各个方面。它涵盖了所有后端服务，包括连接的数据库、API 和服务器端编程语言。</p><p>核心后端安全实践包括安全编码、在传输前后加密敏感数据以及安全授权和身份验证系统。</p><h3 id="开发人员技能"><a href="#开发人员技能" class="headerlink" title="开发人员技能"></a>开发人员技能</h3><p>前端开发人员了解客户体验并满足用户需求。他们的主要技能包括熟练掌握 JavaScript、CSS 和 HTML，以及在创建具有视觉吸引力的用户流程方面的设计知识。前端开发人员还掌握多个前端框架，并知道如何进行性能优化。</p><p>后端开发人员对应用程序功能进行编码，使应用程序更安全、没有错误切更加快速。后端开发人员精通多种编程语言，如 Python、Ruby、Java 和 PHP。他们了解像 Django、Ruby on Rails 和 Laravel 这样集成前端和后端的应用程序开发框架。后端开发人员还知悉如何管理和设计关系与非关系数据库。</p><p>全栈开发人员拥有前端和后端开发方面的技能。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发 </tag>
            
            <tag> 前端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发基础（三）- css</title>
      <link href="/post/xy8v73x3.html"/>
      <url>/post/xy8v73x3.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><h3 id="前端开发导航-🌏"><a href="#前端开发导航-🌏" class="headerlink" title="前端开发导航 🌏"></a>前端开发导航 🌏</h3><ol><li><a href="/post/x766a8l8.html" title="前端开发基础（一）- 学习路线">前端开发基础（一）- 学习路线</a></li><li><a href="/post/w2d41vf2.html" title="前端开发基础（二）- html">前端开发基础（二）- html</a></li><li><a href="/post/xy8v73x3.html" title="前端开发基础（三）- css">前端开发基础（三）- css</a></li></ol></div><h2 id="CSS-简介"><a href="#CSS-简介" class="headerlink" title="CSS 简介"></a>CSS 简介</h2><p>CSS 代表层叠样式表（Cascading Style Sheets），是一种用来为结构化文档（如 HTML 文档或 XML 应用）添加样式（字体、间距和颜色等）的计算机语言。</p><h2 id="CSS-基本结构"><a href="#CSS-基本结构" class="headerlink" title="CSS 基本结构"></a>CSS 基本结构</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">selector &#123;</span><br><span class="line">  property: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>selector：选择器，用于指定要应用样式的 HTML 元素</li><li>property：属性，定义要设置的样式类型</li><li>value：属性值，指定该属性要应用的具体样式</li></ul><h2 id="CSS-的插入方式"><a href="#CSS-的插入方式" class="headerlink" title="CSS 的插入方式"></a>CSS 的插入方式</h2><ol><li>内联样式：直接在 HTML 元素的 style 属性中编写样式</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: blue;&quot;</span>&gt;</span>Hello,World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>内部样式表：将样式写在 HTML 文档的<code>&lt;style&gt;</code>标签中，通常放在<code>&lt;head&gt;</code>部分中</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>外部样式表：将 CSS 代码写在单独的<code>.css</code>文件中，通过<code>&lt;link&gt;</code>标签引入到 HTML 中</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="推荐的-CSS-学习资源"><a href="#推荐的-CSS-学习资源" class="headerlink" title="推荐的 CSS 学习资源"></a>推荐的 CSS 学习资源</h2><p>课程推荐：</p><p><a href="https://www.w3schools.com/css/default.asp">W3Schools:🛫</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">MDN Web Docs:🛫</a></p><p>项目实践：<br><a href="https://www.freecodecamp.org/learn/">FreeCodeCamp:🛫</a></p><p>❗❗❗ 学习重点 🤔：</p><ol><li><p><strong>选择器（Selectors）</strong></p><ul><li><strong>基础选择器</strong>：通用选择器（<code>*</code>）、元素选择器（<code>element</code>）、类选择器（<code>.classname</code>）、ID 选择器（<code>#id</code>）。</li><li><strong>组合选择器</strong>：后代选择器（<code>element element</code>）、子选择器（<code>element &gt; element</code>）、相邻兄弟选择器（<code>element + element</code>）、通用兄弟选择器（<code>element ~ element</code>）。</li><li><strong>属性选择器</strong>：存在属性选择器（<code>[attribute]</code>）、指定值的属性选择器（<code>[attribute=value]</code>）、部分匹配的属性选择器（<code>[attribute^=&quot;value&quot;]</code>以特定值开头，<code>[attribute$=&quot;value&quot;]</code>以特定值结尾，<code>[attribute*=&quot;value&quot;]</code>包含特定值）。</li><li><strong>伪类选择器</strong>：如<code>:hover</code>、<code>:nth-child</code>等。</li><li><strong>伪元素选择器</strong>：如<code>::before</code>、<code>::after</code>等。</li><li><strong>组选择器</strong>：并集选择器（<code>selector1, selector2</code>）、交集选择器（<code>selector1.selector2</code>）。</li></ul><p><strong>重点</strong>：理解选择器的优先级和如何有效使用组合选择器来控制样式。</p></li><li><p><strong>盒模型（Box Model）</strong></p><ul><li><strong>内容区域（content）</strong>：显示文本和图片等内容。</li><li><strong>内边距（padding）</strong>：内容与边框之间的空间。</li><li><strong>边框（border）</strong>：围绕内容和内边距的边框。</li><li><strong>外边距（margin）</strong>：元素与其他元素之间的距离。</li></ul><p><strong>重点</strong>：学习如何计算元素的实际尺寸以及如何使用<code>box-sizing</code>属性来控制盒模型。</p></li><li><p><strong>布局（Layout）</strong></p><ul><li><strong>传统布局</strong>：浮动（<code>float</code>）、清除浮动（<code>clear</code>）、<code>position</code>属性。</li><li><strong>现代布局</strong>：<ul><li><strong>Flexbox</strong>：弹性布局，适用于一维布局。</li><li><strong>Grid</strong>：网格布局，适用于二维布局。</li></ul></li></ul><p><strong>重点</strong>：掌握 Flexbox 和 Grid 布局，能够创建复杂、响应式的布局结构。</p></li><li><p><strong>响应式设计与媒体查询（Responsive Design &amp; Media Queries）</strong></p><ul><li><strong>媒体查询</strong>：<code>@media screen and (max-width: 768px)</code>等语法。</li><li><strong>弹性单位</strong>：<code>em</code>、<code>rem</code>、<code>vw</code>、<code>vh</code>等相对单位，能够帮助实现响应式设计。</li></ul><p><strong>重点</strong>：了解如何使用媒体查询和弹性单位实现适配不同屏幕尺寸的布局。</p></li><li><p><strong>CSS 层叠与继承（Cascading &amp; Inheritance）</strong></p><ul><li><strong>层叠</strong>：当多个规则作用于同一元素时，理解优先级规则，主要包括样式的来源（外部、内部或内联）、重要性（<code>!important</code>）、选择器的特定性（Specificity）等。</li><li><strong>继承</strong>：某些样式可以从父元素继承到子元素，如字体和颜色等。</li></ul><p><strong>重点</strong>：学习优先级计算规则，以及如何合理地使用<code>!important</code>避免冲突。</p></li><li><p><strong>动画与过渡（Animations &amp; Transitions）</strong></p><ul><li><strong>过渡</strong>：<code>transition</code>属性用于在元素状态变化时产生平滑的过渡效果。</li><li><strong>动画</strong>：<code>@keyframes</code>和<code>animation</code>属性用于创建复杂的动画效果。</li></ul><p><strong>重点</strong>：学习如何控制动画的关键帧、持续时间、延迟等参数，创建交互效果。</p></li><li><p><strong>常用 CSS 属性</strong></p><ul><li><strong>文本样式</strong>：<code>font-family</code>、<code>font-size</code>、<code>color</code>、<code>text-align</code>等。</li><li><strong>背景与边框</strong>：<code>background-color</code>、<code>background-image</code>、<code>border-radius</code>等。</li><li><strong>显示与可见性</strong>：<code>display</code>、<code>visibility</code>、<code>opacity</code>、<code>z-index</code>等。</li></ul><p><strong>重点</strong>：熟练掌握常用属性，尤其是<code>display</code>中的<code>block</code>、<code>inline</code>、<code>flex</code>、<code>grid</code>等。</p></li></ol><script src='/js/series.js'></script>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 前端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发基础（二）- html</title>
      <link href="/post/w2d41vf2.html"/>
      <url>/post/w2d41vf2.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><h3 id="前端开发导航-🌏"><a href="#前端开发导航-🌏" class="headerlink" title="前端开发导航 🌏"></a>前端开发导航 🌏</h3><ol><li><a href="/post/x766a8l8.html" title="前端开发基础（一）- 学习路线">前端开发基础（一）- 学习路线</a></li><li><a href="/post/w2d41vf2.html" title="前端开发基础（二）- html">前端开发基础（二）- html</a></li><li><a href="/post/xy8v73x3.html" title="前端开发基础（三）- css">前端开发基础（三）- css</a></li></ol></div><h2 id="HTML-简介"><a href="#HTML-简介" class="headerlink" title="HTML 简介"></a>HTML 简介</h2><p>HTML 代表超文本标记语言（Hyper Text Markup Language），是用于创建网页的标准标记语言。它描述了网页的结构，定义了各种元素及其内容。HTML 使用标签（tags）来标记网页内容，每个标签通常由尖括号包围，例如<code>&lt;tags&gt;</code>。</p><h2 id="HTML-基础结构"><a href="#HTML-基础结构" class="headerlink" title="HTML 基础结构"></a>HTML 基础结构</h2><p>一个简单的 HTML 文件通常包含以下基本结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>示例网页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎来到我的网页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;!DOCTYPE html&gt;</code>: 声明文档类型为 HTML5。</li><li><code>&lt;html&gt;</code>: HTML 文档的根元素。</li><li><code>&lt;head&gt;</code>: 包含有关文档的信息（例如标题和元数据）。</li><li><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>: 定义文档的字符编码。</li><li><code>&lt;title&gt;</code>: 网页标题，在浏览器标签中显示。</li><li><code>&lt;body&gt;</code>: 包含网页的可见内容。</li></ul><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><p>标题标签用于定义不同级别的标题，从 <code>&lt;h1&gt;</code>（最高级别）到 <code>&lt;h6&gt;</code>（最低级别）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h3><p>段落标签用于定义文本段落。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h3><p>链接标签用于创建超链接。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.example.com&quot;</span>&gt;</span>点击这里访问示例网站<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h3><p>图像标签用于在网页上插入图片。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><p>有序列表和无序列表用于组织项目列表。</p><p>无序列表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有序列表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><p>表格标签用于创建表格。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>28<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>32<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><p>表单标签用于创建用户输入表单。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/submit&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>姓名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="推荐的-HTML-学习资源"><a href="#推荐的-HTML-学习资源" class="headerlink" title="推荐的 HTML 学习资源"></a>推荐的 HTML 学习资源</h2><p>课程推荐：</p><p><a href="https://www.w3schools.com/html/default.asp">W3Schools:🛫</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML">MDN Web Docs:🛫</a></p><p>项目实践：<br><a href="https://www.freecodecamp.org/learn/">FreeCodeCamp:🛫</a></p><p>❗❗❗学习重点🤔：</p><ol><li><p>理解 HTML 文档结构</p><ul><li><strong>DOCTYPE 声明</strong>: 确保你的 HTML 文件以 <code>&lt;!DOCTYPE html&gt;</code> 开头，这表明该文档是 HTML5 标准。</li><li><strong>HTML 文档的基本结构</strong>: 理解 <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, 和 <code>&lt;body&gt;</code> 标签的作用和用途。</li></ul></li><li><p>学习常用标签</p><ul><li><strong>标题标签 (<code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code>)</strong>: 用于定义标题的层次结构。</li><li><strong>段落标签 (<code>&lt;p&gt;</code>)</strong>: 用于定义段落。</li><li><strong>链接标签 (<code>&lt;a&gt;</code>)</strong>: 用于创建超链接，理解 <code>href</code> 属性的使用。</li><li><strong>图像标签 (<code>&lt;img&gt;</code>)</strong>: 用于插入图片，理解 <code>src</code> 和 <code>alt</code> 属性的使用。</li><li><strong>列表标签 (<code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code>, <code>&lt;li&gt;</code>)</strong>: 用于创建有序和无序列表。</li><li><strong>表格标签 (<code>&lt;table&gt;</code>, <code>&lt;tr&gt;</code>, <code>&lt;th&gt;</code>, <code>&lt;td&gt;</code>)</strong>: 用于创建表格。</li><li><strong>表单标签 (<code>&lt;form&gt;</code>, <code>&lt;input&gt;</code>, <code>&lt;label&gt;</code>, <code>&lt;textarea&gt;</code>, <code>&lt;button&gt;</code>)</strong>: 用于创建用户输入表单。</li></ul></li><li><p>理解 HTML 属性</p><ul><li>学习常见标签的属性，如 <code>href</code>, <code>src</code>, <code>alt</code>, <code>id</code>, <code>class</code>, <code>style</code> 等。</li><li>理解如何使用全局属性（例如 <code>id</code> 和 <code>class</code>）来标识和样式化元素。</li></ul></li><li><p>学习 HTML5 新元素和语义化标签</p><ul><li><strong>语义化标签</strong>: 使用 <code>&lt;header&gt;</code>, <code>&lt;nav&gt;</code>, <code>&lt;article&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;aside&gt;</code> 等标签来增强文档的语义结构。</li><li><strong>媒体元素</strong>: 使用 <code>&lt;audio&gt;</code> 和 <code>&lt;video&gt;</code> 标签嵌入多媒体内容。</li></ul></li><li><p>理解块级元素和内联元素</p><ul><li><strong>块级元素</strong>: 如 <code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;h1&gt;</code> 等，它们通常占据一整行。</li><li><strong>内联元素</strong>: 如 <code>&lt;span&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;img&gt;</code> 等，它们不会打断文本流。</li></ul></li><li><p>理解表单及其控件</p><ul><li>学习如何创建和提交表单。</li><li>理解各种表单控件（如文本框、复选框、单选按钮、下拉菜单）的使用。</li></ul></li><li><p>学习如何使用注释</p><ul><li>使用注释（<code>&lt;!-- 注释内容 --&gt;</code>）来解释代码，便于维护和阅读。</li></ul></li><li><p>学习网页的基本布局</p><ul><li>理解如何使用 <code>&lt;div&gt;</code> 和 CSS 进行基本的网页布局。</li><li>学习如何使用网格布局（Grid Layout）和弹性盒布局（Flexbox）来创建响应式设计。</li></ul></li><li><p>理解 HTML 实体</p><ul><li>学习使用 HTML 实体（如 <code>&amp;amp;</code>, <code>&amp;lt;</code>, <code>&amp;gt;</code>）来表示特殊字符。</li></ul></li></ol><script src='/js/series.js'></script>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发基础（一）- 学习路线</title>
      <link href="/post/x766a8l8.html"/>
      <url>/post/x766a8l8.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><h3 id="前端开发导航-🌏"><a href="#前端开发导航-🌏" class="headerlink" title="前端开发导航 🌏"></a>前端开发导航 🌏</h3><ol><li><a href="/post/x766a8l8.html" title="前端开发基础（一）- 学习路线">前端开发基础（一）- 学习路线</a></li><li><a href="/post/w2d41vf2.html" title="前端开发基础（二）- html">前端开发基础（二）- html</a></li><li><a href="/post/xy8v73x3.html" title="前端开发基础（三）- css">前端开发基础（三）- css</a></li></ol></div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于什么是前端，可见<a href="/post/m514k094.html">前端技术与后端技术之间的区别</a>🤔</p><h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><ol><li>计算机网络基础知识</li><li>HTML 基础知识</li><li>CSS 基础知识</li><li>JavaScript 基础知识</li><li>Git 版本控制</li><li>GitHub 等仓库托管服务</li><li>npm 等包管理器</li><li>React，Vue.js 等前端框架</li><li>网络安全基础知识</li><li>TypeScript类型检查器</li><li>SSR服务端渲染</li><li>SSG静态网站生成器</li></ol><p>详细可见<a href="https://roadmap.sh/frontend">Developer Roadmaps</a></p><script src='/js/series.js'></script>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泡面食谱</title>
      <link href="/post/57cd07p1.html"/>
      <url>/post/57cd07p1.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>❗❗❗ 最近发现的几个超神的泡面吃法 😋😋😋<br>总结自以下视频 🤔</p><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?isOutside=true&aid=788582992&bvid=BV1XC4y1f7sT&cid=1268585687&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div><h2 id="1-泡面蒸蛋"><a href="#1-泡面蒸蛋" class="headerlink" title="1.泡面蒸蛋"></a>1.泡面蒸蛋</h2><mark class="hl-label green">原料：</mark> <ul><li>泡面 <mark class="hl-label orange">推荐：</mark> 清汤类泡面</li><li>鸡蛋两个</li></ul><mark class="hl-label purple">过程：</mark> <ol><li>正常泡面吃完后留下汤</li><li>往汤中加入两颗鸡蛋打散</li><li>根据微波炉情况，叮三到四分钟</li></ol><mark class="hl-label red">注：</mark> 注意钠的摄入量<h2 id="2-芝士土豆泥泡面"><a href="#2-芝士土豆泥泡面" class="headerlink" title="2.芝士土豆泥泡面"></a>2.芝士土豆泥泡面</h2><mark class="hl-label green">原料：</mark> <ul><li>泡面 <mark class="hl-label orange">推荐：</mark> 辣味拌面</li><li>土豆泥粉</li><li>马苏里拉芝士</li></ul><mark class="hl-label purple">过程：</mark> <ol><li>土豆泥粉和两到三倍量的芝士混合</li><li>根据微波炉情况，叮一到两分钟</li><li>拿出搅拌后倒入泡面中</li></ol><mark class="hl-label red">注：</mark> 可解辣<h2 id="3-番茄煎蛋泡面"><a href="#3-番茄煎蛋泡面" class="headerlink" title="3.番茄煎蛋泡面"></a>3.番茄煎蛋泡面</h2><mark class="hl-label green">原料：</mark> <ul><li>泡面 <mark class="hl-label orange">推荐：</mark> 红烧味和番茄味</li><li>番茄一个</li><li>鸡蛋两个</li></ul><mark class="hl-label purple">过程：</mark> <ol><li>番茄切丁</li><li>加油煎两颗鸡蛋</li><li>煎到半熟时捞出其中一颗作为溏心蛋，剩下一颗煎熟</li><li>煎熟后将鸡蛋撕开，加入番茄，炒出汁水</li><li>出汁后加水，烧开后放面和调料包</li><li>面煮熟后出锅放入溏心蛋</li></ol><h2 id="4-上汤泡面"><a href="#4-上汤泡面" class="headerlink" title="4.上汤泡面"></a>4.上汤泡面</h2><mark class="hl-label green">原料：</mark> <ul><li>泡面 <mark class="hl-label orange">推荐：</mark> 浓汤类泡面</li><li>咸蛋一个</li><li>皮蛋一个</li></ul><mark class="hl-label purple">过程：</mark> <ol><li>咸蛋只取蛋黄，皮蛋切成小块一同放入锅中</li><li>加油炒至咸蛋反沙起泡，加水煮开后放面和调料包</li></ol><mark class="hl-label red">注：</mark> 注意钠的摄入量<h2 id="5-蘑菇泡面"><a href="#5-蘑菇泡面" class="headerlink" title="5.蘑菇泡面"></a>5.蘑菇泡面</h2><mark class="hl-label green">原料：</mark> <ul><li>泡面 <mark class="hl-label orange">推荐：</mark> 清汤类泡面</li><li>肉沫</li><li>口蘑几个</li></ul><mark class="hl-label purple">过程：</mark> <ol><li>加油炒熟肉沫后捞出</li><li>不加油碗口朝上放入口蘑，慢烤至口蘑出汁后加水</li><li>将口蘑剪成小块</li><li>待水煮开后放面，调料包和肉沫</li></ol><h2 id="6-紫菜泡面"><a href="#6-紫菜泡面" class="headerlink" title="6.紫菜泡面"></a>6.紫菜泡面</h2><mark class="hl-label green">原料：</mark> <ul><li>泡面 <mark class="hl-label orange">推荐：</mark> 清汤类泡面</li><li>虾皮</li><li>紫菜</li><li>肉丸</li></ul><mark class="hl-label purple">过程：</mark> <ol><li>不加油抄虾皮和紫菜，炒至虾皮发黄紫菜泛绿后加水</li><li>加肉丸后煮五分钟</li><li>加面和调料包</li></ol><mark class="hl-label red">注：</mark> 增鲜用<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>泡面也能吃出花来 😋</p>]]></content>
      
      
      <categories>
          
          <category> 食谱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 食谱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于按值调用和按引用调用</title>
      <link href="/post/681w71ia.html"/>
      <url>/post/681w71ia.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在计算机科学中有一个术语<code>按···调用（call by）</code>用来表示各种编程语言中方法参数的行为。<br>常见的调用方式有以下两种：</p><ul><li>按值调用（call by value）</li><li>按引用调用（call by reference）</li></ul><h2 id="按值调用"><a href="#按值调用" class="headerlink" title="按值调用"></a>按值调用</h2><p>按值调用表示方法接受的是调用者提供的值，对于这种调用方式方法得到是所用参数值的一份<mark class="hl-label red">副本</mark> ，以下是两种编程语言的实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> test&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    test::<span class="built_in">swap</span>(a, b);</span><br><span class="line">    std::cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>10 20</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="type">A</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>(<span class="number">20</span>);</span><br><span class="line">        swap(a, b);</span><br><span class="line">        System.out.println(a.getValue());</span><br><span class="line">        System.out.println(b.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(A a, A b)</span>&#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">temp</span> <span class="operator">=</span> a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>10<br>20</p></blockquote><h2 id="按引用调用"><a href="#按引用调用" class="headerlink" title="按引用调用"></a>按引用调用</h2><p>按引用调用表示方法接受的是调用者提供的变量的位置（location），对于这种调用方式方法可以直接修改所用的参数的值，在c++中可以实现这种操作，但Java中并不可以，Java中的方法调用总是按值调用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> test&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    test::<span class="built_in">swap</span>(a, b);</span><br><span class="line">    std::cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>20 10</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigDecimal</title>
      <link href="/post/9m407u54.html"/>
      <url>/post/9m407u54.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Java</code>中提供了对于大实数运算的相关类<code>BigDecimal</code>，对于那些无法用二进制数精确运算的数可以使用<code>BigDecimal</code>来进行精确运算，<code>BigDecimal</code>的底层存储的是一个 byte 数组，对应<code>String</code>中的每一位，比如：<br>-132.131432<br>⬇<br>[45, 49, 51, 50, 46, 49, 51, 49, 52, 51, 50]<br>⬇<br>[‘-‘, ‘1’, ‘3’, ‘2’, ‘.’, ‘1’, ‘3’, ‘1’, ‘4’, ‘3’, ‘2’]</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>BigDecimal(String val)</td><td>用字符串构造一个大实数</td></tr><tr><td>static BigDecimal valueOf(double val)</td><td>返回数值为 val 的大实数，对于 double 范围内数字推荐用此方法，底层有优化</td></tr><tr><td>BigDecimal add(BigDecimal val)</td><td>返回大实数之和</td></tr><tr><td>BigDecimal subtract(BigDecimal val)</td><td>返回大实数之差</td></tr><tr><td>BigDecimal multiply(BigDecimal val)</td><td>返回大实数之积</td></tr><tr><td>BigDecimal divide(BigDecimal val)</td><td>返回大实数之商，商为无限小数会报错</td></tr><tr><td>BigDecimal divide(BigDcimal val,int scale,RoundingMode roundingMode)</td><td>返回大实数之商，保留小数点后几位，并按指定舍入模式舍入</td></tr><tr><td>int compareTo(BigDecimal val)</td><td>如果相等返回 0，大于返回正数，小于返回负数</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> BigDecimal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigInteger</title>
      <link href="/post/c0460286.html"/>
      <url>/post/c0460286.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Java</code>中提供了对于大整数运算的相关类<code>BigInteger</code>，<code>BigInteger</code>的底层会将符号位和绝对值分别存储，绝对值会被分割为几份长度为 32 位的二进制值并存到一个 int 数组当中，比如：<br>27670116110564327424<br>⬇<br>[1, 10000000000000000000000000000000, 00000000000000000000000000000000]<br>⬇<br>[1, -2147483648, 0]</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>BigInteger(int num,Random rnd)</td><td>获取随机大整数，取值范围$[0,2^{num}-1]$</td></tr><tr><td>BigInteger(String val)</td><td>用字符串构造一个大整数</td></tr><tr><td>BigIntege(String val,int radix)</td><td>用字符串构造指定进制的大整数</td></tr><tr><td>static BigInteger valueOf(long val)</td><td>返回数值为 val 的大整数，对于 long 范围内数字推荐用此方法，是因为当生成的 val 在$[-16,16]$会有优化</td></tr><tr><td>BigInteger add(BigInteger val)</td><td>返回大整数之和</td></tr><tr><td>BigInteger subtract(BigInteger val)</td><td>返回大整数之差</td></tr><tr><td>BigInteger multiply(BigInteger val)</td><td>返回大整数之积</td></tr><tr><td>BigInteger divide(BigInteger val)</td><td>返回大整数之商</td></tr><tr><td>BigInteger mod(BigInteger val)</td><td>返回大整数之余</td></tr><tr><td>BigInteger[] divideAndRemainder(BigInteger val)</td><td>获取商和余数</td></tr><tr><td>BigInteger sqrt()</td><td>返回大整数的平方根</td></tr><tr><td>BigInteger pow(int exponent)</td><td>获取大整数的次幂</td></tr><tr><td>BigInteger max&#x2F;min(BigInteger val)</td><td>返回最大&#x2F;最小值</td></tr><tr><td>int compareTo(BigInteger val)</td><td>如果相等返回 0，大于返回正数，小于返回负数</td></tr><tr><td>boolean equals(Object x)</td><td>比较是否相同</td></tr><tr><td>int intValue(BigInteger val)</td><td>转为 int 类型，超出范围数据有误</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> BigInteger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合</title>
      <link href="/post/j9ujeumh.html"/>
      <url>/post/j9ujeumh.html</url>
      
        <content type="html"><![CDATA[<h2 id="集合的分类"><a href="#集合的分类" class="headerlink" title="集合的分类"></a>集合的分类</h2><p>集合可以分类为以下两大种：</p><ul><li><strong>单列集合</strong></li><li><strong>双列集合</strong></li></ul><p>Java 中的集合框架的继承和实现体系大致如下：</p><ul><li><mark class="hl-label red">Collection</mark> <ul><li><mark class="hl-label red">List</mark> <ul><li><mark class="hl-label blue">ArrayList</mark> </li><li><mark class="hl-label blue">LinkedList</mark> </li><li><mark class="hl-label blue">Vector</mark> </li></ul></li><li><mark class="hl-label red">Set</mark> <ul><li><mark class="hl-label blue">HashSet</mark> <ul><li><mark class="hl-label blue">LinkedHashSet</mark> </li></ul></li><li><mark class="hl-label blue">TreeSet</mark> </li></ul></li></ul></li><li><mark class="hl-label red">Map</mark> <ul><li><mark class="hl-label blue">HashMap</mark> <ul><li><mark class="hl-label blue">LinkedHashMap</mark> </li></ul></li><li><mark class="hl-label blue">Hashtable</mark> <ul><li><mark class="hl-label blue">Properties</mark> </li></ul></li><li><mark class="hl-label blue">TreeMap</mark> </li></ul></li></ul><mark class="hl-label red">红色标签</mark>  为接口（Interface），<mark class="hl-label blue">蓝色标签</mark>  为实现类（Implementation）<p>以上结构仅展示一些经常会用到的实现类和接口，并不是完整的结构，下图才是完整的结构：<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/ab/Java.util.Collection_hierarchy.svg/1920px-Java.util.Collection_hierarchy.svg.png"><br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Java.util.Map_hierarchy.svg/2560px-Java.util.Map_hierarchy.svg.png"><br>引用自<a href="https://en.wikipedia.org/wiki/Java_collections_framework">Wikipedia 的 Java collections framework</a></p><h2 id="Collection（单列集合）"><a href="#Collection（单列集合）" class="headerlink" title="Collection（单列集合）"></a>Collection（单列集合）</h2><p>Collection 是单列集合的顶层接口，以下为常用方法：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>boolean add(E e)</td><td>把给定的对象添加到当前集合当中</td></tr><tr><td>void clear()</td><td>清空集合中所有元素</td></tr><tr><td>boolean remove(E e)</td><td>把给定的元素在当前集合中删除</td></tr><tr><td>boolean contains(Object o)</td><td>判断当前集合中是否包含给定对象</td></tr><tr><td>boolean isEmpty()</td><td>判断当前集合是否为空</td></tr><tr><td>int size()</td><td>返回集合中的元素个数</td></tr></tbody></table><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>List 集合中的元素有序，可重复，且有索引，因此多了很多索引操作的方法：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>void add(int index, E element)</td><td>在集合中的指定位置插入给定元素</td></tr><tr><td>E remove(int index)</td><td>删除指定索引处的元素，返回被删除的元素</td></tr><tr><td>E set(int index, E element)</td><td>修改指定索引处的元素，返回被修改的元素</td></tr><tr><td>E get(int index)</td><td>返回指定索引处的元素</td></tr></tbody></table><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>ArrayList 的底层是一个数组，在扩容时有特殊机制</p><p>ArrayList 底层原理</p><ol><li>利用空参构造创建集合时，在底层会创建一个默认长度为 0 的数组</li><li>当往集合中添加元素时，底层会创建一个新的长度为 10 的数组</li><li>当存满时继续添加元素，会触发集合的扩容，此时有两种情况：<ol><li>添加单个元素或添加的多个元素个数和原来的元素个数之和小于原来长度的 1.5 倍，集合会扩容至原来的 1.5 倍</li><li>添加的元素过多，会直接扩容至原来的元素个数加添加的元素个数</li></ol></li></ol><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><p>LinkedList 的底层是靠链表实现的</p><p>LinkedList 特有方法</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>void addFirst(E e)</td><td>在列表的开头插入给定元素</td></tr><tr><td>void addLast(E e)</td><td>在列表的结尾插入给定元素</td></tr><tr><td>E getFirst()</td><td>返回列表开头的元素</td></tr><tr><td>E getLast()</td><td>返回列表结尾的元素</td></tr><tr><td>E removeFirst</td><td>删除列表开头的元素</td></tr><tr><td>E removeLast</td><td>删除列表结尾的元素</td></tr></tbody></table><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set 集合中的元素无序，不重复，且没有索引，和 Collection 的 API 基本一致</p><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><p>HashSet 的底层是一个 HashMap，所以使用的数据结构 HashMap 是一样<br>当向 HashSet 添加元素时，实际上是在往 HashMap 添加一个 key &#x3D; 此元素，value &#x3D; 虚拟 Object 对象的键值对<br><code>这个虚拟Object对象没有实际含义，可以看作value为空，只是因为HashMap的底层实现要求value不可为null</code></p><div class="note warning no-icon flat"><p>在使用 HashSet 存储自定义对象时，必须重写 hashCode()和 equals()方法</p></div><h5 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h5><p>LinkedHashSet 与 HashSet 相比较多了可以保证数据的存储和取出的顺序时一样的</p><p>LinkedHashSet 底层是一个 LinkedHashMap，所以底层原理是一样的<br>当向 LinkedHashSet 添加元素时，实际上是在往 LinkedHashMap 添加一个 key &#x3D; 此元素，value &#x3D; 虚拟 Object 对象的键值对</p><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>TreeSet 是可以排序的，默认按照从小到大的顺序排序</p><p>TreeSet 底层是一个 TreeMap，所以底层原理是一样的，都是基于红黑树来实现的<br>当向 TreeSet 添加元素时，实际上是在往 TreeSet 添加一个 key &#x3D; 此元素，value &#x3D; 虚拟 Object 对象的键值对</p><div class="note warning no-icon flat"><p>TreeSet 中的元素若为自定义对象，需要实现 Comparable 接口或者在构造时传入 Comparator 的实现类对象</p></div><h2 id="Map（双列集合）"><a href="#Map（双列集合）" class="headerlink" title="Map（双列集合）"></a>Map（双列集合）</h2><p>Map 也叫映射，是一种可以将键和值对应起来的结构，</p><p>Map 是双列集合的顶层接口，以下是一些常用的方法：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>V put(K key, V value)</td><td>添加或覆盖元素，若是添加则返回 null，若是覆盖则返回被覆盖的 value</td></tr><tr><td>V remove(Object key)</td><td>根据键删除键值对元素</td></tr><tr><td>V get(Object key)</td><td>根据键获取值</td></tr><tr><td>V repalce(K key, V value)</td><td>根据键将值替换成新的值，并将旧的值进行返回</td></tr><tr><td>boolean repalce(K key, V oldValue, V newValue)</td><td>根据键值对将值替换成新的值，存在此键值对则替换且返回 true，否则返回 false</td></tr><tr><td>void clear()</td><td>移除所有的键值对元素</td></tr><tr><td>boolean containsKey(Object key)</td><td>判断集合是否包含指定的键</td></tr><tr><td>boolean containsValue(Object value)</td><td>判断集合是否包含指定的值</td></tr><tr><td>boolean isEmpty()</td><td>判断集合是否为空</td></tr><tr><td>int size()</td><td>返回集合的长度，即键值对个数</td></tr><tr><td>Set<K> keySet()</td><td>返回键的 Set 集合</td></tr><tr><td>Set&lt;Map.Entry&lt;K, V&gt;&gt;entrySet()</td><td>返回键值对对象的 Set 集合</td></tr></tbody></table><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>HashMap 中存储的元素是无序，不重复，且无索引的</p><p>HashMap 映射的底层在 JDK8 前后是不一样的<br>在 JDK8 以前：数组+链表（哈希表）<br>在 JDK8 及其以后：数组+链表+红黑树</p><p>HashMap 底层原理：</p><ol><li>创建一个默认长度 16，默认加载因子为 0.75（Load Factor）的数组，数组名 table<br><code>加载因子是用来控制哈希表扩容时机的，当表中存储的元素大于16*0.75时，哈希表扩充到原来的两倍</code></li><li>根据键值对的键（key）的哈希值跟数组的长度计算出应存入的位置<br><code>index = (table.length - 1) &amp; 键的哈希值，此哈希值是调用键的hashCode()获取的</code></li><li>判断当前位置是否为 null，如果是 null 直接存入</li><li>如果位置不为 null，表示已有元素，则调用 equals 方法比较键的属性值</li><li>一样：不存；不一样：存入数组，形成链表<br>JDK8 以前：新元素存入数组，老元素挂在新元素下面<br>JDK8 以后：新元素直接挂在老元素下面</li><li>当链表的长度大于 8 且数组的长度大于等于 64 时，链表会转换成红黑树</li></ol><div class="note warning no-icon flat"><p>若在使用 HashMap 存储的键是自定义对象时，必须重写 hashCode()和 equals()方法<br>若在使用 HashMap 存储的值是自定义对象时，不需要重写 hashCode()和 equals()方法</p></div><h4 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h4><p>LinkedHashMap 中存储的元素是有序，不重复且无索引的</p><p>LinkedHashMap 与 HashMap 相比，多了可以保证数据的存储和取出的顺序时一样的</p><p>HashMap 的底层在原有 HashMap 的基础上增加了双链表机制，每个添加的元素都记录了上一个添加的元素的地址值和下一个要添加的元素的地址值<br>在遍历时会从第一个添加的元素开始遍历</p><h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h3><h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p>TreeMap 中存储的元素是可排序，不重复，且无索引的<br><code>可排序是指能对键进行排序操作</code><br>TreeMap 是可以排序的，默认按照从小到大的顺序排序，底层是基于红黑树来实现的</p><div class="note warning no-icon flat"><p>TreeMap 中的元素的键若为自定义对象，需要实现 Comparable 接口或者在构造时传入 Comparator 的实现类对象<br>TreeMap 中的元素的值若为自定义对象，不需要实现 Comparable 接口或者在构造时传入 Comparator 的实现类对象</p></div><h2 id="集合的遍历"><a href="#集合的遍历" class="headerlink" title="集合的遍历"></a>集合的遍历</h2><p>collection 集合的遍历有以下三种方式：</p><ul><li>迭代器遍历</li><li>增强 for 遍历</li><li>lambda 表达式遍历</li></ul><p>list 集合的遍历有以下五种方式：</p><ul><li>迭代器遍历</li><li>列表迭代器遍历</li><li>增强 for 遍历</li><li>lambda 表达式遍历</li><li>普通 for 循环遍历（依赖索引）</li></ul><p>set 集合的遍历方式和 collection 集合的遍历方式一样：</p><ul><li>迭代器遍历</li><li>增强 for 遍历</li><li>lambda 表达式遍历</li></ul><p>map 映射的遍历方式有以下三种方式：</p><ul><li>根据键遍历</li><li>根据键值对遍历</li><li>lambda 表达式遍历</li></ul><h3 id="迭代器遍历"><a href="#迭代器遍历" class="headerlink" title="迭代器遍历"></a>迭代器遍历</h3><p>使用集合中的<code>iterator()</code>方法获取迭代器，以下是迭代器对象常用方法：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>boolean hasNext()</td><td>判断当前位置是否有元素，有返回 true，无则返回 false</td></tr><tr><td>E next()</td><td>获取当前位置的元素，并将迭代器对象移向下一个元素</td></tr><tr><td>void remove()</td><td>删除上一次调用 next()返回的对象</td></tr></tbody></table><p>使用 Iterator 正向遍历 ArrayList：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;🐂🍺&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;牛啤&quot;</span>;</span><br><span class="line">        Collection&lt;String&gt; coll1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        coll1.add(s1);</span><br><span class="line">        coll1.add(s2);</span><br><span class="line">        coll1.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        coll1.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; iterator1 = coll1.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> iterator1.next();</span><br><span class="line">            <span class="keyword">if</span> (s.equals(<span class="string">&quot;bbb&quot;</span>)) iterator1.remove();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(coll1.size());</span><br><span class="line">        System.out.println(coll1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>🐂🍺<br>牛啤<br>aaa<br>bbb<br>3<br>[🐂🍺, 牛啤, aaa]</p></blockquote><p>使用 Iterator 正向遍历 LinkedList：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;🐂🍺&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;牛啤&quot;</span>;</span><br><span class="line">        Collection&lt;String&gt; coll2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        coll2.add(s1);</span><br><span class="line">        coll2.add(s2);</span><br><span class="line">        coll2.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        coll2.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; iterator2 = coll2.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator2.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> iterator2.next();</span><br><span class="line">            <span class="keyword">if</span> (s.equals(<span class="string">&quot;aaa&quot;</span>)) iterator2.remove();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(coll2.size());</span><br><span class="line">        System.out.println(coll2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>🐂🍺<br>牛啤<br>aaa<br>bbb<br>3<br>[🐂🍺, 牛啤, bbb]</p></blockquote><p>在使用迭代器遍历时，禁止使用集合的 remove 方法，会导致<code>ConcurrentModificationException</code>报错</p><h3 id="列表迭代器遍历"><a href="#列表迭代器遍历" class="headerlink" title="列表迭代器遍历"></a>列表迭代器遍历</h3><p>List 集合中特有的迭代器，用方法<code>listIterator()</code>来获取指向 0 索引的迭代器，使用<code>listIterator(int index)</code>可以得到指向指定索引的迭代器，<code>ListIterator</code>是<code>Iterator</code>的子接口，所以包含父类中的方法，以下是常用方法：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>void add(E e)</td><td>在指向处插入元素</td></tr><tr><td>boolean hasNext()</td><td>判断当前位置是否有元素，有返回 true，无则返回 false</td></tr><tr><td>E next()</td><td>获取当前位置的元素，并将迭代器对象移向下一个元素</td></tr><tr><td>int nextIndex()</td><td>返回当前位置的索引</td></tr><tr><td>boolean hasPrevious()</td><td>判断上一个位置是否有元素，有返回 true，无则返回 false</td></tr><tr><td>E previous()</td><td>获取上一个位置的元素，并将迭代器对象移向上一个元素</td></tr><tr><td>int previousIndex</td><td>返回上一个位置的索引</td></tr><tr><td>void remove()</td><td>删除上一次调用 previous()或 next()返回的元素</td></tr><tr><td>void set(E e)</td><td>修改上一次调用 previous()或 next()返回的元素</td></tr></tbody></table><p>使用 ListIterator 反向遍历 ArrayList：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;🐂🍺&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;牛啤&quot;</span>;</span><br><span class="line">        List&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list1.add(s1);</span><br><span class="line">        list1.add(s2);</span><br><span class="line">        list1.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        list1.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        ListIterator&lt;String&gt; listIterator1 = list1.listIterator(list1.size());</span><br><span class="line">        <span class="keyword">while</span> (listIterator1.hasPrevious()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> listIterator1.previous();</span><br><span class="line">            <span class="keyword">if</span> (s.equals(<span class="string">&quot;bbb&quot;</span>)) listIterator1.remove();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list1.size());</span><br><span class="line">        System.out.println(list1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>bbb<br>aaa<br>牛啤<br>🐂🍺<br>3<br>[🐂🍺, 牛啤, aaa]</p></blockquote><p>使用 ListIterator 反向遍历 LinkedList：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;🐂🍺&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;牛啤&quot;</span>;</span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        list2.add(s1);</span><br><span class="line">        list2.add(s2);</span><br><span class="line">        list2.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        ListIterator&lt;String&gt; listIterator2 = list2.listIterator(list2.size());</span><br><span class="line">        <span class="keyword">while</span> (listIterator2.hasPrevious()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> listIterator2.previous();</span><br><span class="line">            <span class="keyword">if</span> (s.equals(<span class="string">&quot;aaa&quot;</span>)) listIterator2.remove();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list2.size());</span><br><span class="line">        System.out.println(list2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>bbb<br>aaa<br>牛啤<br>🐂🍺<br>3<br>[🐂🍺, 牛啤, bbb]</p></blockquote><h3 id="增强-for-遍历"><a href="#增强-for-遍历" class="headerlink" title="增强 for 遍历"></a>增强 for 遍历</h3><p>增强 for 遍历的底层其实就是迭代器遍历，与迭代器遍历相比在使用时可以简化书写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String s : coll) &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lambda-表达式遍历"><a href="#lambda-表达式遍历" class="headerlink" title="lambda 表达式遍历"></a>lambda 表达式遍历</h3><p>使用 forEach 方法来遍历集合<br>void forEach(Consumer&lt;? super E&gt; action)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">coll.forEach(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>accept 方法中填写遍历中要做的事</p><p>由于 Consumer 接口是一个函数式接口，所以可以将匿名内部类改写为 lambda 表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coll.forEach((System.out::println));</span><br></pre></td></tr></table></figure><h3 id="根据键遍历"><a href="#根据键遍历" class="headerlink" title="根据键遍历"></a>根据键遍历</h3><p>调用 Map 对象的 keySet()，得到键的 Set 集合，接着根据键的值在 Map 中获取对应的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        System.out.println(hm.put(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>));  <span class="comment">//null</span></span><br><span class="line">        System.out.println(hm.put(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;bcd&quot;</span>));<span class="comment">//null</span></span><br><span class="line">        System.out.println(hm.put(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;adb&quot;</span>));<span class="comment">//null</span></span><br><span class="line">        System.out.println(hm.put(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;a&quot;</span>));<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keys = hm.keySet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> hm.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot; = &quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//a = b</span></span><br><span class="line">        <span class="comment">//b = bcd</span></span><br><span class="line">        <span class="comment">//c = adb</span></span><br><span class="line">        <span class="comment">//abc = a</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="根据键值对遍历"><a href="#根据键值对遍历" class="headerlink" title="根据键值对遍历"></a>根据键值对遍历</h3><p>调用 Map 对象的 entrySet()，得到键值对对象的 Set 集合，接着调用 entry 对象的 getKey()和 getValue()方法获取对应的键和值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        System.out.println(hm.put(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>));  <span class="comment">//null</span></span><br><span class="line">        System.out.println(hm.put(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;bcd&quot;</span>));<span class="comment">//null</span></span><br><span class="line">        System.out.println(hm.put(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;adb&quot;</span>));<span class="comment">//null</span></span><br><span class="line">        System.out.println(hm.put(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;a&quot;</span>));<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = hm.entrySet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entries) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">&quot; = &quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//a = b</span></span><br><span class="line">        <span class="comment">//b = bcd</span></span><br><span class="line">        <span class="comment">//c = adb</span></span><br><span class="line">        <span class="comment">//abc = a</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不可变集合"><a href="#不可变集合" class="headerlink" title="不可变集合"></a>不可变集合</h2><p>在 List、Set、Map 接口中，都有一个静态方法 of()，可以获取一个不可变的集合</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>static <E> List<E> of(E… elements)</td><td>创建指定元素的 List 集合</td></tr><tr><td>static <E> Set<E> of(E… elements)</td><td>创建指定元素的 Set 集合</td></tr><tr><td>static &lt;K, V&gt; Map&lt;K, V&gt; of(K k, V v)</td><td>创建指定键和值的 Map 集合</td></tr><tr><td>static &lt;K, V&gt; Map&lt;K, V&gt; ofEntries(Entry&lt;? extend K, ? extend V&gt;… entries)</td><td>创建指定键值对的 Map 集合</td></tr><tr><td>static &lt;K, V&gt; Map&lt;K, V&gt; copyOf(Map&lt;? extends K, ? extends V&gt; map)</td><td>创建指定 Map 的不可变集合副本</td></tr></tbody></table><p>当进行添加，删除，修改的操作时会抛出<code>UnsupportedOperationException</code>异常</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>regex和replacement转义</title>
      <link href="/post/haki98t3.html"/>
      <url>/post/haki98t3.html</url>
      
        <content type="html"><![CDATA[<h2 id="replacement-转义"><a href="#replacement-转义" class="headerlink" title="replacement 转义"></a>replacement 转义</h2><p>在使用 replaceAll 方法时，遇到 replacement 中含有’$’和’&#39;的情况会发生报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;Java8,Java11,Java17,Java21&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">        System.out.println(content.replaceAll(regex, <span class="string">&quot;$&quot;</span>));</span><br><span class="line">        System.out.println(content.replaceAll(regex, <span class="string">&quot;\\&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;Java8,Java11,Java17,Java21&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">        System.out.println(content.replaceAll(regex, <span class="string">&quot;\\$&quot;</span>));</span><br><span class="line">        System.out.println(content.replaceAll(regex, <span class="string">&quot;\\\\&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>$8,$11,$17,$21<br>\8,\11,\17,\21</p></blockquote><p>当不知道 replacement 中时候含有’$’和’&#39;时，可以使用<code>Matcher</code>类中的<code>quoteReplacement</code>来解决问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;Java8,Java11,Java17,Java21&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">        System.out.println(content.replaceAll(regex, Matcher.quoteReplacement(<span class="string">&quot;$&quot;</span>)));</span><br><span class="line">        System.out.println(content.replaceAll(regex, Matcher.quoteReplacement(<span class="string">&quot;\\&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>$8,$11,$17,$21<br>\8,\11,\17,\21</p></blockquote><h2 id="regex-转义"><a href="#regex-转义" class="headerlink" title="regex 转义"></a>regex 转义</h2><p>和 replacement 的情况类似，可以使用<code>Pattern</code>类中<code>quote</code>来解决问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;$8,$11,$17,$21&quot;</span>;</span><br><span class="line">        System.out.println(content.replaceAll(Pattern.quote(<span class="string">&quot;$&quot;</span>), <span class="string">&quot;Java&quot;</span>));</span><br><span class="line">        System.out.println(content.replaceAll(Pattern.quote(<span class="string">&quot;$&quot;</span>), Matcher.quoteReplacement(<span class="string">&quot;\\&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Java8,Java11,Java17,Java21<br>\8,\11,\17,\21</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/post/x4idevfe.html"/>
      <url>/post/x4idevfe.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>正则表达式是一种强大的工具 😎，用于描述和匹配字符串的特定模式，可用于各种编程语言和文本处理工具中，如 Java，Python，JavaScript 等。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>正则表达式由元字符组成，下表包含了元字符的完整列表以及它们在正则表达式上下文中的行为：</p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>\</td><td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\\‘ 匹配 “\“ 而 “\(“ 则匹配 “(“。</td></tr><tr><td>^</td><td>匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td>$</td><td>匹配输入字符串的结束位置。如果设置了 RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td>*</td><td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。 * 等价于{0,}。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。</td></tr><tr><td>{n}</td><td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td>{n,}</td><td>n 是一个非负整数。至少匹配 n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*‘。</td></tr><tr><td>{n,m}</td><td>m 和 n 均为非负整数，其中 n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td>?</td><td>当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。<mark class="hl-label red">非贪婪模式</mark> 尽可能少的匹配所搜索的字符串，而默认的<mark class="hl-label blue">贪婪模式</mark> 则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td></tr><tr><td>.</td><td>匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像”(.|\n)”的模式。</td></tr><tr><td>(pattern)</td><td>匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在 VBScript 中使用 SubMatches 集合，在 JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘\(‘ 或 ‘\)’。</td></tr><tr><td>(?:pattern)</td><td>匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y|ies) 就是一个比 ‘industry|industries’ 更简略的表达式。</td></tr><tr><td>(?&#x3D;pattern)</td><td>正向肯定预查（look ahead positive assert），在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，”Windows(?&#x3D;95|98|NT|2000)”能匹配”Windows2000”中的”Windows”，但不能匹配”Windows3.1”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td>(?!pattern)</td><td>正向否定预查(negative assert)，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如”Windows(?!95|98|NT|2000)”能匹配”Windows3.1”中的”Windows”，但不能匹配”Windows2000”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td>(?&lt;&#x3D;pattern)</td><td>反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，”(?&lt;&#x3D;95|98|NT|2000)Windows”能匹配”2000Windows”中的”Windows”，但不能匹配”3.1Windows”中的”Windows”。</td></tr><tr><td>(?&lt;!pattern)</td><td>反向否定预查，与正向否定预查类似，只是方向相反。例如”(?&lt;!95|98|NT|2000)Windows”能匹配”3.1Windows”中的”Windows”，但不能匹配”2000Windows”中的”Windows”。</td></tr><tr><td>x|y</td><td>匹配 x 或 y。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td>[xyz]</td><td>字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td>[^xyz]</td><td>负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td></tr><tr><td>[a-z]</td><td>字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td></tr><tr><td>[^a-z]</td><td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td></tr><tr><td>\b</td><td>匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr><tr><td>\B</td><td>匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td></tr><tr><td>\cx</td><td>匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td>\d</td><td>匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td>\D</td><td>匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td>\f</td><td>匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td>\n</td><td>匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td>\r</td><td>匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td>\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td></tr><tr><td>\S</td><td>匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td>\t</td><td>匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td>\v</td><td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr><tr><td>\w</td><td>匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’。</td></tr><tr><td>\W</td><td>匹配非字母、数字、下划线。等价于 ‘[^A-Za-z0-9_]’。</td></tr><tr><td>\xn</td><td>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td></tr><tr><td>\num</td><td>匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td></tr><tr><td>\n</td><td>标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td></tr><tr><td>\nm</td><td>标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td></tr><tr><td>\nml</td><td>如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td>\un</td><td>匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td></tr></tbody></table><h2 id="Java-中的正则表达式"><a href="#Java-中的正则表达式" class="headerlink" title="Java 中的正则表达式"></a>Java 中的正则表达式</h2><p>在<code>Java</code>中使用正则表达式需要导入<code>java.util.regex</code>包。<br><code>java.util.regex</code>包中主要包含以下三个类：</p><ul><li><strong>Patter</strong>：<br>pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。</li><li><strong>Matcher</strong>：<br>Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与 Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。</li><li><strong>PatternSyntaxException</strong>：<br>PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</li></ul><p>由于 Java 中的正则表达式也是字符串，因此转义字符<code>\</code>会在字符串中生效，所以对于<code>\d</code>等元字符要写成<code>\\d</code>之类的。</p><p>一个简单的查找样例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;Java8,Java11,Java17,Java21&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;((?i)java(?:8|11|17|21))&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (m.find())&#123;</span><br><span class="line">            System.out.println(m.group());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Java8<br>Java11<br>Java17<br>Java21</p></blockquote><h2 id="Matcher-类的方法"><a href="#Matcher-类的方法" class="headerlink" title="Matcher 类的方法"></a>Matcher 类的方法</h2><h3 id="索引方法"><a href="#索引方法" class="headerlink" title="索引方法"></a>索引方法</h3><ul><li>public int start()<br>返回以前匹配的初始索引。</li><li>public int start(int group)<br>返回在以前的匹配操作期间，由给定组所捕获的子序列的初始索引</li><li>public int end()<br>返回最后匹配字符之后的偏移量。</li><li>public int end(int group)<br>返回在以前的匹配操作期间，由给定组所捕获子序列的最后字符之后的偏移量。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;Java8,Java11,Java17,Java21&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;(?i)java(?:8|11|17|21)&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (m.find())&#123;</span><br><span class="line">            System.out.println(m.start());</span><br><span class="line">            System.out.println(m.end());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>0<br>5<br>6<br>12<br>13<br>19<br>20<br>26</p></blockquote><p>定组捕获：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;Java8,Java11,Java17,Java21&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;(?i)java(8|11|17|21)&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (m.find())&#123;</span><br><span class="line">            System.out.println(m.start(<span class="number">1</span>));</span><br><span class="line">            System.out.println(m.end(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4<br>5<br>10<br>12<br>17<br>19<br>24<br>26</p></blockquote><p>这里返回的索引是”java”后面的版本号的索引。</p><h3 id="查找方法"><a href="#查找方法" class="headerlink" title="查找方法"></a>查找方法</h3><ul><li>public boolean lookingAt()<br>尝试将从区域开头开始的输入序列与该模式匹配。</li><li>public boolean find()<br>尝试查找与该模式匹配的输入序列的下一个子序列。</li><li>public boolean find(int start)<br>重置此匹配器，然后尝试查找匹配该模式、从指定索引开始的输入序列的下一个子序列。</li><li>public boolean matches()<br>尝试将整个区域与模式匹配。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content1</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content2</span> <span class="operator">=</span> <span class="string">&quot;JavaJava&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m1</span> <span class="operator">=</span> p.matcher(content1);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m2</span> <span class="operator">=</span> p.matcher(content2);</span><br><span class="line"></span><br><span class="line">        System.out.println(m1.matches());</span><br><span class="line">        System.out.println(m2.matches());</span><br><span class="line">        System.out.println(m1.lookingAt());</span><br><span class="line">        System.out.println(m2.lookingAt());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>true<br>false<br>true<br>true</p></blockquote><h3 id="替换方法"><a href="#替换方法" class="headerlink" title="替换方法"></a>替换方法</h3><ul><li>public Matcher appendReplacement(StringBuffer sb, String replacement)<br>实现非终端添加和替换步骤。</li><li>public StringBuffer appendTail(StringBuffer sb)<br>实现终端添加和替换步骤。</li><li>public String replaceAll(String replacement)<br>替换模式与给定替换字符串相匹配的输入序列的每个子序列。</li><li>public String replaceFirst(String replacement)<br>替换模式与给定替换字符串匹配的输入序列的第一个子序列。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;Java8,Java11,Java17,Java21&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(content);</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">            m.appendReplacement(sb1, <span class="string">&quot;*_*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        m.appendTail(sb1);</span><br><span class="line">        System.out.println(sb1);</span><br><span class="line"></span><br><span class="line">        m.reset();</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">if</span> (m.find()) &#123;</span><br><span class="line">            m.appendReplacement(sb2, <span class="string">&quot;*_*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        m.appendTail(sb2);</span><br><span class="line">        System.out.println(sb2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>*_*8,*_*11,*_*17,*_*21<br>*_*8,Java11,Java17,Java21</p></blockquote><p>其实<code>replaceAll</code>和<code>replaceFirst</code>的底层就是调用<code>appendReplacement</code>以及<code>appendTail</code>来实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;Java8,Java11,Java17,Java21&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(content);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> m.replaceAll(<span class="string">&quot;*_*&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> m.replaceFirst(<span class="string">&quot;*_*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>*_*8,*_*11,*_*17,*_*21<br>*_*8,Java11,Java17,Java21</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符编码</title>
      <link href="/post/4g7gt549.html"/>
      <url>/post/4g7gt549.html</url>
      
        <content type="html"><![CDATA[<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p>在早期计算机系统中，为了给字符编码，美国国家标准学会（American National Standard Institute，ANSI）制定了一套英文编码规范，包含英文字母，数字和一些常用符号，编码范围从<code>0</code>到<code>127</code>，称为<code>ascii</code>编码，每个字素（grapheme，a single unit of a human writing system）只占用一个字节，比如<code>A</code>的编码为<code>0x41(65)</code>。</p><p>但是随着计算机的发展的全球化，计算机需要能支持更多的语言，也就是说每一种语言的文字都需要一套与之对应的编码，对于拉丁母来说，一个字节的大小就能基本包含常用的字母和符号，但是对于东亚的表意文字来说，一个字节的大小显然是不够用的，需要更多的字节数，比如一个<code>中</code>占用两个字节</p><p>在早期的时候并没有一套统一的规范，于是不同的国家和地区都制定了一套适用于本区域文字的编码，比如中文有<code>GB2312</code>，日文有<code>Shift_JIS</code>，韩文有<code>EUC-KR</code>，不同的编码之间会冲突，这也导致了乱码的问题出现。</p><h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><p>为了统一全球所有语言的编码，全球统一码联盟发布了<code>Unicode</code>编码，它把世界上的主要语言都纳入同一套编码中，这样，中文，日文，韩文和其他语言也就不会冲突了。它的长度为 2~4 个字节，比如<code>A</code>的<code>ascii</code>编码为<code>0x41(65)</code>，而<code>Unicode</code>编码为<code>U+0041</code>，<code>中</code>的<code>GB2312</code>编码为<code>0xd6d0</code>，<code>Unicode</code>编码为<code>U+4e2d</code>，除此之外，<code>Unicode</code>编码还包含了 emoji 表情，比如<code>🐂</code>的编码为<code>U+1f402</code>，<code>🍺</code>的编码为<code>U+1f37a</code>。</p><h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><p>而我们常说的<code>UTF-8</code>编码是一种编码方式，它将固定长度的<code>Unicode</code>编码转换成长度为 1~4 个字节的二进制码，比如<code>A</code>的<code>UTF-8</code>编码为<code>0x41</code>，只有一个字节的长度，所以对于大量的英文文本，采用<code>UTF-8</code>编码可以节省大量的存储空间，<code>UTF-8</code>编码是通过高字节位来判断一个字素到底是几个字节的。</p><h2 id="Java-中的-Unicode-码点"><a href="#Java-中的-Unicode-码点" class="headerlink" title="Java 中的 Unicode 码点"></a>Java 中的 Unicode 码点</h2><p>在<code>Java</code>中，<code>char</code>类型是采用<code>UTF-16</code>编码的，也就是两个字节来表示一个字素，但是对于一些长度超过两个字节的<code>Unicode</code>点（用来表示一个字素的 Unicode 编码）就不够用了， 所以就需要用两个 char 来表示一个码点，因此在用<code>char</code>类型遍历字符串的时候就会产生错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;🐂🍺&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;牛啤&quot;</span>;</span><br><span class="line">        System.out.println(s1.length()); <span class="comment">// 4</span></span><br><span class="line">        System.out.println(s2.length()); <span class="comment">// 2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s1.length(); i++) &#123;</span><br><span class="line">            System.out.println(s1.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ?</span></span><br><span class="line">        <span class="comment">// ?</span></span><br><span class="line">        <span class="comment">// ?</span></span><br><span class="line">        <span class="comment">// ?</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s2.length(); i++) &#123;</span><br><span class="line">            System.out.println(s2.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 牛</span></span><br><span class="line">        <span class="comment">// 啤</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以为了解决这种问题，<code>Java</code>提供了以码点的长度方式来遍历字符串的对应方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;🐂🍺&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;牛啤&quot;</span>;</span><br><span class="line">        System.out.println(s1.codePointCount(<span class="number">0</span>, s1.length())); <span class="comment">// 2</span></span><br><span class="line">        System.out.println(s2.codePointCount(<span class="number">0</span>, s2.length())); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">index1</span> <span class="operator">=</span> s1.offsetByCodePoints(<span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 得到从0索引开始偏移0个码点的索引</span></span><br><span class="line">        System.out.println(index1); <span class="comment">// 0</span></span><br><span class="line">        System.out.println(Integer.toHexString(s1.codePointAt(index1))); <span class="comment">// 1f402</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index2</span> <span class="operator">=</span> s1.offsetByCodePoints(<span class="number">0</span>, <span class="number">1</span>); <span class="comment">// 得到从0索引开始偏移1个码点的索引</span></span><br><span class="line">        System.out.println(index2); <span class="comment">// 2</span></span><br><span class="line">        System.out.println(Integer.toHexString(s1.codePointAt(index2))); <span class="comment">// 1f37a</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 正向</span></span><br><span class="line">        <span class="type">int</span> cp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s1.length(); i += Character.charCount(cp)) &#123;</span><br><span class="line">            cp = s1.codePointAt(i);</span><br><span class="line">            System.out.println(Integer.toHexString(cp));</span><br><span class="line">            System.out.println(Character.toString(cp));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1f402</span></span><br><span class="line">        <span class="comment">// 🐂</span></span><br><span class="line">        <span class="comment">// 1f37a</span></span><br><span class="line">        <span class="comment">// 🍺</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反向</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s1.length() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isSurrogate(s1.charAt(i))) i--;</span><br><span class="line">            cp = s1.codePointAt(i);</span><br><span class="line">            System.out.println(Integer.toHexString(cp));</span><br><span class="line">            System.out.println(Character.toString(cp));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1f37a</span></span><br><span class="line">        <span class="comment">// 🍺</span></span><br><span class="line">        <span class="comment">// 1f402</span></span><br><span class="line">        <span class="comment">// 🐂</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，以上遍历的方式显然不够优雅，其实<code>Java</code>还提供了将字符串变为一个码点数组的方法，那我们就可以以数组的方式去遍历这个字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;🐂🍺&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;牛啤&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// codePoints方法可以得到一个int流</span></span><br><span class="line">        <span class="type">int</span>[] codePoints = s1.codePoints().toArray();</span><br><span class="line">        System.out.println(Arrays.toString(codePoints));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将码点数组转回字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(codePoints, <span class="number">0</span>, codePoints.length);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将单个码点转为字符串可以用<code>Character.toString(int codePoint)</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">codePoint</span> <span class="operator">=</span> <span class="number">0x1f37a</span>;</span><br><span class="line">        System.out.println(Character.toString(codePoint));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo搭建博客基础（三）</title>
      <link href="/post/r51bjcg8.html"/>
      <url>/post/r51bjcg8.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><h3 id="博客搭建导航-🌏"><a href="#博客搭建导航-🌏" class="headerlink" title="博客搭建导航 🌏"></a>博客搭建导航 🌏</h3><ol><li><a href="/post/6706d621.html" title="基于hexo搭建博客基础（一）">基于hexo搭建博客基础（一）</a></li><li><a href="/post/sunqxf91.html" title="基于hexo搭建博客基础（二）">基于hexo搭建博客基础（二）</a></li><li><a href="/post/r51bjcg8.html" title="基于hexo搭建博客基础（三）">基于hexo搭建博客基础（三）</a></li></ol></div><script src='/js/series.js'></script><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><ol><li>这个系列是关于如何基于hexo框架以及GitHub Pages搭建自己的博客网站。</li><li>❗创建本系列博客的初衷也只是为了记录一下自己的学习过程，以防之后健忘❗。</li><li>虽说如此，但是本系列博客已经写的很详细了，可能后面的内容会比较简略，就算是零基础也能懂大部分。</li><li>关于butterfly配置文件中的参数说明，可以参考<a href="https://butterfly.js.org/en/">官方</a>，这里只讲述自己使用的部分。</li></ol><h2 id="2-导航栏"><a href="#2-导航栏" class="headerlink" title="2.导航栏"></a>2.导航栏</h2><p>每一项前为项的名称，中英文都可以，后面的参数分别为<code>source</code>文件夹中的对应的标签页路径和对应的图标，以<code>||</code>来分隔，列表项要在最后添加<code>||hide</code>，使列表保持隐藏。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">时间轴:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">休闲||fas</span> <span class="string">fa-list||hide:</span></span><br><span class="line">    <span class="string">音乐:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="string">照片:</span> <span class="string">/gallery/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-images</span></span><br><span class="line">    <span class="string">视频:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">  <span class="string">友链:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><h2 id="3-代码相关"><a href="#3-代码相关" class="headerlink" title="3.代码相关"></a>3.代码相关</h2><p>这一部分是关于代码块的设置，每一项参数的对应含义：</p><ul><li>highlight_theme:<br>代码高亮主题，有六种可选的或者选择不使用，分别为：darker &#x2F; pale night &#x2F; light &#x2F; ocean &#x2F; mac &#x2F; mac light &#x2F; false</li><li>highlight_copy:<br>代码复制按钮，默认为true</li><li>highlight_lang:<br>代码语言类型显示，默认为true</li><li>highlight_shrink:<br>代码块折叠选项，false为展开，true为折叠，none为不展开并不显示折叠按钮</li><li>highlight_height_limit:<br>代码块高度限制，单位为px</li><li>code_word_wrap:<br>是否强制换行，默认为false<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">mac</span></span><br><span class="line"><span class="attr">highlight_copy:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight_lang:</span> <span class="literal">true</span> </span><br><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">highlight_height_limit:</span> <span class="number">200</span></span><br><span class="line"><span class="attr">code_word_wrap:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4-社交图标"><a href="#4-社交图标" class="headerlink" title="4.社交图标"></a>4.社交图标</h2><p>社交平台链接，格式为：<br>icon: link || the description || color</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fas fa-envelope:</span> <span class="string">mailto:1157559178@qq.com</span> <span class="string">||</span> <span class="string">Email</span> <span class="string">||</span> <span class="string">&#x27;#4a7dbe&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="5-图片设置"><a href="#5-图片设置" class="headerlink" title="5.图片设置"></a>5.图片设置</h2><ul><li>favicon:<br>网站图标</li><li>avatar:<br>头像，effect为旋转效果</li><li>disable_top_img:<br>关闭banner图片，默认为false</li><li>index_img:<br>home page的banner图片的路径</li><li>default_top_img:<br>默认的banner图片，当对应的标签页的banner图片没有设置时应用此项</li><li>archive_img:<br>archive page的banner图片的路径</li><li>tag_img:<br>tag page的banner图片的路径</li><li>tag_per_img:<br>每一项标签的banner图片的路径</li><li>category_img:<br>category page的banner图片的路径</li><li>category_per_img:<br>每一项分类的banner图片的路径</li><li>cover:<br>文章封面设置<ul><li>index_enable:</li><li>aside_enable:</li><li>archives_enable:</li><li>position:</li><li>default_cover:<br>文章封面路径</li></ul></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span> <span class="string">/img/favicon.png</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/img/avatar.png</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">disable_top_img:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">index_img:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">default_top_img:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">archive_img:</span></span><br><span class="line"><span class="attr">tag_img:</span></span><br><span class="line"><span class="attr">tag_per_img:</span></span><br><span class="line"><span class="attr">category_img:</span></span><br><span class="line"><span class="attr">category_per_img:</span></span><br><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="attr">default_cover:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/1.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/2.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/3.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/4.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/5.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/6.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/7.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/8.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/9.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/10.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/11.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/12.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/13.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/14.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/15.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/16.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/17.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/18.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/19.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/20.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/21.jpg</span></span><br></pre></td></tr></table></figure><h2 id="6-文章目录设置"><a href="#6-文章目录设置" class="headerlink" title="6.文章目录设置"></a>6.文章目录设置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">expand:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">style_simple:</span> <span class="literal">false</span> <span class="comment"># for post</span></span><br><span class="line">  <span class="attr">scroll_percent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="7-打赏设置"><a href="#7-打赏设置" class="headerlink" title="7.打赏设置"></a>7.打赏设置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">text:</span></span><br><span class="line">  <span class="attr">QR_code:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/wechat.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">微信</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/alipay.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">支付宝</span></span><br></pre></td></tr></table></figure><h2 id="8-分页设置"><a href="#8-分页设置" class="headerlink" title="8.分页设置"></a>8.分页设置</h2><p>文章页底下的下一篇链接的是新的一篇还是旧的一篇</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># value: 1 || 2 || false</span></span><br><span class="line"><span class="comment"># 1: The &#x27;next post&#x27; will link to old post</span></span><br><span class="line"><span class="comment"># 2: The &#x27;next post&#x27; will link to new post</span></span><br><span class="line"><span class="comment"># false: disable pagination</span></span><br><span class="line"><span class="attr">post_pagination:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="9-页脚设置"><a href="#9-页脚设置" class="headerlink" title="9.页脚设置"></a>9.页脚设置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">since:</span> <span class="number">2024</span></span><br><span class="line">  <span class="attr">custom_text:</span> <span class="string">一个讨论技术和作为个人知识库的小站</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="10-侧边栏设置"><a href="#10-侧边栏设置" class="headerlink" title="10.侧边栏设置"></a>10.侧边栏设置</h2><p>大部分的侧边栏卡片都关闭了，简洁风至上🤔</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span> <span class="comment"># left or right</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">archive:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">category:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">card_author:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">一个努力做全栈开发的广财er~💻</span></span><br><span class="line">    <span class="attr">button:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">前往小窝🚗</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://github.com/AnA-0823</span></span><br><span class="line">  <span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">欢迎来到我的小站</span></span><br><span class="line">  <span class="attr">card_recent_post:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">5</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort:</span> <span class="string">updated</span> <span class="comment"># date or updated</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_categories:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">expand:</span> <span class="string">none</span> <span class="comment"># none/true/false</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_tags:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">40</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">color:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">orderby:</span> <span class="string">random</span> <span class="comment"># Order of tags, random/name/length</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_archives:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">monthly</span> <span class="comment"># yearly or monthly</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">MMMM</span> <span class="string">YYYY</span> <span class="comment"># eg: YYYY年MM月</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_webinfo:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">post_count:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">last_push_date:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_post_series:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">series_title:</span> <span class="literal">false</span> <span class="comment"># The title shows the series name</span></span><br><span class="line">    <span class="attr">orderBy:</span> <span class="string">&#x27;date&#x27;</span> <span class="comment"># Order by title or date</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br></pre></td></tr></table></figure><h2 id="11-访问人数"><a href="#11-访问人数" class="headerlink" title="11.访问人数"></a>11.访问人数</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="12-网站运行时间"><a href="#12-网站运行时间" class="headerlink" title="12.网站运行时间"></a>12.网站运行时间</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">runtimeshow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">publish_date:</span> <span class="number">2024</span><span class="string">/05/01</span></span><br></pre></td></tr></table></figure><h2 id="13-右下角按钮设置"><a href="#13-右下角按钮设置" class="headerlink" title="13.右下角按钮设置"></a>13.右下角按钮设置</h2><ul><li>translate:<br>简繁体翻译</li><li>readmode:<br>阅读模式</li><li>darkmode:<br>黑暗模式</li><li>rightside_scroll_percent:<br>展示当前页面的滚动百分比，默认为false</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">translate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># The text of a button</span></span><br><span class="line">  <span class="attr">default:</span> <span class="string">繁</span></span><br><span class="line">  <span class="comment"># the language of website (1 - Traditional Chinese/ 2 - Simplified Chinese）</span></span><br><span class="line">  <span class="attr">defaultEncoding:</span> <span class="number">2</span></span><br><span class="line">  <span class="comment"># Time delay</span></span><br><span class="line">  <span class="attr">translateDelay:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># The text of the button when the language is Simplified Chinese</span></span><br><span class="line">  <span class="attr">msgToTraditionalChinese:</span> <span class="string">&#x27;繁&#x27;</span></span><br><span class="line">  <span class="comment"># The text of the button when the language is Traditional Chinese</span></span><br><span class="line">  <span class="attr">msgToSimplifiedChinese:</span> <span class="string">&#x27;简&#x27;</span></span><br><span class="line"><span class="attr">readmode:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">darkmode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Toggle Button to switch dark/light mode</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Switch dark/light mode automatically (自動切換 dark mode和 light mode)</span></span><br><span class="line">  <span class="comment"># autoChangeMode: 1  Following System Settings, if the system doesn&#x27;t support dark mode, it will switch dark mode between 6 pm to 6 am</span></span><br><span class="line">  <span class="comment"># autoChangeMode: 2  Switch dark mode between 6 pm to 6 am</span></span><br><span class="line">  <span class="comment"># autoChangeMode: false</span></span><br><span class="line">  <span class="attr">autoChangeMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Set the light mode time. The value is between 0 and 24. If not set, the default value is 6 and 18</span></span><br><span class="line">  <span class="attr">start:</span> <span class="comment"># 8</span></span><br><span class="line">  <span class="attr">end:</span> <span class="comment"># 22</span></span><br><span class="line"><span class="attr">rightside_scroll_percent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="14-数学"><a href="#14-数学" class="headerlink" title="14.数学"></a>14.数学</h2><p>设置页面对mathjax和katex的支持，当per_page设置为false，须在要启用的页面中的front-matter中加上对应参数</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">katex:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hide_scrollbar:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="15-搜索"><a href="#15-搜索" class="headerlink" title="15.搜索"></a>15.搜索</h2><ol><li>添加一个本地搜索，使用命令<code>npm install hexo-generator-search --save</code>安装搜索插件</li><li>在配置文件底下加入local search的设置<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>在butterfly的配置中修改成以下设置<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">CDN:</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="16-分享系统"><a href="#16-分享系统" class="headerlink" title="16.分享系统"></a>16.分享系统</h2><p>在文章页底下的分享链接，有两种，选一即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sharejs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">sites:</span> <span class="string">facebook,twitter,wechat,weibo,qq</span></span><br><span class="line"><span class="attr">addtoany:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">item:</span> <span class="string">facebook,twitter,wechat,sina_weibo,facebook_messenger,email,copy_link</span></span><br></pre></td></tr></table></figure><h2 id="17-评论系统"><a href="#17-评论系统" class="headerlink" title="17.评论系统"></a>17.评论系统</h2><p>支持的评论系统有：Disqus&#x2F;Disqusjs&#x2F;Livere&#x2F;Gitalk&#x2F;Valine&#x2F;Waline&#x2F;Utterances&#x2F;Facebook Comments&#x2F;Twikoo&#x2F;Giscus&#x2F;Remark42&#x2F;Artalk</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">utterances</span></span><br><span class="line">  <span class="attr">text:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">card_post_count:</span> <span class="literal">false</span> </span><br></pre></td></tr></table></figure><h2 id="18-在线聊天服务"><a href="#18-在线聊天服务" class="headerlink" title="18.在线聊天服务"></a>18.在线聊天服务</h2><p>展示右下角的聊天按钮，下面有几个支持的平台，去配置文件里看吧</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">chat_btn:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">chat_hide_show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="19-网站UI配色"><a href="#19-网站UI配色" class="headerlink" title="19.网站UI配色"></a>19.网站UI配色</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme_color:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">main:</span> <span class="string">&quot;#49B1F5&quot;</span></span><br><span class="line">  <span class="attr">paginator:</span> <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">  <span class="attr">button_hover:</span> <span class="string">&quot;#FF7242&quot;</span></span><br><span class="line">  <span class="attr">text_selection:</span> <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">  <span class="attr">link_color:</span> <span class="string">&quot;#99a9bf&quot;</span></span><br><span class="line">  <span class="attr">meta_color:</span> <span class="string">&quot;#858585&quot;</span></span><br><span class="line">  <span class="attr">hr_color:</span> <span class="string">&quot;#A4D8FA&quot;</span></span><br><span class="line">  <span class="attr">code_foreground:</span> <span class="string">&quot;#F47466&quot;</span></span><br><span class="line">  <span class="attr">code_background:</span> <span class="string">&quot;rgba(27, 31, 35, .05)&quot;</span></span><br><span class="line">  <span class="attr">toc_color:</span> <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">  <span class="attr">blockquote_padding_color:</span> <span class="string">&quot;#49b1f5&quot;</span></span><br><span class="line">  <span class="attr">blockquote_background_color:</span> <span class="string">&quot;#49b1f5&quot;</span></span><br><span class="line">  <span class="attr">scrollbar_color:</span> <span class="string">&quot;#49b1f5&quot;</span></span><br><span class="line">  <span class="attr">meta_theme_color_light:</span> <span class="string">&quot;ffffff&quot;</span></span><br><span class="line">  <span class="attr">meta_theme_color_dark:</span> <span class="string">&quot;#0d0d0d&quot;</span></span><br></pre></td></tr></table></figure><h2 id="20-网站背景和页脚背景"><a href="#20-网站背景和页脚背景" class="headerlink" title="20.网站背景和页脚背景"></a>20.网站背景和页脚背景</h2><p>我想要页脚为透明的所以设置成<code>none</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">background:</span> <span class="string">url(/img/background.jpg)</span></span><br><span class="line"><span class="attr">footer_bg:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">mask:</span></span><br><span class="line">  <span class="attr">header:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="21-导航栏和页脚的蒙皮效果"><a href="#21-导航栏和页脚的蒙皮效果" class="headerlink" title="21.导航栏和页脚的蒙皮效果"></a>21.导航栏和页脚的蒙皮效果</h2><p>透明页脚所以关闭页脚的蒙皮效果</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mask:</span></span><br><span class="line">  <span class="attr">header:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="22-页面美化"><a href="#22-页面美化" class="headerlink" title="22.页面美化"></a>22.页面美化</h2><p>在标题前加上一个小图标<code>\f863</code>是小风车，然后可以在inject中添加一个旋转动画使其旋转</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">beautify:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">title-prefix-icon:</span> <span class="string">&#x27;\f863&#x27;</span></span><br><span class="line">  <span class="attr">title-prefix-icon-color:</span>  <span class="string">&#x27;#F47466&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="23-字体选择"><a href="#23-字体选择" class="headerlink" title="23.字体选择"></a>23.字体选择</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">global-font-size:</span> <span class="string">16px</span></span><br><span class="line">  <span class="attr">code-font-size:</span> <span class="string">15px</span></span><br><span class="line">  <span class="attr">font-family:</span> <span class="string">-apple-system,</span> <span class="string">BlinkMacSystemFont,</span> <span class="string">&#x27;Segoe UI&#x27;</span><span class="string">,</span> <span class="string">&#x27;Helvetica Neue&#x27;</span><span class="string">,</span> <span class="string">Lato,</span> <span class="string">Roboto,</span> <span class="string">&#x27;PingFang SC&#x27;</span><span class="string">,</span> <span class="string">&#x27;Microsoft YaHei&#x27;</span><span class="string">,</span> <span class="string">sans-serif</span></span><br><span class="line">  <span class="attr">code-font-family:</span> <span class="string">consolas,</span> <span class="string">Menlo,</span> <span class="string">&#x27;PingFang SC&#x27;</span><span class="string">,</span> <span class="string">&#x27;Microsoft YaHei&#x27;</span><span class="string">,</span> <span class="string">sans-serif</span></span><br></pre></td></tr></table></figure><h2 id="24-分割线图标"><a href="#24-分割线图标" class="headerlink" title="24.分割线图标"></a>24.分割线图标</h2><p><code>\f0c4</code>是剪刀</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hr_icon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">&#x27;\f0c4&#x27;</span></span><br><span class="line">  <span class="attr">icon-top:</span> <span class="string">-10px</span></span><br></pre></td></tr></table></figure><h2 id="25-主页副标题"><a href="#25-主页副标题" class="headerlink" title="25.主页副标题"></a>25.主页副标题</h2><p>effect为打字效果，可以改变副标题的源使其更动态</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">typed_option:</span></span><br><span class="line">  <span class="attr">source:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">sub:</span></span><br></pre></td></tr></table></figure><h2 id="26-加载动画"><a href="#26-加载动画" class="headerlink" title="26.加载动画"></a>26.加载动画</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">preloader:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">source:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">pace_css_url:</span></span><br></pre></td></tr></table></figure><h2 id="27-字数统计"><a href="#27-字数统计" class="headerlink" title="27.字数统计"></a>27.字数统计</h2><p>在使用前需使用命令<code>npm install hexo-wordcount --save</code>安装插件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="28-弹窗显示"><a href="#28-弹窗显示" class="headerlink" title="28.弹窗显示"></a>28.弹窗显示</h2><p>位置可选top-left &#x2F; top-center &#x2F; top-right &#x2F; bottom-left &#x2F; bottom-center &#x2F; bottom-right</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">snackbar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top-right</span></span><br><span class="line">  <span class="attr">bg_light:</span> <span class="string">&#x27;#49b1f5&#x27;</span></span><br><span class="line">  <span class="attr">bg_dark:</span> <span class="string">&#x27;#1f1f1f&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="29-中英文间空格"><a href="#29-中英文间空格" class="headerlink" title="29.中英文间空格"></a>29.中英文间空格</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pangu:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span></span><br></pre></td></tr></table></figure><p><a href="https://ana-0823.github.io/post/"><strong>至此你的博客已经焕然一新了，不过也有可能会出现很多奇怪的问题🧐，总之快去试试吧，下一章将会开始安装其他插件和魔改butterfly主题😏🛫</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo搭建博客基础（二）</title>
      <link href="/post/sunqxf91.html"/>
      <url>/post/sunqxf91.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><h3 id="博客搭建导航-🌏"><a href="#博客搭建导航-🌏" class="headerlink" title="博客搭建导航 🌏"></a>博客搭建导航 🌏</h3><ol><li><a href="/post/6706d621.html" title="基于hexo搭建博客基础（一）">基于hexo搭建博客基础（一）</a></li><li><a href="/post/sunqxf91.html" title="基于hexo搭建博客基础（二）">基于hexo搭建博客基础（二）</a></li><li><a href="/post/r51bjcg8.html" title="基于hexo搭建博客基础（三）">基于hexo搭建博客基础（三）</a></li></ol></div><script src='/js/series.js'></script><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><ol><li>这个系列是关于如何基于hexo框架以及GitHub Pages搭建自己的博客网站。</li><li>❗创建本系列博客的初衷也只是为了记录一下自己的学习过程，以防之后健忘❗。</li><li>虽说如此，但是本系列博客已经写的很详细了，可能后面的内容会比较简略，就算是零基础也能懂大部分。</li><li>配置文件参数含义在<a href="https://hexo.io/zh-cn/docs/configuration">官方</a>处都有讲解，这里只讲述自己修改了的部分。</li></ol><h2 id="2-Site信息修改"><a href="#2-Site信息修改" class="headerlink" title="2.Site信息修改"></a>2.Site信息修改</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">AnA.</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">🥳🥳欢迎来到我的小站🥳🥳</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">一个讨论技术和作为个人知识库的小站</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">AnA</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure><p>language常用参数:</p><ul><li>en（英文）</li><li>zh-CN（中文简体（中国大陆））</li><li>zh-HK（中文繁体（中国香港））</li><li>zh-TW（中文繁体（中国台湾））</li></ul><h2 id="3-URL信息修改"><a href="#3-URL信息修改" class="headerlink" title="3.URL信息修改"></a>3.URL信息修改</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://ana-0823.github.io</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">post/:code/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>url：站内链接的前缀地址，将其改为自己站点的地址<br>permalink：站内文章的地址（:code是我自定义的参数，在post的markdown文档的<code>front-matter</code>中加上就好）</p><h2 id="4-标签页"><a href="#4-标签页" class="headerlink" title="4.标签页"></a>4.标签页</h2><ol><li>在博客根目录下打开终端输入以下命令：<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo new page tags</span><br></pre></td></tr></table></figure></li><li>会在博客根目录中的<code>\source\</code>生成一个含有<code>index.md</code>文件的<code>tags</code>文件夹。</li><li>修改<code>index.md</code>，添加<code>type: &quot;tags&quot;</code>。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2024-05-02 03:31:43</span><br><span class="line"><span class="section">type: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></li><li>安装以上步骤生成<code>categories</code>还有<code>link</code>标签页。</li></ol><h2 id="5-友链"><a href="#5-友链" class="headerlink" title="5.友链"></a>5.友链</h2><p>在博客根目录下的<code>\source\_data</code>中创建一个link.yml文件，在这里按以下格式填写需要的链接：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="number">1</span><span class="string">.技术支持</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">本网站的搭建由以下开源作者提供技术支持</span></span><br><span class="line">  <span class="attr">link_list:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span> </span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.io/zh-cn/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">快速、简单且强大的网志框架</span></span><br><span class="line">      <span class="attr">siteshot:</span> </span><br></pre></td></tr></table></figure><h2 id="6-子页面"><a href="#6-子页面" class="headerlink" title="6.子页面"></a>6.子页面</h2><p>子页面就是普通的页面，通过<code>npx hexo page &lt;page name&gt;</code>创建就好<br>然后就可以在对应的<code>index.md</code>中编写页面内容</p><h2 id="7-关于markdown文档的front-matter"><a href="#7-关于markdown文档的front-matter" class="headerlink" title="7.关于markdown文档的front-matter"></a>7.关于markdown文档的front-matter</h2><p><code>front-matter</code>就是markdown文档最上方以<code>---</code>分割的区域，作为页面和文章<code>metadata</code></p><ul><li>page front-matter用于配置页面</li><li>post front-matter用于配置文章</li></ul><h3 id="page-front-matter"><a href="#page-front-matter" class="headerlink" title="page front-matter"></a>page front-matter</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aside:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>title</td><td>【必需】页面标题</td></tr><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标签、分类和友链页面需要配置</td></tr><tr><td>updated</td><td>【可选】页面更新日期</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块(默认 true)</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>kates</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</td></tr></tbody></table><h3 id="post-front-matter"><a href="#post-front-matter" class="headerlink" title="post front-matter"></a>post front-matter</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">comments:</span></span><br><span class="line"><span class="emphasis">cover:</span></span><br><span class="line"><span class="emphasis">toc:</span></span><br><span class="line"><span class="emphasis">toc_</span>number:</span><br><span class="line">toc<span class="emphasis">_style_</span>simple:</span><br><span class="line">copyright:</span><br><span class="line">copyright<span class="emphasis">_author:</span></span><br><span class="line"><span class="emphasis">copyright_</span>author<span class="emphasis">_href:</span></span><br><span class="line"><span class="emphasis">copyright_</span>url:</span><br><span class="line">copyright<span class="emphasis">_info:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line"><span class="section">aside:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标签</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false&#x2F;图片地址&#x2F;留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>toc_style_simple</td><td>【可选】显示 toc 简洁模式</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table><h2 id="8-安装主题"><a href="#8-安装主题" class="headerlink" title="8.安装主题"></a>8.安装主题</h2><p>推荐🦋hexo-theme-butterfly主题（当然也可以安装其他的主题），输入以下命令安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-theme-butterfly</span></span><br></pre></td></tr></table></figure><h2 id="9-应用主题"><a href="#9-应用主题" class="headerlink" title="9.应用主题"></a>9.应用主题</h2><ol><li>修改网站配置文件<code>_config.yml</code>，将主题更改为<code>butterfly</code><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure></li><li>安装<code>pug</code>和<code>stylus</code>渲染器，这两个渲染器都是<code>butterfly</code>生成页面的依赖包：<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-renderer-pug</span> hexo<span class="literal">-renderer-stylus</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure></li><li>为了后续修改方便，将butterfly的配置文件<code>_config.yml</code>复制到项目根目录底下，并改名为<code>_config.butterfly.yml</code>。</li></ol><h2 id="10-标签外挂"><a href="#10-标签外挂" class="headerlink" title="10.标签外挂"></a>10.标签外挂</h2><p>❗❗❗标签外挂是hexo特有的功能，并不是markdown的标准格式，以下的写法仅限于butterfly主题，将其应用于其他主题可能会导致报错❗❗❗</p><h3 id="10-1-note-Bootstrap-Callout"><a href="#10-1-note-Bootstrap-Callout" class="headerlink" title="10.1.note (Bootstrap Callout)"></a>10.1.note (Bootstrap Callout)</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/#Note-Bootstrap-Callout">官方链接🛫</a><br>使用方法有两种，语法格式：</p><div class="tabs" id="tab1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="tab1-1">第一种</button><button type="button" class="tab " data-href="tab1-2">第二种</button></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;</span><br><span class="line">默认 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div></div><div class="tab-item-content" id="tab1-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>当style缺省时启用配置文件中的设置</p><h3 id="10-2-Gallery相册图库"><a href="#10-2-Gallery相册图库" class="headerlink" title="10.2.Gallery相册图库"></a>10.2.Gallery相册图库</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/#Gallery%E7%9B%B8%E5%86%8A%E5%9C%96%E5%BA%AB">官方链接🛫</a><br>图库集合，语法格式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>name：图库名字</li><li>description：图库描述</li><li>link：跳转链接</li><li>img-url：封面图片</li></ul><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup &#x27;图库&#x27; &#x27;个人喜欢的一些图片🥰🥰&#x27; &#x27;/gallery/&#x27; &#x27;/img/background.jpg&#x27; %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><div class="gallery-group-main"><figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='/img/background.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">图库</div>  <p>个人喜欢的一些图片🥰🥰</p>  <a href='/gallery/'></a>  </figcaption>  </figure>  </div><h3 id="10-3-Gallery相册"><a href="#10-3-Gallery相册" class="headerlink" title="10.3.Gallery相册"></a>10.3.Gallery相册</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/#Gallery%E7%9B%B8%E5%86%8A">官方链接🛫</a><br>图库，语法格式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery [lazyload],[rowHeight],[limit] %&#125;</span><br><span class="line">![](<span class="link">img-url</span>)</span><br><span class="line">...</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">/img/1.jpg</span>)</span><br><span class="line">![](<span class="link">/img/2.jpg</span>)</span><br><span class="line">![](<span class="link">/img/3.jpg</span>)</span><br><span class="line">![](<span class="link">/img/4.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"/img/1.jpg","alt":""},{"url":"/img/2.jpg","alt":""},{"url":"/img/3.jpg","alt":""},{"url":"/img/4.jpg","alt":""}]</div>      <div class="gallery-items">      </div>    </div><h3 id="10-4-tag-hide"><a href="#10-4-tag-hide" class="headerlink" title="10.4.tag-hide"></a>10.4.tag-hide</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/#tag-hide">官方链接🛫</a><br>这个标签可以隐藏一些内容🧐，有三种可选：</p><div class="tabs" id="tab2"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="tab2-1">Inline</button><button type="button" class="tab " data-href="tab2-2">Block</button><button type="button" class="tab " data-href="tab2-3">Toggle</button></ul><div class="tab-contents"><div class="tab-item-content active" id="tab2-1"><p>可以在文本中的按钮后隐藏一些东西，仅限文字</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideInline content,display,bg,color %&#125;</span><br></pre></td></tr></table></figure><ul><li>content: 文本内容</li><li>display: 按钮显示的文字（可选）</li><li>bg: 按钮的背景颜色（可选）</li><li>color: 按钮文字的颜色（可选）</li></ul><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">🤣👉&#123;% hideInline 🤡,你是谁？,#66CCCC,#fff %&#125;</span><br><span class="line">🤣👉&#123;% hideInline 🤡 %&#125;</span><br></pre></td></tr></table></figure><p>🤣👉<span class="hide-inline"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">你是谁？<br>  </button><span class="hide-content">🤡</span></span><br>🤣👉<span class="hide-inline"><button type="button" class="hide-button" style="">Click<br>  </button><span class="hide-content">🤡</span></span></p></div><div class="tab-item-content" id="tab2-2"><p>可以在一个独立的按钮后隐藏很多内容，包括图片，代码块等</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><ul><li>content: 文本内容</li><li>display: 按钮显示的文字（可选）</li><li>bg: 按钮的背景颜色（可选）</li><li>color: 按钮文字的颜色（可选）</li></ul><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 猜猜这里有什么？,#66CCCC,#fff %&#125;</span><br><span class="line">啥也没有🤣👉🤡</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br><span class="line">&#123;% hideBlock 你在再猜猜这里有什么？,#66CCCC,#fff %&#125;</span><br><span class="line">🤪还是啥也没有🤣👉🤡</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br><span class="line">&#123;% hideBlock 这里真的有东西的😲,#66CCCC,#fff %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: relative; padding: 30% 45%;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute; width: 100%; height: 100%; left: 0; top: 0;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=80433022&amp;bvid=BV1GJ411x7h7&amp;cid=137649199&amp;p=1&amp;danmaku=0&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">猜猜这里有什么？    </button><div class="hide-content"><p>啥也没有🤣👉🤡</p></div></div><div class="hide-block"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">你在再猜猜这里有什么？    </button><div class="hide-content"><p>🤪还是啥也没有🤣👉🤡</p></div></div><div class="hide-block"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">这里真的有东西的😲    </button><div class="hide-content"><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=80433022&bvid=BV1GJ411x7h7&cid=137649199&p=1&danmaku=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div></div></div></div><div class="tab-item-content" id="tab2-3"><p>折叠的收缩栏</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><ul><li>content: 文本内容</li><li>display: 按钮显示的文字（可选）</li><li>bg: 按钮的背景颜色（可选）</li><li>color: 按钮文字的颜色（可选）</li></ul><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle 还要再来一次吗😲,#1f1f1f,#fff %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: relative; padding: 30% 45%;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute; width: 100%; height: 100%; left: 0; top: 0;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=80433022&amp;bvid=BV1GJ411x7h7&amp;cid=137649199&amp;p=1&amp;danmaku=0&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><details class="toggle" style="border: 1px solid #1f1f1f"><summary class="toggle-button" style="background-color: #1f1f1f;color: #fff">还要再来一次吗😲</summary><div class="toggle-content"><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=80433022&bvid=BV1GJ411x7h7&cid=137649199&p=1&danmaku=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div></div></details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="10-5-mermaid"><a href="#10-5-mermaid" class="headerlink" title="10.5.mermaid"></a>10.5.mermaid</h3><p>使用mermaid标签可以绘制Flowchart（流程图）、Sequence diagram（时序图 ）、Class Diagram（类别图）、State Diagram（状态图）、Gantt（甘特图）和Pie Chart（圆形图），具体可以查看<a href="https://mermaid.js.org/">mermaid文档🛫</a>以及<a href="https://butterfly.js.org/posts/4aa8abbe/#mermaid">butterfly官方🛫</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">pie</span><br><span class="line"><span class="code">    title 一个样例图</span></span><br><span class="line"><span class="code">    &quot;一部分&quot; : 33</span></span><br><span class="line"><span class="code">    &quot;二部分&quot; : 17</span></span><br><span class="line"><span class="code">    &quot;三部分&quot; : 45</span></span><br><span class="line"><span class="code">    &quot;四部分&quot; :  5</span></span><br><span class="line"><span class="code">&#123;% endmermaid %&#125;</span></span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  pie    title 一个样例图    &quot;一部分&quot; : 33    &quot;二部分&quot; : 17    &quot;三部分&quot; : 45    &quot;四部分&quot; :  5  </pre></div><h3 id="10-6-tabs"><a href="#10-6-tabs" class="headerlink" title="10.6.tabs"></a>10.6.tabs</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/#Tabs">官方链接🛫</a><br>页面中的分栏</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs %&#125;</span><br><span class="line">&lt;!-- tab tab1 --&gt;</span><br><span class="line">😎</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab tab2 --&gt;</span><br><span class="line">😍</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab tab3 --&gt;</span><br><span class="line">🤩</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="tab3"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="tab3-1">tab1</button><button type="button" class="tab " data-href="tab3-2">tab2</button><button type="button" class="tab " data-href="tab3-3">tab3</button></ul><div class="tab-contents"><div class="tab-item-content active" id="tab3-1"><p>😎</p></div><div class="tab-item-content" id="tab3-2"><p>😍</p></div><div class="tab-item-content" id="tab3-3"><p>🤩</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="10-7-button"><a href="#10-7-button" class="headerlink" title="10.7.button"></a>10.7.button</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/#Button">官方链接🛫</a><br>按钮</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn &#x27;https://ana-0823.github.io/&#x27;,回到主页,fas fa-home,block %&#125;</span><br><span class="line">&#123;% btn &#x27;https://www.bilibili.com/video/BV1GJ411x7h7/?share<span class="emphasis">_source=copy_</span>web&amp;vd<span class="emphasis">_source=5ebc5a2a2473be67c2088121daedad91/&#x27;,😲,,block %&#125;</span></span><br></pre></td></tr></table></figure><a class="btn-beautify block" href="https://ana-0823.github.io/"   title="回到主页"><i class="fas fa-home"></i><span>回到主页</span></a><a class="btn-beautify block" href="https://www.bilibili.com/video/BV1GJ411x7h7/?share_source=copy_web&vd_source=5ebc5a2a2473be67c2088121daedad91/"   title="😲"><span>😲</span></a><h3 id="10-8-inlineImg"><a href="#10-8-inlineImg" class="headerlink" title="10.8.inlineImg"></a>10.8.inlineImg</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/#inlineImg">官方链接🛫</a><br>以<code>内联元素</code>显示的图片，使用此标签</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineImg [src] [height] %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🤣👉&#123;% inlineImg /img/jocker.gif 100px %&#125;</span><br></pre></td></tr></table></figure><p>🤣👉<img class="inline-img" src="/img/jocker.gif" style="height:100px" /></p><h3 id="10-9-label"><a href="#10-9-label" class="headerlink" title="10.9.label"></a>10.9.label</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/#label">官方链接🛫</a><br>高亮标签</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个&#123;% label 高亮 red %&#125;，这是另一个&#123;% label 高亮 pink %&#125;</span><br></pre></td></tr></table></figure><p>这是一个<mark class="hl-label red">高亮</mark> ，这是另一个<mark class="hl-label pink">高亮</mark> </p><h3 id="10-10-timeline"><a href="#10-10-timeline" class="headerlink" title="10.10.timeline"></a>10.10.timeline</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/#timeline">官方链接🛫</a><br>时间线</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline title,color %&#125;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">content</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">content</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2024 %&#125;</span><br><span class="line">&lt;!-- timeline 05-01 --&gt;</span><br><span class="line">test</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 05-02 --&gt;</span><br><span class="line">test2</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2024</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-01</p></div></div><div class='timeline-item-content'><p>test1</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-02</p></div></div><div class='timeline-item-content'><p>test2</p></div></div></div><h3 id="10-11-flink"><a href="#10-11-flink" class="headerlink" title="10.11.flink"></a>10.11.flink</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/#flink">官方链接🛫</a><br>添加友链</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% flink %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endflink %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% flink %&#125;</span><br><span class="line"><span class="bullet">-</span> class<span class="emphasis">_name: 技术支持</span></span><br><span class="line"><span class="emphasis">  class_</span>desc: 本网站的搭建由以下开源作者提供技术支持</span><br><span class="line">  link<span class="emphasis">_list: </span></span><br><span class="line"><span class="emphasis">    - name: Hexo </span></span><br><span class="line"><span class="emphasis">      link: https://hexo.io/zh-cn/</span></span><br><span class="line"><span class="emphasis">      avatar: https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line"><span class="emphasis">      descr: 快速、简单且强大的网志框架</span></span><br><span class="line"><span class="emphasis">      siteshot:</span></span><br><span class="line"><span class="emphasis">    - name: butterfly</span></span><br><span class="line"><span class="emphasis">      link: https://butterfly.js.org/</span></span><br><span class="line"><span class="emphasis">      avatar: https://butterfly.js.org/img/avatar.png</span></span><br><span class="line"><span class="emphasis">      descr: butterfly美化主题🦋</span></span><br><span class="line"><span class="emphasis">      siteshot: </span></span><br><span class="line"><span class="emphasis">&#123;% endflink %&#125;</span></span><br></pre></td></tr></table></figure><div class="flink"><div class="flink-name">技术支持</div><div class="flink-desc">本网站的搭建由以下开源作者提供技术支持</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://hexo.io/zh-cn/" title="Hexo" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Hexo" />              </div>              <div class="flink-item-name">Hexo</div>               <div class="flink-item-desc" title="快速、简单且强大的网志框架">快速、简单且强大的网志框架</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://butterfly.js.org/" title="butterfly" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://butterfly.js.org/img/avatar.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="butterfly" />              </div>              <div class="flink-item-name">butterfly</div>               <div class="flink-item-desc" title="butterfly美化主题🦋">butterfly美化主题🦋</div>            </a>          </div></div></div><h3 id="10-12-abcjs乐谱"><a href="#10-12-abcjs乐谱" class="headerlink" title="10.12.abcjs乐谱"></a>10.12.abcjs乐谱</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/?highlight=abc#abcjs-%E6%A8%82%E8%AD%9C">官方链接🛫</a><br>在页面上渲染乐谱<br>在主题配置中设置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">abcjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>格式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% score %&#125;</span><br><span class="line">乐谱代码</span><br><span class="line">&#123;% endscore %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% score %&#125;</span><br><span class="line">X:1</span><br><span class="line">T:alternate heads</span><br><span class="line">M:C</span><br><span class="line">L:1/8</span><br><span class="line">U:n=!style=normal!</span><br><span class="line">K:C treble style=rhythm</span><br><span class="line">&quot;Am&quot; BBBB B2 B&gt;B | &quot;Dm&quot; B2 B/B/B &quot;C&quot; B4 |&quot;Am&quot; B2 nGnB B2 nGnA | &quot;Dm&quot; nDB/B/ nDB/B/ &quot;C&quot; nCB/B/ nCB/B/ |B8| B0 B0 B0 B0 |]</span><br><span class="line">%%text This translates to:</span><br><span class="line">[<span class="string">M:C</span>][<span class="symbol">K:style=normal</span>]</span><br><span class="line">[<span class="string">A,EAce</span>][<span class="symbol">A,EAce</span>][<span class="string">A,EAce</span>][<span class="symbol">A,EAce</span>] [A,EAce]2 [A,EAce]&gt;[A,EAce] |[DAdf]2 [DAdf]/[DAdf]/[DAdf] [CEGce]4 |[A,EAce]2 GA [A,EAce] GA |D[DAdf]/[DAdf]/ D[DAdf]/[DAdf]/ C [CEGce]/[CEGce]/ C[CEGce]/[CEGce]/ |[CEGce]8 | [CEGce]2 [CEGce]2 [CEGce]2 [CEGce]2 |]</span><br><span class="line">GAB2 !style=harmonic![gb]4|GAB2 [K: style=harmonic]gbgb|</span><br><span class="line">[K: style=x]</span><br><span class="line">C/A,/ C/C/E C/zz2|</span><br><span class="line">w:Rock-y did-nt like that</span><br><span class="line">&#123;% endscore %&#125;</span><br></pre></td></tr></table></figure><div class="abc-music-sheet">X:1T:alternate headsM:CL:1/8U:n=!style=normal!K:C treble style=rhythm&quot;Am&quot; BBBB B2 B&gt;B | &quot;Dm&quot; B2 B/B/B &quot;C&quot; B4 |&quot;Am&quot; B2 nGnB B2 nGnA | &quot;Dm&quot; nDB/B/ nDB/B/ &quot;C&quot; nCB/B/ nCB/B/ |B8| B0 B0 B0 B0 |]%%text This translates to:[M:C][K:style=normal][A,EAce][A,EAce][A,EAce][A,EAce] [A,EAce]2 [A,EAce]&gt;[A,EAce] |[DAdf]2 [DAdf]/[DAdf]/[DAdf] [CEGce]4 |[A,EAce]2 GA [A,EAce] GA |D[DAdf]/[DAdf]/ D[DAdf]/[DAdf]/ C [CEGce]/[CEGce]/ C[CEGce]/[CEGce]/ |[CEGce]8 | [CEGce]2 [CEGce]2 [CEGce]2 [CEGce]2 |]GAB2 !style=harmonic![gb]4|GAB2 [K: style=harmonic]gbgb|[K: style=x]C/A,/ C/C/E C/zz2|w:Rock-y did-nt like that</div><h3 id="10-13-series系列文章"><a href="#10-13-series系列文章" class="headerlink" title="10.13.series系列文章"></a>10.13.series系列文章</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/?highlight=abc#series-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0">官方链接🛫</a><br>在页面上显示系列文章<br>修改主题配置文件如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">series:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">orderBy:</span> <span class="string">&#x27;date&#x27;</span></span><br><span class="line">  <span class="attr">order:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>写法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% series %&#125;</span><br><span class="line">&#123;% series [series name] %&#125;</span><br></pre></td></tr></table></figure><p>要在文章的<code>front-matter</code>上添加参数series，给一个标识</p><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% series hexo %&#125;</span><br></pre></td></tr></table></figure><ol><li><a href="/post/6706d621.html" title="基于hexo搭建博客基础（一）">基于hexo搭建博客基础（一）</a></li><li><a href="/post/sunqxf91.html" title="基于hexo搭建博客基础（二）">基于hexo搭建博客基础（二）</a></li><li><a href="/post/r51bjcg8.html" title="基于hexo搭建博客基础（三）">基于hexo搭建博客基础（三）</a></li></ol><h3 id="10-14-aplayer播放器"><a href="#10-14-aplayer播放器" class="headerlink" title="10.14.aplayer播放器"></a>10.14.aplayer播放器</h3><p>详细介绍看<a href="https://github.com/MoePlayer/hexo-tag-aplayer">官方文档</a><br>通过命令<code>npm install --save hexo-tag-aplayer</code>安装插件<br>要在配置文件中修改如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>主题配置中修改如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>per_page为false时须在要使用的页面的<code>front-matter</code>中添加aplayer参数<br>为了使切换页面时音乐不中断，要打开pjax</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br></pre></td></tr></table></figure><p>写法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% meting id server type %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% meting &quot;9992949674&quot; &quot;netease&quot; &quot;playlist&quot;%&#125;</span><br></pre></td></tr></table></figure>    <div id="aplayer-bYZRpCso" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="9992949674" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><p><a href="https://ana-0823.github.io/post/r51bjcg8.html"><strong>至此站点的配置和butterfly主题就应用到博客上了，下一章将自定义butterfly主题成自己喜欢的样子🛫</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo搭建博客基础（一）</title>
      <link href="/post/6706d621.html"/>
      <url>/post/6706d621.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><h3 id="博客搭建导航-🌏"><a href="#博客搭建导航-🌏" class="headerlink" title="博客搭建导航 🌏"></a>博客搭建导航 🌏</h3><ol><li><a href="/post/6706d621.html" title="基于hexo搭建博客基础（一）">基于hexo搭建博客基础（一）</a></li><li><a href="/post/sunqxf91.html" title="基于hexo搭建博客基础（二）">基于hexo搭建博客基础（二）</a></li><li><a href="/post/r51bjcg8.html" title="基于hexo搭建博客基础（三）">基于hexo搭建博客基础（三）</a></li></ol></div><script src='/js/series.js'></script><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><ol><li>这个系列是关于如何基于 hexo 框架以及 GitHub Pages 搭建自己的博客网站。</li><li>❗ 创建本系列博客的初衷也只是为了记录一下自己的学习过程，以防之后健忘 ❗。</li><li>虽说如此，但是本系列博客已经写的很详细了，可能后面的内容会比较简略，就算是零基础也能懂大部分。</li></ol><h2 id="2-环境与工具准备"><a href="#2-环境与工具准备" class="headerlink" title="2.环境与工具准备"></a>2.环境与工具准备</h2><p>本系列是面向 Windows 用户的，所需工具：</p><ul><li>操作系统：Windows11</li><li>Node.js</li><li>Git</li><li>Hexo</li><li>GitHub 账号</li><li>文本编辑器（随便一个都行，甚至 word 文档也可以 🤣，不过还是推荐 VSCode）</li></ul><h2 id="3-Node-js-的安装"><a href="#3-Node-js-的安装" class="headerlink" title="3.Node.js 的安装"></a>3.Node.js 的安装</h2><ol><li>下载地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></li><li>安装。</li><li>打开终端，输入<code>node -v</code>来查看 node.js 的版本，看到版本号则为安装成功。</li><li>修改 npm 源，看情况，有梯子就不用了，要修改就按照输入以下命令：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry &lt;替换的npm源&gt;</span><br></pre></td></tr></table></figure><h2 id="4-安装-Hexo"><a href="#4-安装-Hexo" class="headerlink" title="4.安装 Hexo"></a>4.安装 Hexo</h2><ol><li>输入以下命令：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br></pre></td></tr></table></figure><ol start="2"><li>以上命令为全局安装（全局安装路径为：C:\Users\Administrator\AppData\Roaming\npm，输入<code>npm config get prefix</code>查看），安装的包将会放到此路径底下的 node_modules 里，如果不想全局的话，就在指定路径底下打开终端，输入以下命令：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-cli</span></span><br></pre></td></tr></table></figure><ol start="3"><li>输入<code>npx hexo -v</code>查看 hexo 版本（不是全局安装的话要将终端切换到指定路径），看到版本号就是安装成功了。</li></ol><h2 id="5-GitHub-创建仓库"><a href="#5-GitHub-创建仓库" class="headerlink" title="5.GitHub 创建仓库"></a>5.GitHub 创建仓库</h2><p>创建一个名为&lt;GitHub 用户名&gt;.github.io 的仓库<br><strong>❗❗❗ 仓库名的格式必须为&lt;GitHub 用户名&gt;.github.io，否则后面会出现 bug 还有 404❗❗❗</strong></p><h2 id="6-Git-安装"><a href="#6-Git-安装" class="headerlink" title="6.Git 安装"></a>6.Git 安装</h2><ol><li>下载地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li><li>安装</li><li>配置用户名和邮箱</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config <span class="literal">--global</span> user.name <span class="string">&quot;用户名&quot;</span></span><br><span class="line">git config <span class="literal">--global</span> user.email <span class="string">&quot;邮箱&quot;</span></span><br></pre></td></tr></table></figure><h2 id="7-连接-GitHub"><a href="#7-连接-GitHub" class="headerlink" title="7.连接 GitHub"></a>7.连接 GitHub</h2><p>两种都可以</p><h3 id="使用-ssh-连接"><a href="#使用-ssh-连接" class="headerlink" title="使用 ssh 连接"></a>使用 ssh 连接</h3><ol><li>生成 ssh 密钥对,生成的公钥和密钥在 C:\Users\Administrator.shh 里，输入以下命令：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-C</span> <span class="string">&quot;邮箱&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>输入以下命令查看 ssh 公钥</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> .ssh\id_rsa.pub</span><br></pre></td></tr></table></figure><ol start="3"><li>将公钥复制到 GitHub 账号里。</li></ol><h3 id="使用-https-连接"><a href="#使用-https-连接" class="headerlink" title="使用 https 连接"></a>使用 https 连接</h3><p>直接用就好了</p><h2 id="8-初始化-Hexo-项目"><a href="#8-初始化-Hexo-项目" class="headerlink" title="8.初始化 Hexo 项目"></a>8.初始化 Hexo 项目</h2><ol><li>在目标路径打开终端（不是全局安装的就在装了 hexo 的那个路径里初始化），输入以下命令：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo init &lt;项目名&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>cd</code>进入项目中，输入<code>npx hexo s</code>，输入后会在本地的 4000 端口启动项目。</li><li>在浏览器输入<a href="http://localhost:4000/">http://localhost:4000/</a>，可以看到一份 HelloWorld 文档，证明博客已经搭建好了。</li></ol><h2 id="9-将静态的博客网站挂载到-GitHub-Pages-上"><a href="#9-将静态的博客网站挂载到-GitHub-Pages-上" class="headerlink" title="9.将静态的博客网站挂载到 GitHub Pages 上"></a>9.将静态的博客网站挂载到 GitHub Pages 上</h2><ol><li>安装 hexo-deployer-git</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-deployer-git</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><ol start="2"><li>修改_config.yml 文件，这个文件为网站的配置文件，可以打开<a href="https://hexo.io/zh-cn/docs/configuration">官方的教程</a>，修改 deploy 配置：</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&quot;git&quot;</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">&lt;仓库地址&gt;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><ol start="3"><li>改好后，输入以下命令将博客部署到 GitHub 上：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx hexo clean; npx hexo generate; npx hexo deploy</span><br><span class="line">// 可以简写为 npx hexo cl; npx hexo g; npx hexo d</span><br></pre></td></tr></table></figure><ul><li><code>npx hexo clean</code>：删除之前生成的静态文件。</li><li><code>npx hexo generate</code>：生成静态文件。</li><li><code>npx hexo deploy</code>：将静态文件部署到 GitHub 上。</li></ul><p><a href="https://ana-0823.github.io/post/sunqxf91.html"><strong>至此博客搭建成功，下一章将修改站点配置并安装主题到博客中 🛫</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/corner-indicator.css"/>
      <url>/css/corner-indicator.css</url>
      
        <content type="html"><![CDATA[:root{--pace-color: #49B1F5;}[data-theme='dark'] {--pace-color: #292929;}.pace {-webkit-pointer-events: none;pointer-events: none;-webkit-user-select: none;-moz-user-select: none;user-select: none;}.pace .pace-activity {display: block;position: fixed;z-index: 2000;top: 0;right: 0;width: 300px;height: 300px;background: var(--pace-color);-webkit-transition: -webkit-transform 0.3s;transition: transform 0.3s;-webkit-transform: translateX(100%) translateY(-100%) rotate(45deg);transform: translateX(100%) translateY(-100%) rotate(45deg);pointer-events: none;}.pace.pace-active .pace-activity {-webkit-transform: translateX(50%) translateY(-50%) rotate(45deg);transform: translateX(50%) translateY(-50%) rotate(45deg);}.pace .pace-activity::before,.pace .pace-activity::after {-moz-box-sizing: border-box;box-sizing: border-box;position: absolute;bottom: 30px;left: 50%;display: block;border: 5px solid #fff;border-radius: 50%;content: '';}.pace .pace-activity::before {margin-left: -40px;width: 80px;height: 80px;border-right-color: rgba(0, 0, 0, .2);border-left-color: rgba(0, 0, 0, .2);-webkit-animation: pace-theme-corner-indicator-spin 3s linear infinite;animation: pace-theme-corner-indicator-spin 3s linear infinite;}.pace .pace-activity::after {bottom: 50px;margin-left: -20px;width: 40px;height: 40px;border-top-color: rgba(0, 0, 0, .2);border-bottom-color: rgba(0, 0, 0, .2);-webkit-animation: pace-theme-corner-indicator-spin 1s linear infinite;animation: pace-theme-corner-indicator-spin 1s linear infinite;}@-webkit-keyframes pace-theme-corner-indicator-spin {0% { -webkit-transform: rotate(0deg); }100% { -webkit-transform: rotate(359deg); }}@keyframes pace-theme-corner-indicator-spin {0% { transform: rotate(0deg); }100% { transform: rotate(359deg); }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/series.js"/>
      <url>/js/series.js</url>
      
        <content type="html"><![CDATA[// 为系列文章的标签添加美化效果// 11个美化图标var icons = ["🍉", "🥭", "🍇", "🍈", "🍊", "🍍", "🍓", "🥝", "🥥", "🫐", "🍒"];var list = document  .querySelector(".note, .info, .no-icon, .flat")  .querySelectorAll("li");for (let i = 0; i < list.length; i++) {  const item = list[i];  const anchor = item.querySelector("a");  // 添加美化图标  anchor.textContent = icons[i] + anchor.textContent;  // 添加当前位置  if (anchor.href == window.location.href) {    item.innerHTML = item.innerHTML + " ⬅当前位置🛬";  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>图库</title>
      <link href="/gallery/index.html"/>
      <url>/gallery/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="几张喜欢的图片🥰🥰"><a href="#几张喜欢的图片🥰🥰" class="headerlink" title="几张喜欢的图片🥰🥰"></a>几张喜欢的图片🥰🥰</h2><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"/img/1.jpg","alt":""},{"url":"/img/2.jpg","alt":""},{"url":"/img/3.jpg","alt":""},{"url":"/img/4.jpg","alt":""},{"url":"/img/5.jpg","alt":""},{"url":"/img/6.jpg","alt":""},{"url":"/img/7.jpg","alt":""},{"url":"/img/8.jpg","alt":""},{"url":"/img/9.jpg","alt":""},{"url":"/img/10.jpg","alt":""},{"url":"/img/11.jpg","alt":""},{"url":"/img/12.jpg","alt":""},{"url":"/img/13.jpg","alt":""},{"url":"/img/14.jpg","alt":""},{"url":"/img/15.jpg","alt":""},{"url":"/img/16.jpg","alt":""},{"url":"/img/17.jpg","alt":""},{"url":"/img/18.jpg","alt":""},{"url":"/img/19.jpg","alt":""},{"url":"/img/20.jpg","alt":""},{"url":"/img/21.jpg","alt":""}]</div>      <div class="gallery-items">      </div>    </div><div class="note warning flat"><p>如有侵权，请联系我删除</p></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>视频</title>
      <link href="/movie/index.html"/>
      <url>/movie/index.html</url>
      
        <content type="html"><![CDATA[<p>这里啥也没有🤣👉🤡</p><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=80433022&bvid=BV1GJ411x7h7&cid=137649199&p=1&danmaku=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="我喜欢的几首歌🥰🥰（可惜这里不能放要vip的😫）"><a href="#我喜欢的几首歌🥰🥰（可惜这里不能放要vip的😫）" class="headerlink" title="我喜欢的几首歌🥰🥰（可惜这里不能放要vip的😫）"></a>我喜欢的几首歌🥰🥰（可惜这里不能放要vip的😫）</h2>    <div id="aplayer-FjZlYstM" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="9992949674" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div>]]></content>
      
    </entry>
    
    
  
</search>
