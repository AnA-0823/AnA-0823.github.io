<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>后端开发基础（五）- git</title>
      <link href="/blog/post/j9bw2m38.html"/>
      <url>/blog/post/j9bw2m38.html</url>
      
        <content type="html"><![CDATA[<p>详细见<a href="https://lanal.site/blog/post/1357170t.html">文章</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发基础（五）- git</title>
      <link href="/blog/post/hgcb86h9.html"/>
      <url>/blog/post/hgcb86h9.html</url>
      
        <content type="html"><![CDATA[<p>详细见<a href="https://lanal.site/blog/post/1357170t.html">文章</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/blog/post/1357170t.html"/>
      <url>/blog/post/1357170t.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Git-介绍"><a href="#1-Git-介绍" class="headerlink" title="1. Git 介绍"></a>1. Git 介绍</h2><h3 id="1-1-什么是-Git"><a href="#1-1-什么是-Git" class="headerlink" title="1.1 什么是 Git"></a>1.1 什么是 Git</h3><p>Git 是一个分布式版本控制系统，由 Linux 之父 Linus Torvalds 于 2005 年创建，用于跟踪文件的变化并协调多人共同开发项目。与传统的集中式版本控制系统（如 SVN）不同，Git 允许开发者在本地拥有完整的代码仓库，即使没有网络连接也能进行版本控制操作。</p><h3 id="1-2-Git-的特点"><a href="#1-2-Git-的特点" class="headerlink" title="1.2 Git 的特点"></a>1.2 Git 的特点</h3><ul><li><strong>分布式系统</strong>：每个开发者都拥有完整的代码仓库副本</li><li><strong>高性能</strong>：Git 的设计注重速度和效率，即使处理大型项目也表现优异</li><li><strong>数据完整性</strong>：Git 使用 SHA-1 哈希算法确保数据的完整性</li><li><strong>分支管理</strong>：创建、合并分支操作轻量且快速</li><li><strong>适应性强</strong>：支持各种开发工作流程</li></ul><h3 id="1-3-为什么使用-Git"><a href="#1-3-为什么使用-Git" class="headerlink" title="1.3 为什么使用 Git"></a>1.3 为什么使用 Git</h3><ul><li>可以跟踪代码的历史变更，了解谁在什么时候修改了什么内容</li><li>支持团队协作开发，多人同时进行开发而不互相干扰</li><li>可以回滚到之前的版本，便于错误恢复</li><li>支持代码分支管理，便于功能开发和实验</li><li>代码审查和质量控制</li></ul><h2 id="2-Git-的安装与配置"><a href="#2-Git-的安装与配置" class="headerlink" title="2. Git 的安装与配置"></a>2. Git 的安装与配置</h2><h3 id="2-1-安装-Git"><a href="#2-1-安装-Git" class="headerlink" title="2.1 安装 Git"></a>2.1 安装 Git</h3><p><strong>Windows</strong>:</p><ul><li>从 <a href="https://git-scm.com/">Git 官网</a> 下载安装包并运行</li><li>也可以通过 Chocolatey 包管理器安装：<code>choco install git</code></li></ul><p><strong>macOS</strong>:</p><ul><li>通过 Homebrew 安装：<code>brew install git</code></li><li>也可以从官网下载安装包</li></ul><p><strong>Linux</strong>:</p><ul><li>Debian&#x2F;Ubuntu: <code>sudo apt-get install git</code></li><li>Fedora: <code>sudo dnf install git</code></li><li>CentOS: <code>sudo yum install git</code></li></ul><h3 id="2-2-基本配置"><a href="#2-2-基本配置" class="headerlink" title="2.2 基本配置"></a>2.2 基本配置</h3><p>安装完成后，需要进行一些基本配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置用户名和邮箱</span></span><br><span class="line">git config --global user.name <span class="string">&quot;你的名字&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的邮箱&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认编辑器</span></span><br><span class="line">git config --global core.editor vim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置</span></span><br><span class="line">git config --list</span><br></pre></td></tr></table></figure><h2 id="3-Git-的基本使用"><a href="#3-Git-的基本使用" class="headerlink" title="3. Git 的基本使用"></a>3. Git 的基本使用</h2><h3 id="3-1-创建仓库"><a href="#3-1-创建仓库" class="headerlink" title="3.1 创建仓库"></a>3.1 创建仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化新仓库</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆现有仓库</span></span><br><span class="line">git <span class="built_in">clone</span> &lt;仓库URL&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-基本工作流程"><a href="#3-2-基本工作流程" class="headerlink" title="3.2 基本工作流程"></a>3.2 基本工作流程</h3><p>Git 工作流程通常包括以下步骤：</p><ol><li>修改文件（工作区）</li><li>添加修改到暂存区：<code>git add &lt;文件名&gt;</code> 或 <code>git add .</code></li><li>提交修改到本地仓库：<code>git commit -m &quot;提交信息&quot;</code></li><li>推送到远程仓库：<code>git push &lt;远程仓库名&gt; &lt;分支名&gt;</code></li></ol><h3 id="3-3-常用命令"><a href="#3-3-常用命令" class="headerlink" title="3.3 常用命令"></a>3.3 常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看变更</span></span><br><span class="line">git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文件到暂存区</span></span><br><span class="line">git add &lt;文件名&gt;</span><br><span class="line">git add .  <span class="comment"># 添加所有修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交更改</span></span><br><span class="line">git commit -m <span class="string">&quot;提交信息&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看提交历史</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line">git <span class="built_in">log</span> --oneline  <span class="comment"># 简洁模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销工作区修改</span></span><br><span class="line">git checkout -- &lt;文件名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销暂存区修改</span></span><br><span class="line">git reset HEAD &lt;文件名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">git <span class="built_in">rm</span> &lt;文件名&gt;</span><br></pre></td></tr></table></figure><h2 id="4-Git-核心概念"><a href="#4-Git-核心概念" class="headerlink" title="4. Git 核心概念"></a>4. Git 核心概念</h2><h3 id="4-1-工作区、暂存区与版本库"><a href="#4-1-工作区、暂存区与版本库" class="headerlink" title="4.1 工作区、暂存区与版本库"></a>4.1 工作区、暂存区与版本库</h3><p>Git 管理的项目包含三个主要区域：</p><ul><li><strong>工作区（Working Directory）</strong>：你实际编辑文件的地方</li><li><strong>暂存区（Staging Area）</strong>：临时存储你的改动</li><li><strong>版本库（Repository）</strong>：保存项目的元数据和对象数据库</li></ul><p>工作流程：工作区 → 暂存区（<code>git add</code>）→ 版本库（<code>git commit</code>）</p><h3 id="4-2-分支管理"><a href="#4-2-分支管理" class="headerlink" title="4.2 分支管理"></a>4.2 分支管理</h3><p>分支是 Git 的核心特性之一，允许从主开发线分离出来进行独立工作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建分支</span></span><br><span class="line">git branch &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout &lt;分支名&gt;</span><br><span class="line"><span class="comment"># 或者使用新命令</span></span><br><span class="line">git switch &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并切换分支</span></span><br><span class="line">git checkout -b &lt;分支名&gt;</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">git switch -c &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并分支</span></span><br><span class="line">git merge &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d &lt;分支名&gt;  <span class="comment"># 安全删除</span></span><br><span class="line">git branch -D &lt;分支名&gt;  <span class="comment"># 强制删除</span></span><br></pre></td></tr></table></figure><h3 id="4-3-远程仓库"><a href="#4-3-远程仓库" class="headerlink" title="4.3 远程仓库"></a>4.3 远程仓库</h3><p>远程仓库是托管在网络上的项目版本库，便于团队协作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看远程仓库</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加远程仓库</span></span><br><span class="line">git remote add &lt;简称&gt; &lt;远程URL&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从远程获取数据</span></span><br><span class="line">git fetch &lt;远程名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取并合并远程数据</span></span><br><span class="line">git pull &lt;远程名&gt; &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到远程</span></span><br><span class="line">git push &lt;远程名&gt; &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push &lt;远程名&gt; --delete &lt;分支名&gt;</span><br></pre></td></tr></table></figure><h3 id="4-4-合并与解决冲突"><a href="#4-4-合并与解决冲突" class="headerlink" title="4.4 合并与解决冲突"></a>4.4 合并与解决冲突</h3><p>当多人修改同一文件时可能会产生冲突，需要手动解决。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并分支</span></span><br><span class="line">git merge &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果有冲突，编辑冲突文件</span></span><br><span class="line"><span class="comment"># 冲突部分会用 &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD, =======, &gt;&gt;&gt;&gt;&gt;&gt;&gt; 标记出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决冲突后，添加并提交</span></span><br><span class="line">git add &lt;冲突文件&gt;</span><br><span class="line">git commit -m <span class="string">&quot;解决冲突&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4-5-标签管理"><a href="#4-5-标签管理" class="headerlink" title="4.5 标签管理"></a>4.5 标签管理</h3><p>标签通常用于标记发布版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出标签</span></span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建标签</span></span><br><span class="line">git tag &lt;标签名&gt;  <span class="comment"># 轻量标签</span></span><br><span class="line">git tag -a &lt;标签名&gt; -m <span class="string">&quot;标签信息&quot;</span>  <span class="comment"># 附注标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看标签信息</span></span><br><span class="line">git show &lt;标签名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送标签到远程</span></span><br><span class="line">git push origin &lt;标签名&gt;</span><br><span class="line">git push origin --tags  <span class="comment"># 推送所有标签</span></span><br></pre></td></tr></table></figure><h3 id="4-6-Git-重置与回滚"><a href="#4-6-Git-重置与回滚" class="headerlink" title="4.6 Git 重置与回滚"></a>4.6 Git 重置与回滚</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回滚到指定提交</span></span><br><span class="line">git reset --hard &lt;提交ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新提交来撤销某次提交</span></span><br><span class="line">git revert &lt;提交ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改最近一次提交</span></span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><h2 id="5-Git-高级特性"><a href="#5-Git-高级特性" class="headerlink" title="5. Git 高级特性"></a>5. Git 高级特性</h2><h3 id="5-1-Git-Stash"><a href="#5-1-Git-Stash" class="headerlink" title="5.1 Git Stash"></a>5.1 Git Stash</h3><p>临时保存修改，便于切换分支或拉取代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存当前工作</span></span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看存储列表</span></span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用最近的存储</span></span><br><span class="line">git stash apply</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用并删除存储</span></span><br><span class="line">git stash pop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除存储</span></span><br><span class="line">git stash drop</span><br></pre></td></tr></table></figure><h3 id="5-2-Git-Rebase"><a href="#5-2-Git-Rebase" class="headerlink" title="5.2 Git Rebase"></a>5.2 Git Rebase</h3><p>重新应用提交历史，使其更加简洁。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变基操作</span></span><br><span class="line">git rebase &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交互式变基</span></span><br><span class="line">git rebase -i HEAD~3  <span class="comment"># 重新排列/修改最近3次提交</span></span><br></pre></td></tr></table></figure><h3 id="5-3-Git-Cherry-pick"><a href="#5-3-Git-Cherry-pick" class="headerlink" title="5.3 Git Cherry-pick"></a>5.3 Git Cherry-pick</h3><p>选择指定的提交应用到当前分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick &lt;提交ID&gt;</span><br></pre></td></tr></table></figure><h2 id="6-常用代码托管平台"><a href="#6-常用代码托管平台" class="headerlink" title="6. 常用代码托管平台"></a>6. 常用代码托管平台</h2><h3 id="6-1-GitHub"><a href="#6-1-GitHub" class="headerlink" title="6.1 GitHub"></a>6.1 GitHub</h3><ul><li>全球最大的代码托管平台</li><li>提供免费的公开仓库和付费的私有仓库</li><li>特点：Issues、Pull Requests、Actions（CI&#x2F;CD）、Pages 等</li><li>适合开源项目</li></ul><h3 id="6-2-GitLab"><a href="#6-2-GitLab" class="headerlink" title="6.2 GitLab"></a>6.2 GitLab</h3><ul><li>可以自托管，也提供云服务</li><li>完整的 DevOps 平台</li><li>特点：CI&#x2F;CD、容器注册表、安全扫描等</li><li>适合企业内部使用</li></ul><h3 id="6-3-Bitbucket"><a href="#6-3-Bitbucket" class="headerlink" title="6.3 Bitbucket"></a>6.3 Bitbucket</h3><ul><li>Atlassian 公司产品，与 JIRA、Confluence 等集成</li><li>提供免费的私有仓库（有用户限制）</li><li>特点：Pipelines（CI&#x2F;CD）、与其他 Atlassian 产品集成</li><li>适合小团队和企业</li></ul><h3 id="6-4-Gitee（码云）"><a href="#6-4-Gitee（码云）" class="headerlink" title="6.4 Gitee（码云）"></a>6.4 Gitee（码云）</h3><ul><li>中国本土代码托管平台</li><li>提供免费的私有仓库</li><li>特点：访问速度快，支持中文界面，集成国内支付</li><li>适合中国开发者和企业</li></ul><h2 id="7-Git-最佳实践"><a href="#7-Git-最佳实践" class="headerlink" title="7. Git 最佳实践"></a>7. Git 最佳实践</h2><h3 id="7-1-提交规范"><a href="#7-1-提交规范" class="headerlink" title="7.1 提交规范"></a>7.1 提交规范</h3><ul><li>使用清晰、简洁的提交信息</li><li>每次提交专注于单一变更</li><li>使用约定式提交格式（如：feat: 添加新功能）</li></ul><h3 id="7-2-分支策略"><a href="#7-2-分支策略" class="headerlink" title="7.2 分支策略"></a>7.2 分支策略</h3><ul><li>主分支（master&#x2F;main）：稳定的生产代码</li><li>开发分支（develop）：集成所有开发变更</li><li>功能分支（feature&#x2F;*）：单一功能开发</li><li>发布分支（release&#x2F;*）：准备发布版本</li><li>修复分支（hotfix&#x2F;*）：紧急bug修复</li></ul><h3 id="7-3-团队协作建议"><a href="#7-3-团队协作建议" class="headerlink" title="7.3 团队协作建议"></a>7.3 团队协作建议</h3><ul><li>经常同步远程仓库</li><li>使用 Pull Request&#x2F;Merge Request 进行代码审查</li><li>保持良好的注释和文档</li><li>利用 CI&#x2F;CD 自动化测试和部署</li></ul>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发 </tag>
            
            <tag> 前端开发 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端开发基础（四）- SQL</title>
      <link href="/blog/post/h12hgndk.html"/>
      <url>/blog/post/h12hgndk.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SQL（Structured Query Language），结构化查询语言，用于在关系数据库数据库中存储和处理信息。关系数据库以表格形式存储信息，行和列分别表示不同的数据属性和数据值之间的各种关系。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>SQL 命令可以进行如下分类</p><h3 id="DQL（Data-Query-Language，数据查询语言）"><a href="#DQL（Data-Query-Language，数据查询语言）" class="headerlink" title="DQL（Data Query Language，数据查询语言）"></a>DQL（Data Query Language，数据查询语言）</h3><p>数据查询语言 (DQL) 由用于检索存储在关系数据库中的数据的指令组成。软件应用程序使用 SELECT 命令从 SQL 表中筛选并返回特定结果。</p><h3 id="DML（Data-Manipulation-Language，数据操作语言）"><a href="#DML（Data-Manipulation-Language，数据操作语言）" class="headerlink" title="DML（Data Manipulation Language，数据操作语言）"></a>DML（Data Manipulation Language，数据操作语言）</h3><p>数据操作语言 (DML) 语句用于在关系数据库中写入新信息或修改现有记录。例如，应用程序使用 INSERT 命令在数据库中存储新记录。</p><h3 id="DDL（Data-DefINition-Language，数据定义语言）"><a href="#DDL（Data-DefINition-Language，数据定义语言）" class="headerlink" title="DDL（Data DefINition Language，数据定义语言）"></a>DDL（Data DefINition Language，数据定义语言）</h3><p>数据定义语言 (DDL) 是指设计数据库结构的 SQL 命令。数据库工程师使用 DDL 根据业务需求创建和修改数据库对象。例如，数据库工程师可以使用 CREATE 命令创建数据库对象，如表、视图和索引。</p><h3 id="TCL（Transaction-Control-Language，事物控制语言）"><a href="#TCL（Transaction-Control-Language，事物控制语言）" class="headerlink" title="TCL（Transaction Control Language，事物控制语言）"></a>TCL（Transaction Control Language，事物控制语言）</h3><p>关系引擎使用事务控制语言 (TCL) 自动进行数据库更改。例如，数据库使用 ROLLBACK 命令撤消错误的事务。</p><h3 id="DCL（Data-Control-Language，数据控制语言）"><a href="#DCL（Data-Control-Language，数据控制语言）" class="headerlink" title="DCL（Data Control Language，数据控制语言）"></a>DCL（Data Control Language，数据控制语言）</h3><p>数据库管理员使用数据控制语言 (DCL) 来管理或授权其他用户的数据库访问权限。例如，数据库管理员可以使用 GRANT 命令来允许某些应用程序操作一个或多个表。</p><h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><p>核心语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> 条件</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组列</span><br><span class="line"><span class="keyword">HAVING</span> 聚合条件</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序列 <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span></span><br><span class="line">LIMIT 数量;</span><br></pre></td></tr></table></figure><h3 id="SELECT-基本查询"><a href="#SELECT-基本查询" class="headerlink" title="SELECT 基本查询"></a>SELECT 基本查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students;</span><br><span class="line"><span class="keyword">SELECT</span> name, age <span class="keyword">FROM</span> students;</span><br><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">AS</span> 姓名, age <span class="keyword">AS</span> 年龄 <span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><ul><li><code>*</code>：选择所有列</li><li>可用<code>AS</code>为字段取别名</li></ul><h3 id="DISTINCT-去重"><a href="#DISTINCT-去重" class="headerlink" title="DISTINCT 去重"></a>DISTINCT 去重</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> city <span class="keyword">FROM</span> customers;</span><br></pre></td></tr></table></figure><p>去除重复值，只显示唯一记录</p><h3 id="WHERE-条件筛选"><a href="#WHERE-条件筛选" class="headerlink" title="WHERE 条件筛选"></a>WHERE 条件筛选</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> price <span class="operator">&gt;</span> <span class="number">100</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department <span class="operator">=</span> <span class="string">&#x27;HR&#x27;</span> <span class="keyword">AND</span> salary <span class="keyword">BETWEEN</span> <span class="number">4000</span> <span class="keyword">AND</span> <span class="number">7000</span>;</span><br></pre></td></tr></table></figure><p>常见运算符：</p><ul><li>比较运算：&#x3D;, &lt;&gt;, &gt;, &lt;, &gt;&#x3D;, &lt;&#x3D;</li><li>范围运算：BETWEEN x AND y</li><li>集合判断：IN (…)</li><li>模糊匹配：LIKE ‘a%’, LIKE ‘%b’, LIKE ‘_a%’</li><li>空值判断：IS NULL, is NOT NULL</li><li>逻辑连接：AND, OR, NOT</li></ul><p>通配符一般和 LIKE 一起使用：</p><ul><li>%：代表零或多个字符</li><li>_：代表单个字符</li><li>[charlist]：代表在括号中的单个字符*</li><li>[^charlist]：代表不在括号中的任何单一字符*</li><li>[char-char]：代表在范围中的单个字符*</li><li>{}：表示任何转义字符</li></ul><p>*，不支持在 PostgreSQL 和 MySQL 数据库中。**，仅支持在 Oracle 数据库中。</p><h3 id="ORDER-BY-排序"><a href="#ORDER-BY-排序" class="headerlink" title="ORDER BY 排序"></a>ORDER BY 排序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, age <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><ul><li>默认升序：ASC</li><li>降序：DESC</li></ul><h3 id="限制返回数量"><a href="#限制返回数量" class="headerlink" title="限制返回数量"></a>限制返回数量</h3><p>不同数据库系统对这个功能的实现不同：</p><p>SQL Server &#x2F; MS Access 使用 top：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP number<span class="operator">|</span><span class="keyword">percent</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p>MySQL 使用 LIMIT：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span></span><br><span class="line">LIMIT number <span class="keyword">OFFSET</span> number;</span><br></pre></td></tr></table></figure><p>Oracle 12 使用 fetch first：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column_name(s)</span><br><span class="line"><span class="keyword">FETCH</span> <span class="keyword">FIRST</span> number <span class="keyword">ROWS</span> <span class="keyword">ONLY</span>;</span><br></pre></td></tr></table></figure><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>COUNT(*)</code></td><td>统计记录数量</td></tr><tr><td><code>SUM(column)</code></td><td>求和</td></tr><tr><td><code>AVG(column)</code></td><td>平均值</td></tr><tr><td><code>MAX(column)</code></td><td>最大值</td></tr><tr><td><code>MIN(column)</code></td><td>最小值</td></tr></tbody></table><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> orders;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> city) <span class="keyword">FROM</span> customers; <span class="comment">-- 忽略重复项</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(score) <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> class <span class="operator">=</span> <span class="string">&#x27;三班&#x27;</span>;</span><br></pre></td></tr></table></figure><p>聚合函数忽略空值，除了 COUNT()。COUNT(*)不忽略空值，COUNT(column)忽略空值。</p><h3 id="GROUP-BY-分组聚合"><a href="#GROUP-BY-分组聚合" class="headerlink" title="GROUP BY 分组聚合"></a>GROUP BY 分组聚合</h3><p>配合聚合函数使用，将查询结果按一列或者多列的值分组。</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> gender, <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> emp_user</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> gender;</span><br></pre></td></tr></table></figure><h3 id="HAVING-条件过滤（用于聚合后的结果）"><a href="#HAVING-条件过滤（用于聚合后的结果）" class="headerlink" title="HAVING 条件过滤（用于聚合后的结果）"></a>HAVING 条件过滤（用于聚合后的结果）</h3><p>HAVING 用于组的过滤，WHERE 用于行的过滤。</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> gender, <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> emp_user</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> gender</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="JOIN-连接查询"><a href="#JOIN-连接查询" class="headerlink" title="JOIN 连接查询"></a>JOIN 连接查询</h3><p>多种连接查询</p><ul><li>INNER JOIN：内连接，取交集</li><li>LEFT JOIN（LEFT OUTER JOIN）：左连接，取左集和交集</li><li>RIGHT JOIN（RIGHT OUTER JOIN）：右连接，取右集和交集</li><li>FULL JOIN（FULL OUTER JOIN）：全连接，取左右集和交集</li></ul><p>有以下示例数据：</p><p>Product</p><table><thead><tr><th>ProductID</th><th>ProductName</th><th>CategoryID</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>1</td></tr><tr><td>2</td><td>B</td><td>1</td></tr><tr><td>3</td><td>C</td><td>2</td></tr><tr><td>4</td><td>D</td><td>4</td></tr></tbody></table><p>Category</p><table><thead><tr><th>CategoryID</th><th>CategoryName</th></tr></thead><tbody><tr><td>1</td><td>A</td></tr><tr><td>2</td><td>B</td></tr><tr><td>3</td><td>C</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ProductID, ProductName, CategoryName</span><br><span class="line"><span class="keyword">FROM</span> Product</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Category <span class="keyword">ON</span> Product.CategoryID <span class="operator">=</span> Category.CategoryID;</span><br></pre></td></tr></table></figure><p>结果：</p><table><thead><tr><th>ProductID</th><th>ProductName</th><th>CategoryName</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>A</td></tr><tr><td>2</td><td>B</td><td>A</td></tr><tr><td>3</td><td>C</td><td>B</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ProductID, ProductName, CategoryName</span><br><span class="line"><span class="keyword">FROM</span> Product</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Category <span class="keyword">ON</span> Product.CategoryID <span class="operator">=</span> Category.CategoryID;</span><br></pre></td></tr></table></figure><p>结果：</p><table><thead><tr><th>ProductID</th><th>ProductName</th><th>CategoryName</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>A</td></tr><tr><td>2</td><td>B</td><td>A</td></tr><tr><td>3</td><td>C</td><td>B</td></tr><tr><td>4</td><td>D</td><td>NULL</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ProductID, ProductName, CategoryName</span><br><span class="line"><span class="keyword">FROM</span> Product</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> Category <span class="keyword">ON</span> Product.CategoryID <span class="operator">=</span> Category.CategoryID;</span><br></pre></td></tr></table></figure><p>结果：</p><table><thead><tr><th>ProductID</th><th>ProductName</th><th>CategoryName</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>A</td></tr><tr><td>2</td><td>B</td><td>A</td></tr><tr><td>3</td><td>C</td><td>B</td></tr><tr><td>NULL</td><td>NULL</td><td>C</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ProductID, ProductName, CategoryName</span><br><span class="line"><span class="keyword">FROM</span> Product</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">JOIN</span> Category <span class="keyword">ON</span> Product.CategoryID <span class="operator">=</span> Category.CategoryID;</span><br></pre></td></tr></table></figure><p>结果：</p><table><thead><tr><th>ProductID</th><th>ProductName</th><th>CategoryName</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>A</td></tr><tr><td>2</td><td>B</td><td>A</td></tr><tr><td>3</td><td>C</td><td>B</td></tr><tr><td>4</td><td>D</td><td>NULL</td></tr><tr><td>NULL</td><td>NULL</td><td>C</td></tr></tbody></table><p>还有一个比较特殊，SELF JOIN，子连接，用于将一张表和自身进行连接</p><p>语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1 T1, table1 T2</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p>比如以下例子用于举出同一城市的客户之间的连接方式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.CustomerName <span class="keyword">AS</span> CustomerName1, B.CustomerName <span class="keyword">AS</span> CustomerName2, A.City</span><br><span class="line"><span class="keyword">FROM</span> Customers A, Customers B</span><br><span class="line"><span class="keyword">WHERE</span> A.CustomerID <span class="operator">&lt;&gt;</span> B.CustomerID</span><br><span class="line"><span class="keyword">AND</span> A.City <span class="operator">=</span> B.City</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> A.City;</span><br></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>嵌套查询，可将内层查询（子查询）的结果用于外层查询，子查询可以在表中，以下运算符常用于连接子查询：</p><ul><li>IN：存在集合中为 TRUE</li><li>EXISTS：如果子查询返回一个或多个，则为 TRUE，否则为 FALSE</li><li>ALL：全部，比如&gt;ALL()，大于所有子查询</li><li>ANY：任何，比如&#x3D;ANY()，等于任意子查询</li></ul><h3 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h3><p>集合操作有以下几种：</p><ul><li>UNION：并</li><li>INTERSECT：交</li><li>EXCEPT：差</li></ul><p>进行集合操作要求两个集合的列数相同，每列对应项的数据类型也要相同。</p><p>UNION 会默认选择不同的值，如果要选择重复的值使用 UNION ALL。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table2;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table2;</span><br></pre></td></tr></table></figure><h3 id="CASE-表达式"><a href="#CASE-表达式" class="headerlink" title="CASE 表达式"></a>CASE 表达式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CASE</span></span><br><span class="line">    <span class="keyword">WHEN</span> condition1 <span class="keyword">THEN</span> result1</span><br><span class="line">    <span class="keyword">WHEN</span> condition2 <span class="keyword">THEN</span> result2</span><br><span class="line">    <span class="keyword">WHEN</span> conditionN <span class="keyword">THEN</span> resultN</span><br><span class="line">    <span class="keyword">ELSE</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name,</span><br><span class="line">  <span class="keyword">CASE</span></span><br><span class="line">    <span class="keyword">WHEN</span> score <span class="operator">&gt;=</span> <span class="number">90</span> <span class="keyword">THEN</span> <span class="string">&#x27;优秀&#x27;</span></span><br><span class="line">    <span class="keyword">WHEN</span> score <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">THEN</span> <span class="string">&#x27;及格&#x27;</span></span><br><span class="line">    <span class="keyword">ELSE</span> <span class="string">&#x27;不及格&#x27;</span></span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">AS</span> 等级</span><br><span class="line"><span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><h3 id="INSERT-插入数据"><a href="#INSERT-插入数据" class="headerlink" title="INSERT 插入数据"></a>INSERT 插入数据</h3><p>插入完整一行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (id, name, age)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Alice&#x27;</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>插入部分列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (name, age)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;Bob&#x27;</span>, <span class="number">22</span>);  <span class="comment">-- id 会自动生成（若设置了自增）</span></span><br></pre></td></tr></table></figure><p>一次插入多行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (name, age)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">&#x27;Tom&#x27;</span>, <span class="number">21</span>),</span><br><span class="line">  (<span class="string">&#x27;Jerry&#x27;</span>, <span class="number">19</span>);</span><br></pre></td></tr></table></figure><p>从查询插入（常用于表复制）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> graduated_students (name, age)</span><br><span class="line"><span class="keyword">SELECT</span> name, age <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">25</span>;</span><br></pre></td></tr></table></figure><h3 id="UPDATE-更新数据"><a href="#UPDATE-更新数据" class="headerlink" title="UPDATE 更新数据"></a>UPDATE 更新数据</h3><p>修改单列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> students</span><br><span class="line"><span class="keyword">SET</span> age <span class="operator">=</span> <span class="number">21</span></span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Alice&#x27;</span>;</span><br></pre></td></tr></table></figure><p>修改多列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> students</span><br><span class="line"><span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;Tommy&#x27;</span>, age <span class="operator">=</span> <span class="number">23</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>没有 WHERE 会全表更新</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> age <span class="operator">=</span> <span class="number">18</span>;  <span class="comment">-- 所有学生年龄都变成18</span></span><br></pre></td></tr></table></figure><h3 id="DELETE-删除数据"><a href="#DELETE-删除数据" class="headerlink" title="DELETE 删除数据"></a>DELETE 删除数据</h3><p>删除指定记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>删除多条记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> age <span class="operator">&lt;</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure><p>删除所有记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><h3 id="SELECT-INTO-选择插入"><a href="#SELECT-INTO-选择插入" class="headerlink" title="SELECT INTO 选择插入"></a>SELECT INTO 选择插入</h3><p>将一个表中的数据复制到新表中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, column3, ...</span><br><span class="line"><span class="keyword">INTO</span> newtable [<span class="keyword">IN</span> externaldb]</span><br><span class="line"><span class="keyword">FROM</span> oldtable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p>使用<code>AS</code>可以给列重命名。<br>使用以下命名可以创建一个旧表结构的空表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">INTO</span> newtable</span><br><span class="line"><span class="keyword">FROM</span> oldtable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="INSERT-INTO-SELECT"><a href="#INSERT-INTO-SELECT" class="headerlink" title="INSERT INTO SELECT"></a>INSERT INTO SELECT</h3><p>将一个表中的数据插入到另一个表中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table2 (column1, column2, column3, ...)</span><br><span class="line"><span class="keyword">SELECT</span> column1, column2, column3, ...</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ol><li>创建数据库</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE databasename;</span><br></pre></td></tr></table></figure><ol start="2"><li>删除数据库</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE databasename;</span><br></pre></td></tr></table></figure><ol start="3"><li>备份数据库</li></ol><p>完整备份数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BACKUP DATABASE databasename</span><br><span class="line"><span class="keyword">TO</span> DISK <span class="operator">=</span> <span class="string">&#x27;filepath&#x27;</span>;</span><br></pre></td></tr></table></figure><p>只备份更改部分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BACKUP DATABASE databasename</span><br><span class="line"><span class="keyword">TO</span> DISK <span class="operator">=</span> <span class="string">&#x27;filepath&#x27;</span></span><br><span class="line"><span class="keyword">WITH</span> DIFFERENTIAL;</span><br></pre></td></tr></table></figure><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><ol><li>创建表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name (</span><br><span class="line">    column1 datatype,</span><br><span class="line">    column2 datatype,</span><br><span class="line">    column3 datatype,</span><br><span class="line">   ....</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>使用另一个表创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> new_table_name <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> column1, column2,...</span><br><span class="line">    <span class="keyword">FROM</span> existing_table_name</span><br><span class="line">    <span class="keyword">WHERE</span> ....;</span><br></pre></td></tr></table></figure><ol start="2"><li>删除表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name;</span><br></pre></td></tr></table></figure><ol start="3"><li>清空表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> table_name;</span><br></pre></td></tr></table></figure><ol start="4"><li>修改表</li></ol><p>添加列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">COLUMN</span> column_name datatype;</span><br></pre></td></tr></table></figure><p>删除列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> column_name;</span><br></pre></td></tr></table></figure><p>重命名列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line">RENAME <span class="keyword">COLUMN</span> old_name <span class="keyword">to</span> new_name;</span><br></pre></td></tr></table></figure><p>修改列数据类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line">MODIFY <span class="keyword">COLUMN</span> column_name datatype;</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>以 MYSQL 8.0 为例</p><p>字符串数据类型</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>CHAR(size)</td><td>定长字符串，以字符为单位，size 的范围为 0 到 255</td></tr><tr><td>VARCHAR(size)</td><td>变长字符串，以字符为单位，size 的范围为 0 到 65,535</td></tr><tr><td>BINARY(size)</td><td>定长二进制字符串，以字节为单位，等同于 CHAR()</td></tr><tr><td>VARBINARY(size)</td><td>变长二进制字符串，以字节为单位，等同于 VARCHAR()</td></tr><tr><td>TEXT(size)</td><td>字符串，单位是字符，size 的范围为 0 到 65,535</td></tr><tr><td>BLOB(size)</td><td>Binary Large Objects，二进制大对象，单位是字节，size 的范围为 0 到 65,535</td></tr><tr><td>TINYTEXT</td><td>最大为 255 个字符</td></tr><tr><td>TINYBLOB</td><td>最大为 255 个字节</td></tr><tr><td>MEDIUMTEXT</td><td>最大为 16,777,215 个字符</td></tr><tr><td>MEDIUMBLOB</td><td>最大为 16,777,215 个字节</td></tr><tr><td>LONGTEXT</td><td>最大为 4,294,967,295 个字符</td></tr><tr><td>LONGBLOB</td><td>最大为 4,294,967,295 个字节</td></tr></tbody></table><p>数字数据类型</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>BIT(size)</td><td>位值整形，size 为 1 到 64</td></tr><tr><td>TINYINT</td><td>迷你整形，有符号范围为 -128 到 127，无符号范围为 0 到 255，</td></tr><tr><td>BOOL</td><td>布尔类型，0 为 false，非 0 为 true</td></tr><tr><td>BOOLEAN</td><td>同 BOOL</td></tr><tr><td>SMALLINT</td><td>小整形，有符号范围为 -32768 到 32767，无符号范围为 0 到 65535</td></tr><tr><td>MEDIUMINT</td><td>中整形 ，有符号范围为 -8388608 到 8388607，无符号范围为 0 到 16777215</td></tr><tr><td>INT</td><td>整形，有符号范围为 -2147483648 到 2147483647，无符号范围为 0 到 4294967295</td></tr><tr><td>INTEGER</td><td>同 INT</td></tr><tr><td>BIGINT</td><td>大整形 ，有符号范围为 -9223372036854775808 到 9223372036854775807，无符号范围为 0 到 18446744073709551615</td></tr><tr><td>FLOAT</td><td>单精度浮点，取值范围为(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td></tr><tr><td>DOUBLE</td><td>双精度浮点，取值范围为 (-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td></tr><tr><td>DECIMAL(size, d)</td><td>总位数由 size 指定，小数点后的位数由 d 参数指定，size 的最大位数为 65，d 的最大位数为 30，size 的默认值为 10，d 的默认值为 0</td></tr><tr><td>DEC(size, d)</td><td>同 DECIMAL</td></tr></tbody></table><p>所有数字数据类型都可以有一个额外的选项：UNSIGNED 或 ZEROFILL。如果添加了 UNSIGNED 或者 ZEROFILL，MySQL 将不允许该列使用负值。</p><p>日期时间数据类型</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>DATE</td><td>日期，格式为 YYYY-MM-DD，范围为 1000-01-01 到 9999-12-31</td></tr><tr><td>DATETIME(fsp)</td><td>日期时间，格式为 YYYY-MM-DD hh:mm:ss，范围为 1000-01-01 00:00:00 到 9999-12-31 23:59:59</td></tr><tr><td>TIMESTAMP(fsp)</td><td>Unix 时间戳，格式为 YYYY-MM-DD hh:mm:ss，范围为 1970-01-01 00:00:01 UTC 到 2038-01-09 03:14:07 UTC</td></tr><tr><td>TIME(fsp)</td><td>时间，格式为 hh:mm:ss，范围为 -838:59:59 到 838:59:59</td></tr><tr><td>YEAR</td><td>四字年份，范围为 1901 到 2155，以及 0000</td></tr></tbody></table><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name (</span><br><span class="line">    column1 datatype <span class="keyword">constraint</span>,</span><br><span class="line">    column2 datatype <span class="keyword">constraint</span>,</span><br><span class="line">    column3 datatype <span class="keyword">constraint</span>,</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">constraint</span> constraint_name1 <span class="keyword">constraint</span>(column1, column2)</span><br><span class="line">    <span class="keyword">constraint</span> constraint_name2 <span class="keyword">constraint</span>(column1, column2)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>常用约束：</p><table><thead><tr><th>约束名称</th><th>描述</th></tr></thead><tbody><tr><td>NOT NULL</td><td>非空，确保列不能具有 NULL 值</td></tr><tr><td>UNIQUE</td><td>唯一，确保列中的所有值都不同</td></tr><tr><td>PRIMARY KEY</td><td>主键，组合 NOT NULL 和 UNIQUE，表中数据的唯一标识，每张表只能有一个主键约束</td></tr><tr><td>FOREIGN KEY</td><td>外键，防止表之间的链接被破坏</td></tr><tr><td>CHECK</td><td>检查，确保列中的值满足特定条件</td></tr><tr><td>DEFAULT</td><td>默认，为列设置默认值</td></tr><tr><td>AUTO_INCREMENT</td><td>自增，为列设置自增的值</td></tr></tbody></table><p>为已有列添加约束：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line">MODIFY <span class="keyword">COLUMN</span> Age <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p>为已有的表添加约束：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tabel_name</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> constraint_name <span class="keyword">constraint</span>(column1, column2);</span><br></pre></td></tr></table></figure><p>为已有的表删除约束：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tabel_name</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> constraint_name</span><br></pre></td></tr></table></figure><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>创建允许重复值的索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX index_name</span><br><span class="line"><span class="keyword">ON</span> table_name (column1, column2, ...);</span><br></pre></td></tr></table></figure><p>创建不允许重复值的索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX index_name</span><br><span class="line"><span class="keyword">ON</span> table_name (column1, column2, ...);</span><br></pre></td></tr></table></figure><p>删除索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX index_name <span class="keyword">ON</span> table_name;</span><br></pre></td></tr></table></figure><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>视图是基于 SQL 语句结果集的虚拟表，可以对基础的表进一步封装。</p><p>创建视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_name <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p>修改视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> view_name <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> view_name <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p>删除视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> view_name;</span><br></pre></td></tr></table></figure><p>对表中的数据进行增删改都会对原表的数据进行修改，如果视图是原表聚合后的结果则无法更改。</p><h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><table><thead><tr><th>命令</th><th>含义</th><th>功能说明</th></tr></thead><tbody><tr><td><code>GRANT</code></td><td>授权</td><td>赋予用户某些操作权限</td></tr><tr><td><code>REVOKE</code></td><td>撤权</td><td>撤销某用户的权限</td></tr></tbody></table><h3 id="GRANT-授权"><a href="#GRANT-授权" class="headerlink" title="GRANT 授权"></a>GRANT 授权</h3><ol><li>基本语法</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 数据库对象 <span class="keyword">TO</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机&#x27;</span> [<span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION];</span><br></pre></td></tr></table></figure><ul><li>权限列表：如 SELECT, INSERT, UPDATE, DELETE, ALL</li><li>‘用户名‘@’主机’：表示具体用户，如 ‘tom‘@’localhost’</li><li>WITH GRANT OPTION：允许该用户再授权给别人（谨慎使用）</li></ul><ol start="2"><li>示例</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给用户 tom 授予对 test_db.students 表的查询权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> test_db.students <span class="keyword">TO</span> <span class="string">&#x27;tom&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给用户 alice 所有权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> test_db.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;alice&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 允许 tom 再授权给别人</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> test_db.students <span class="keyword">TO</span> <span class="string">&#x27;tom&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br></pre></td></tr></table></figure><h3 id="REVOKE-撤权"><a href="#REVOKE-撤权" class="headerlink" title="REVOKE 撤权"></a>REVOKE 撤权</h3><ol><li>基本语法</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 数据库对象 <span class="keyword">FROM</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>示例</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 撤销 tom 对 students 表的查询权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> test_db.students <span class="keyword">FROM</span> <span class="string">&#x27;tom&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 撤销 alice 的所有权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> test_db.<span class="operator">*</span> <span class="keyword">FROM</span> <span class="string">&#x27;alice&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="权限种类"><a href="#权限种类" class="headerlink" title="权限种类"></a>权限种类</h3><table><thead><tr><th>权限名称</th><th>说明</th></tr></thead><tbody><tr><td><code>SELECT</code></td><td>查询权限</td></tr><tr><td><code>INSERT</code></td><td>插入记录权限</td></tr><tr><td><code>UPDATE</code></td><td>修改记录权限</td></tr><tr><td><code>DELETE</code></td><td>删除记录权限</td></tr><tr><td><code>CREATE</code></td><td>创建新表或数据库</td></tr><tr><td><code>DROP</code></td><td>删除表或数据库</td></tr><tr><td><code>ALTER</code></td><td>修改表结构</td></tr><tr><td><code>INDEX</code></td><td>创建&#x2F;删除索引</td></tr><tr><td><code>ALL PRIVILEGES</code></td><td>所有权限</td></tr></tbody></table><p>权限可授予在不同级别：全库级（db.*）、表级（db.table）、列级（db.table(column)）</p><h3 id="用户与权限管理"><a href="#用户与权限管理" class="headerlink" title="用户与权限管理"></a>用户与权限管理</h3><ol><li>创建用户</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;tom&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>删除用户</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;tom&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>查看权限</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;tom&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="4"><li>查看所有用户</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span>, host <span class="keyword">FROM</span> mysql.user;</span><br></pre></td></tr></table></figure><h2 id="TCL"><a href="#TCL" class="headerlink" title="TCL"></a>TCL</h2><table><thead><tr><th>TCL 语句</th><th>含义</th><th>作用</th></tr></thead><tbody><tr><td><code>BEGIN</code> &#x2F; <code>START TRANSACTION</code></td><td>开始一个事务</td><td>显式启动事务（MySQL 默认自动提交）</td></tr><tr><td><code>COMMIT</code></td><td>提交事务</td><td>所有更改永久保存</td></tr><tr><td><code>ROLLBACK</code></td><td>回滚事务</td><td>撤销自上次提交后的所有更改</td></tr><tr><td><code>SAVEPOINT</code></td><td>设置保存点</td><td>用于回滚到某个位置</td></tr><tr><td><code>ROLLBACK TO SAVEPOINT</code></td><td>回滚到保存点</td><td>撤销到指定保存点后的更改</td></tr><tr><td><code>SET AUTOCOMMIT</code></td><td>设置自动提交</td><td>控制是否自动提交事务</td></tr></tbody></table><p>事务主要配合 UPDATE、INSERT、DELETE 等 DML 操作使用，DDL（如 CREATE&#x2F;DROP）无法回，比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;  <span class="comment">-- 开始事务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> users <span class="keyword">SET</span> age <span class="operator">=</span> <span class="number">25</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SAVEPOINT</span> sp1;  <span class="comment">-- 保存点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> users <span class="keyword">SET</span> age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> sp1;  <span class="comment">-- 只撤销第二次更新</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;  <span class="comment">-- 提交事务</span></span><br></pre></td></tr></table></figure><h3 id="事务的四大特征（ACID）"><a href="#事务的四大特征（ACID）" class="headerlink" title="事务的四大特征（ACID）"></a>事务的四大特征（ACID）</h3><table><thead><tr><th>特性</th><th>含义</th><th>说明</th></tr></thead><tbody><tr><td>A - 原子性（Atomicity）</td><td>要么都执行，要么都不执行</td><td>一致完成或完全失败</td></tr><tr><td>C - 一致性（Consistency）</td><td>数据保持一致</td><td>操作前后都符合约束规则</td></tr><tr><td>I - 隔离性（Isolation）</td><td>多事务互不干扰</td><td>防止读&#x2F;写冲突</td></tr><tr><td>D - 持久性（Durability）</td><td>提交后永久保存</td><td>即使断电也保留更改</td></tr></tbody></table><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>并发事务会存在以下问题：</p><ul><li>脏读：当前事务(A)中可以读到其他事务(B)未提交的数据（脏数据）</li><li>不可重复读：在事务A中先后两次读取同一个数据，两次读取的结果不一样</li><li>幻读：在事务A中按照某个条件先后两次查询数据库，两次查询结果的条数不同</li></ul><p>SQL 标准定义了 4 种隔离级别</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>说明</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>✅</td><td>✅</td><td>✅</td><td>最低级别，可能看到未提交数据</td></tr><tr><td>READ COMMITTED</td><td>❌</td><td>✅</td><td>✅</td><td>Oracle 默认级别</td></tr><tr><td>REPEATABLE READ</td><td>❌</td><td>❌</td><td>✅</td><td>MySQL 默认级别</td></tr><tr><td>SERIALIZABLE</td><td>❌</td><td>❌</td><td>❌</td><td>最严格，但效率最低</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</span><br><span class="line"><span class="keyword">SET</span> TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br><span class="line"><span class="keyword">SET</span> TRANSACTION ISOLATION LEVEL REPEATABLE READ;</span><br><span class="line"><span class="keyword">SET</span> TRANSACTION ISOLATION LEVEL SERIALIZABLE;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发基础（三）- javascript</title>
      <link href="/blog/post/8668713v.html"/>
      <url>/blog/post/8668713v.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><h3 id="前端开发导航-🌏"><a href="#前端开发导航-🌏" class="headerlink" title="前端开发导航 🌏"></a>前端开发导航 🌏</h3><ol><li><a href="/blog/post/x766a8l8.html" title="前端开发基础（一）- 学习路线">前端开发基础（一）- 学习路线</a></li><li><a href="/blog/post/w2d41vf2.html" title="前端开发基础（二）- html">前端开发基础（二）- html</a></li><li><a href="/blog/post/477194v7.html" title="前端开发基础（四）- typescript">前端开发基础（四）- typescript</a></li><li><a href="/blog/post/xy8v73x3.html" title="前端开发基础（三）- css">前端开发基础（三）- css</a></li><li><a href="/blog/post/8668713v.html" title="前端开发基础（三）- javascript">前端开发基础（三）- javascript</a></li></ol></div><h2 id="JavaScript-简介"><a href="#JavaScript-简介" class="headerlink" title="JavaScript 简介"></a>JavaScript 简介</h2><p>JavaScript（JS）是一种具有函数优先特性的轻量级、解释型或者说即时编译型的编程语言。在 Web 网页中，JavaScript 代码可以修改 HTML 内容、样式和结构，响应用户操作，以及与服务器进行交互。除此之外，JavaScript 还被应用到了很多非浏览器环境中，例如 Node.js。进一步说，JavaScript 是一种基于原型、多范式、单线程的动态语言，并且支持面向对象、命令式和声明式（如函数式编程）风格。</p><h2 id="JavaScript-基础"><a href="#JavaScript-基础" class="headerlink" title="JavaScript 基础"></a>JavaScript 基础</h2><h3 id="变量和数据类型"><a href="#变量和数据类型" class="headerlink" title="变量和数据类型"></a>变量和数据类型</h3><p>JavaScript 中有三种声明变量的方式：<code>var</code>、<code>let</code> 和 <code>const</code>。</p><h4 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var - 函数作用域，可重复声明，可修改</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;JavaScript&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;JS&quot;</span>; <span class="comment">// 可以重复声明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let - 块级作用域，不可重复声明，可修改</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">25</span>;</span><br><span class="line">age = <span class="number">26</span>; <span class="comment">// 可以修改值</span></span><br><span class="line"><span class="comment">// let age = 30; // 错误：不能重复声明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const - 块级作用域，不可重复声明，不可修改(但对象的属性可以修改)</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14159</span>;</span><br><span class="line"><span class="comment">// PI = 3; // 错误：不能修改常量值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const对象的属性可以修改</span></span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;</span><br><span class="line">person.<span class="property">age</span> = <span class="number">31</span>; <span class="comment">// 可以修改对象的属性</span></span><br><span class="line"><span class="comment">// person = &#123;&#125;; // 错误：不能重新赋值整个对象</span></span><br></pre></td></tr></table></figure><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>JavaScript 有8种数据类型：</p><ol><li><p>基本数据类型（原始类型）：</p><ul><li>String（字符串）</li><li>Number（数字）</li><li>Boolean（布尔）</li><li>Undefined（未定义）</li><li>Null（空）</li><li>Symbol（符号，ES6新增）</li><li>BigInt（大整数，ES2020新增）</li></ul></li><li><p>引用数据类型：</p><ul><li>Object（对象）：包括普通对象、数组、函数等</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String - 字符串</span></span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&#x27;World&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> str3 = <span class="string">`Template: <span class="subst">$&#123;str1&#125;</span> <span class="subst">$&#123;str2&#125;</span>`</span>; <span class="comment">// 模板字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Number - 数字</span></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="number">100</span>;        <span class="comment">// 整数</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">3.14</span>;       <span class="comment">// 浮点数</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="number">0xff</span>;       <span class="comment">// 十六进制</span></span><br><span class="line"><span class="keyword">let</span> num4 = <span class="number">3e8</span>;        <span class="comment">// 科学计数法</span></span><br><span class="line"><span class="keyword">let</span> num5 = <span class="title class_">NaN</span>;        <span class="comment">// 非数字</span></span><br><span class="line"><span class="keyword">let</span> num6 = <span class="title class_">Infinity</span>;   <span class="comment">// 无穷大</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Boolean - 布尔值</span></span><br><span class="line"><span class="keyword">let</span> isActive = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> isLoading = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Undefined - 未定义</span></span><br><span class="line"><span class="keyword">let</span> unknown;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(unknown); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Null - 空值</span></span><br><span class="line"><span class="keyword">let</span> empty = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Symbol - 唯一标识符</span></span><br><span class="line"><span class="keyword">let</span> sym1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sym1 === sym2); <span class="comment">// false，即使描述相同也是唯一的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// BigInt - 大整数</span></span><br><span class="line"><span class="keyword">let</span> bigNumber = <span class="number">9007199254740991n</span>; <span class="comment">// 用n结尾表示BigInt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object - 对象</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">isStudent</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">greet</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`你好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array - 数组(也是Object的一种)</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;红&quot;</span>, <span class="string">&quot;绿&quot;</span>, <span class="string">&quot;蓝&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> mixed = [<span class="number">1</span>, <span class="string">&quot;text&quot;</span>, <span class="literal">true</span>, <span class="literal">null</span>, &#123;<span class="attr">key</span>: <span class="string">&quot;value&quot;</span>&#125;, [<span class="number">1</span>, <span class="number">2</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function - 函数(也是Object的一种)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">a, b</span>) =&gt; a * b;</span><br></pre></td></tr></table></figure><h4 id="类型检查与转换"><a href="#类型检查与转换" class="headerlink" title="类型检查与转换"></a>类型检查与转换</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用typeof检查类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&quot;Hello&quot;</span>);     <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">123</span>);         <span class="comment">// &quot;number&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>);        <span class="comment">// &quot;boolean&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>);   <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>);        <span class="comment">// &quot;object&quot; (这是JS的一个历史遗留bug)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123;&#125;);          <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> []);          <span class="comment">// &quot;object&quot; (数组也是对象)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;); <span class="comment">// &quot;function&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型转换</span></span><br><span class="line"><span class="comment">// 显式转换</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="title class_">Number</span>(<span class="string">&quot;123&quot;</span>);     <span class="comment">// 字符串转数字: 123</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="title class_">String</span>(<span class="number">456</span>);       <span class="comment">// 数字转字符串: &quot;456&quot;</span></span><br><span class="line"><span class="keyword">let</span> bool = <span class="title class_">Boolean</span>(<span class="number">1</span>);       <span class="comment">// 转布尔值: true (0, &quot;&quot;, null, undefined, NaN转为false，其他为true)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐式转换</span></span><br><span class="line"><span class="keyword">let</span> result1 = <span class="string">&quot;3&quot;</span> + <span class="number">2</span>;       <span class="comment">// &quot;32&quot; (数字被转为字符串)</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="string">&quot;3&quot;</span> - <span class="number">2</span>;       <span class="comment">// 1 (字符串被转为数字)</span></span><br><span class="line"><span class="keyword">let</span> result3 = <span class="string">&quot;3&quot;</span> * <span class="string">&quot;2&quot;</span>;     <span class="comment">// 6 (字符串被转为数字)</span></span><br></pre></td></tr></table></figure><h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局作用域</span></span><br><span class="line"><span class="keyword">let</span> globalVar = <span class="string">&quot;我是全局变量&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testScope</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 函数作用域</span></span><br><span class="line">  <span class="keyword">let</span> functionVar = <span class="string">&quot;我是函数变量&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// 块级作用域</span></span><br><span class="line">    <span class="keyword">let</span> blockVar = <span class="string">&quot;我是块级变量(let)&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> varInBlock = <span class="string">&quot;我是用var声明的变量&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(globalVar);    <span class="comment">// 可访问</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(functionVar);  <span class="comment">// 可访问</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(blockVar);     <span class="comment">// 可访问</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(globalVar);      <span class="comment">// 可访问</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(functionVar);    <span class="comment">// 可访问</span></span><br><span class="line">  <span class="comment">// console.log(blockVar);    // 错误！不可访问</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(varInBlock);     <span class="comment">// 可访问，因为var没有块级作用域</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">testScope</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalVar);        <span class="comment">// 可访问</span></span><br><span class="line"><span class="comment">// console.log(functionVar);   // 错误！不可访问</span></span><br><span class="line"><span class="comment">// console.log(varInBlock);    // 错误！不可访问</span></span><br></pre></td></tr></table></figure><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组解构</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);  <span class="comment">// 1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象解构</span></span><br><span class="line"><span class="keyword">let</span> &#123;name, age&#125; = &#123;<span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">age</span>: <span class="number">25</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age);  <span class="comment">// &quot;李四&quot; 25</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置默认值</span></span><br><span class="line"><span class="keyword">let</span> [x = <span class="number">0</span>, y = <span class="number">0</span>] = [<span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);  <span class="comment">// 5 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换变量</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="number">10</span>, n = <span class="number">20</span>;</span><br><span class="line">[m, n] = [n, m];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m, n);  <span class="comment">// 20 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 忽略某些值</span></span><br><span class="line"><span class="keyword">let</span> [first, , third] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first, third);  <span class="comment">// 1 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩余参数</span></span><br><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(head, tail);  <span class="comment">// 1 [2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>JavaScript 提供了多种操作符用于执行不同类型的操作。</p><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本算术运算符</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">10</span> + <span class="number">5</span>;      <span class="comment">// 加法: 15</span></span><br><span class="line"><span class="keyword">let</span> diff = <span class="number">10</span> - <span class="number">5</span>;     <span class="comment">// 减法: 5</span></span><br><span class="line"><span class="keyword">let</span> product = <span class="number">10</span> * <span class="number">5</span>;  <span class="comment">// 乘法: 50</span></span><br><span class="line"><span class="keyword">let</span> quotient = <span class="number">10</span> / <span class="number">5</span>; <span class="comment">// 除法: 2</span></span><br><span class="line"><span class="keyword">let</span> remainder = <span class="number">10</span> % <span class="number">3</span>;<span class="comment">// 取余: 1</span></span><br><span class="line"><span class="keyword">let</span> exp = <span class="number">2</span> ** <span class="number">3</span>;      <span class="comment">// 幂运算: 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自增和自减</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">5</span>;</span><br><span class="line">count++;               <span class="comment">// 后置自增: count = 6</span></span><br><span class="line">++count;               <span class="comment">// 前置自增: count = 7</span></span><br><span class="line">count--;               <span class="comment">// 后置自减: count = 6</span></span><br><span class="line">--count;               <span class="comment">// 前置自减: count = 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前置和后置的区别</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> b = a++;           <span class="comment">// b = 5, a = 6，后置先赋值再自增</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> d = ++c;           <span class="comment">// d = 6, c = 6，前置先自增再赋值</span></span><br></pre></td></tr></table></figure><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本赋值</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复合赋值</span></span><br><span class="line">x += <span class="number">5</span>;                <span class="comment">// 等同于 x = x + 5; 结果：15</span></span><br><span class="line">x -= <span class="number">3</span>;                <span class="comment">// 等同于 x = x - 3; 结果：12</span></span><br><span class="line">x *= <span class="number">2</span>;                <span class="comment">// 等同于 x = x * 2; 结果：24</span></span><br><span class="line">x /= <span class="number">4</span>;                <span class="comment">// 等同于 x = x / 4; 结果：6</span></span><br><span class="line">x %= <span class="number">4</span>;                <span class="comment">// 等同于 x = x % 4; 结果：2</span></span><br><span class="line">x **= <span class="number">2</span>;               <span class="comment">// 等同于 x = x ** 2; 结果：4</span></span><br></pre></td></tr></table></figure><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相等比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> == <span class="number">5</span>);        <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> == <span class="string">&quot;5&quot;</span>);      <span class="comment">// true (类型自动转换)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> === <span class="string">&quot;5&quot;</span>);     <span class="comment">// false (严格相等，不进行类型转换)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不等比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> != <span class="number">8</span>);        <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> != <span class="string">&quot;5&quot;</span>);      <span class="comment">// false (类型自动转换)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> !== <span class="string">&quot;5&quot;</span>);     <span class="comment">// true (严格不等，不进行类型转换)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 大小比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> &gt; <span class="number">3</span>);         <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> &gt;= <span class="number">5</span>);        <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> &lt; <span class="number">10</span>);        <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> &lt;= <span class="number">4</span>);        <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="literal">undefined</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> === <span class="literal">undefined</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> == <span class="title class_">NaN</span>);         <span class="comment">// false (NaN不等于任何值，包括自身)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>);        <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 逻辑与 (AND)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &amp;&amp; <span class="literal">true</span>);   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &amp;&amp; <span class="literal">false</span>);  <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> &amp;&amp; <span class="literal">true</span>);  <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> &amp;&amp; <span class="literal">false</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑或 (OR)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> || <span class="literal">true</span>);   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> || <span class="literal">false</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> || <span class="literal">true</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> || <span class="literal">false</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑非 (NOT)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">true</span>);          <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">false</span>);         <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 短路运算</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> &amp;&amp; <span class="title function_">someFunction</span>()); <span class="comment">// false，someFunction不会执行</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> || <span class="title function_">someFunction</span>());  <span class="comment">// true，someFunction不会执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑运算符的返回值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span> &amp;&amp; <span class="string">&quot;World&quot;</span>);     <span class="comment">// &quot;World&quot; (返回最后一个真值)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span> &amp;&amp; <span class="string">&quot;World&quot;</span>);          <span class="comment">// &quot;&quot; (返回第一个假值)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span> || <span class="string">&quot;World&quot;</span>);     <span class="comment">// &quot;Hello&quot; (返回第一个真值)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span> || <span class="string">&quot;World&quot;</span>);          <span class="comment">// &quot;World&quot; (若第一个为假，返回第二个值)</span></span><br></pre></td></tr></table></figure><h4 id="条件（三元）运算符"><a href="#条件（三元）运算符" class="headerlink" title="条件（三元）运算符"></a>条件（三元）运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件表达式 ? 值1 : 值2</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> status = age &gt;= <span class="number">18</span> ? <span class="string">&quot;成年&quot;</span> : <span class="string">&quot;未成年&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(status);  <span class="comment">// &quot;成年&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套三元运算符</span></span><br><span class="line"><span class="keyword">let</span> score = <span class="number">85</span>;</span><br><span class="line"><span class="keyword">let</span> grade = score &gt;= <span class="number">90</span> ? <span class="string">&quot;A&quot;</span> : (score &gt;= <span class="number">80</span> ? <span class="string">&quot;B&quot;</span> : (score &gt;= <span class="number">70</span> ? <span class="string">&quot;C&quot;</span> : <span class="string">&quot;D&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(grade);   <span class="comment">// &quot;B&quot;</span></span><br></pre></td></tr></table></figure><h4 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// typeof运算符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">42</span>);           <span class="comment">// &quot;number&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&quot;hello&quot;</span>);      <span class="comment">// &quot;string&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// instanceof运算符</span></span><br><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// in运算符 (检查属性是否存在)</span></span><br><span class="line"><span class="keyword">let</span> car = &#123;<span class="attr">make</span>: <span class="string">&quot;Toyota&quot;</span>, <span class="attr">model</span>: <span class="string">&quot;Corolla&quot;</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;make&quot;</span> <span class="keyword">in</span> car);        <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;color&quot;</span> <span class="keyword">in</span> car);       <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 空值合并运算符 (??) - ES2020</span></span><br><span class="line"><span class="keyword">let</span> user = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> displayName = user ?? <span class="string">&quot;Guest&quot;</span>; <span class="comment">// &quot;Guest&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选链运算符 (?.) - ES2020</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">outer</span>: &#123;<span class="attr">inner</span>: &#123;<span class="attr">value</span>: <span class="number">42</span>&#125;&#125;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj?.<span class="property">outer</span>?.<span class="property">inner</span>?.<span class="property">value</span>); <span class="comment">// 42</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj?.<span class="property">outer</span>?.<span class="property">missing</span>?.<span class="property">value</span>); <span class="comment">// undefined (不报错)</span></span><br></pre></td></tr></table></figure><h3 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h3><h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if语句</span></span><br><span class="line"><span class="keyword">let</span> temperature = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (temperature &gt; <span class="number">30</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;天气炎热&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (temperature &gt; <span class="number">20</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;天气适宜&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;天气凉爽&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch语句</span></span><br><span class="line"><span class="keyword">let</span> day = <span class="string">&quot;星期三&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;星期一&quot;</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始工作&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;星期三&quot;</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;周中了&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;星期五&quot;</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;周末来临&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;普通的一天&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`计数: <span class="subst">$&#123;i&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// while循环</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (count &lt; <span class="number">5</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`while计数: <span class="subst">$&#123;count&#125;</span>`</span>);</span><br><span class="line">  count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// do...while循环</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`do-while计数: <span class="subst">$&#123;num&#125;</span>`</span>);</span><br><span class="line">  num++;</span><br><span class="line">&#125; <span class="keyword">while</span> (num &lt; <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// for...in循环 (用于对象)</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>: <span class="string">&quot;李华&quot;</span>, <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">job</span>: <span class="string">&quot;工程师&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> person) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;person[key]&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for...of循环 (用于可迭代对象)</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;红&quot;</span>, <span class="string">&quot;绿&quot;</span>, <span class="string">&quot;蓝&quot;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> color <span class="keyword">of</span> colors) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳出循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">3</span>) <span class="keyword">continue</span>; <span class="comment">// 跳过当前迭代</span></span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">7</span>) <span class="keyword">break</span>;    <span class="comment">// 结束整个循环</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="函数声明与表达式"><a href="#函数声明与表达式" class="headerlink" title="函数声明与表达式"></a>函数声明与表达式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`你好，<span class="subst">$&#123;name&#125;</span>！`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greet</span>(<span class="string">&quot;小明&quot;</span>)); <span class="comment">// &quot;你好，小明！&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">const</span> sayHello = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`你好，<span class="subst">$&#123;name&#125;</span>！`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sayHello</span>(<span class="string">&quot;小红&quot;</span>)); <span class="comment">// &quot;你好，小红！&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">welcome</span> = (<span class="params">name</span>) =&gt; <span class="string">`欢迎，<span class="subst">$&#123;name&#125;</span>！`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">welcome</span>(<span class="string">&quot;小张&quot;</span>)); <span class="comment">// &quot;欢迎，小张！&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b = <span class="number">0</span></span>) &#123; <span class="comment">// 设置默认参数</span></span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">5</span>));    <span class="comment">// 5 (b默认为0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩余参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...numbers</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, num</span>) =&gt;</span> total + num, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h4 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 内部函数形成闭包，可以访问外部函数的变量</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = <span class="title function_">createCounter</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">counter</span>()); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">counter</span>()); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">counter</span>()); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// count变量在外部无法访问，但内部函数可以&quot;记住&quot;它</span></span><br></pre></td></tr></table></figure><h4 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在对象方法中</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">user.<span class="title function_">sayHi</span>(); <span class="comment">// &quot;你好，我是张三&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在全局函数中</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showThis</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 在浏览器中是window对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showThis</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在事件处理函数中</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">button.addEventListener(&#x27;click&#x27;, function() &#123;</span></span><br><span class="line"><span class="comment">  console.log(this); // 指向触发事件的元素（button）</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数中</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">  <span class="attr">regularFunction</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// &quot;李四&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 箭头函数不绑定自己的this，而是继承外围作用域的this</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">arrowFunction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// 仍然是&quot;李四&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">arrowFunction</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">regularFunction</span>();</span><br></pre></td></tr></table></figure><h3 id="对象和数组"><a href="#对象和数组" class="headerlink" title="对象和数组"></a>对象和数组</h3><h4 id="对象基础"><a href="#对象基础" class="headerlink" title="对象基础"></a>对象基础</h4><p>对象是JavaScript中的复合数据类型，用于存储多个相关数据和功能的集合。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象字面量创建</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;张&quot;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&quot;三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">isStudent</span>: <span class="literal">false</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 对象方法</span></span><br><span class="line">  <span class="title function_">fullName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问对象属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">firstName</span>);        <span class="comment">// 点表示法：张</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person[<span class="string">&quot;lastName&quot;</span>]);      <span class="comment">// 方括号表示法：三</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">fullName</span>());       <span class="comment">// 调用方法：张三</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加新属性</span></span><br><span class="line">person.<span class="property">email</span> = <span class="string">&quot;zhangsan@example.com&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改属性</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除属性</span></span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">isStudent</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查属性是否存在</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;email&quot;</span> <span class="keyword">in</span> person);           <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;age&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> person) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;person[key]&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有键和值</span></span><br><span class="line"><span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(person);     <span class="comment">// [&quot;firstName&quot;, &quot;lastName&quot;, &quot;age&quot;, &quot;email&quot;, ...]</span></span><br><span class="line"><span class="keyword">const</span> values = <span class="title class_">Object</span>.<span class="title function_">values</span>(person); <span class="comment">// [&quot;张&quot;, &quot;三&quot;, 26, &quot;zhangsan@example.com&quot;, ...]</span></span><br><span class="line"><span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(person); <span class="comment">// [[&quot;firstName&quot;, &quot;张&quot;], [&quot;lastName&quot;, &quot;三&quot;], ...]</span></span><br></pre></td></tr></table></figure><h4 id="对象方法和构造函数"><a href="#对象方法和构造函数" class="headerlink" title="对象方法和构造函数"></a>对象方法和构造函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">firstName, lastName, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">lastName</span> = lastName;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用构造函数创建实例</span></span><br><span class="line"><span class="keyword">const</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李&quot;</span>, <span class="string">&quot;四&quot;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">const</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;王&quot;</span>, <span class="string">&quot;五&quot;</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">fullName</span>()); <span class="comment">// 李四</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="property">age</span>);        <span class="comment">// 25</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.create()方法</span></span><br><span class="line"><span class="keyword">const</span> personProto = &#123;</span><br><span class="line">  <span class="title function_">greeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`你好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student = <span class="title class_">Object</span>.<span class="title function_">create</span>(personProto);</span><br><span class="line">student.<span class="property">name</span> = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="title function_">greeting</span>()); <span class="comment">// 你好，我是小明</span></span><br></pre></td></tr></table></figure><h4 id="数组详解"><a href="#数组详解" class="headerlink" title="数组详解"></a>数组详解</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建数组</span></span><br><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;香蕉&quot;</span>, <span class="string">&quot;橙子&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> numbers = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> mixed = [<span class="number">1</span>, <span class="string">&quot;文本&quot;</span>, <span class="literal">true</span>, &#123;<span class="attr">name</span>: <span class="string">&quot;对象&quot;</span>&#125;, [<span class="number">1</span>, <span class="number">2</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问数组元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits[<span class="number">0</span>]);          <span class="comment">// 苹果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits[fruits.<span class="property">length</span> - <span class="number">1</span>]); <span class="comment">// 橙子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改数组元素</span></span><br><span class="line">fruits[<span class="number">1</span>] = <span class="string">&quot;梨&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits);             <span class="comment">// [&quot;苹果&quot;, &quot;梨&quot;, &quot;橙子&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本数组方法</span></span><br><span class="line">fruits.<span class="title function_">push</span>(<span class="string">&quot;葡萄&quot;</span>);             <span class="comment">// 添加到末尾: [&quot;苹果&quot;, &quot;梨&quot;, &quot;橙子&quot;, &quot;葡萄&quot;]</span></span><br><span class="line"><span class="keyword">let</span> lastFruit = fruits.<span class="title function_">pop</span>();    <span class="comment">// 移除末尾: lastFruit = &quot;葡萄&quot;, fruits = [&quot;苹果&quot;, &quot;梨&quot;, &quot;橙子&quot;]</span></span><br><span class="line"><span class="keyword">let</span> firstFruit = fruits.<span class="title function_">shift</span>(); <span class="comment">// 移除开头: firstFruit = &quot;苹果&quot;, fruits = [&quot;梨&quot;, &quot;橙子&quot;]</span></span><br><span class="line">fruits.<span class="title function_">unshift</span>(<span class="string">&quot;草莓&quot;</span>);          <span class="comment">// 添加到开头: [&quot;草莓&quot;, &quot;梨&quot;, &quot;橙子&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找元素</span></span><br><span class="line"><span class="keyword">let</span> index = fruits.<span class="title function_">indexOf</span>(<span class="string">&quot;梨&quot;</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">let</span> includesOrange = fruits.<span class="title function_">includes</span>(<span class="string">&quot;橙子&quot;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组变换</span></span><br><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// map - 返回新数组，每个元素都经过处理</span></span><br><span class="line"><span class="keyword">let</span> doubled = nums.<span class="title function_">map</span>(<span class="function"><span class="params">num</span> =&gt;</span> num * <span class="number">2</span>); <span class="comment">// [2, 4, 6, 8, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// filter - 返回满足条件的元素组成的新数组</span></span><br><span class="line"><span class="keyword">let</span> evens = nums.<span class="title function_">filter</span>(<span class="function"><span class="params">num</span> =&gt;</span> num % <span class="number">2</span> === <span class="number">0</span>); <span class="comment">// [2, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// reduce - 将数组压缩为单个值</span></span><br><span class="line"><span class="keyword">let</span> sum = nums.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, num</span>) =&gt;</span> total + num, <span class="number">0</span>); <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach - 遍历数组元素</span></span><br><span class="line">nums.<span class="title function_">forEach</span>(<span class="function"><span class="params">num</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(num)); <span class="comment">// 依次打印: 1, 2, 3, 4, 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组排序</span></span><br><span class="line"><span class="keyword">let</span> letters = [<span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;b&quot;</span>];</span><br><span class="line">letters.<span class="title function_">sort</span>();                  <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span></span><br><span class="line">nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a);      <span class="comment">// 降序: [5, 4, 3, 2, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组切片</span></span><br><span class="line"><span class="keyword">let</span> sliced = nums.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">3</span>);   <span class="comment">// [4, 3] (索引1到索引3之前的元素)</span></span><br><span class="line"><span class="keyword">let</span> removed = nums.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 从索引1开始移除2个元素，返回移除的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组连接</span></span><br><span class="line"><span class="keyword">let</span> combined = [<span class="number">1</span>, <span class="number">2</span>].<span class="title function_">concat</span>([<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>]); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// 或者使用扩展运算符</span></span><br><span class="line"><span class="keyword">let</span> combined2 = [...[<span class="number">1</span>, <span class="number">2</span>], ...[<span class="number">3</span>, <span class="number">4</span>], ...[<span class="number">5</span>]]; <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 展开多维数组</span></span><br><span class="line"><span class="keyword">let</span> flattened = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]].<span class="title function_">flat</span>(<span class="number">2</span>); <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="ES6-新特性"><a href="#ES6-新特性" class="headerlink" title="ES6+ 新特性"></a>ES6+ 新特性</h3><p>ES6（ECMAScript 2015）及后续版本引入了许多重要的JavaScript语言特性。</p><h4 id="箭头函数详解"><a href="#箭头函数详解" class="headerlink" title="箭头函数详解"></a>箭头函数详解</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本箭头函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单个参数时可省略括号</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">square</span> = x =&gt; x * x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多行函数体使用花括号</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">greet</span> = name =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> message = <span class="string">`你好，<span class="subst">$&#123;name&#125;</span>！`</span>;</span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数与this</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="comment">// 普通函数</span></span><br><span class="line">  <span class="attr">sayHiLater</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>); <span class="comment">// this指向window，输出&quot;你好，我是undefined&quot;</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 箭头函数</span></span><br><span class="line">  <span class="attr">sayHiLaterArrow</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>); <span class="comment">// this指向person，输出&quot;你好，我是张三&quot;</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本用法</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;JavaScript&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> greeting = <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多行字符串</span></span><br><span class="line"><span class="keyword">const</span> multiLine = <span class="string">`</span></span><br><span class="line"><span class="string">  这是第一行</span></span><br><span class="line"><span class="string">  这是第二行</span></span><br><span class="line"><span class="string">  这是第三行</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表达式插值</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">10</span>, b = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> result = <span class="string">`<span class="subst">$&#123;a&#125;</span> + <span class="subst">$&#123;b&#125;</span> = <span class="subst">$&#123;a + b&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标签模板</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">highlight</span>(<span class="params">strings, ...values</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> strings.<span class="title function_">reduce</span>(<span class="function">(<span class="params">result, str, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> value = values[i] || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;result&#125;</span><span class="subst">$&#123;str&#125;</span>&lt;span class=&quot;highlight&quot;&gt;<span class="subst">$&#123;value&#125;</span>&lt;/span&gt;`</span>;</span><br><span class="line">  &#125;, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> role = <span class="string">&quot;管理员&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> html = highlight<span class="string">`用户 <span class="subst">$&#123;user&#125;</span> 是 <span class="subst">$&#123;role&#125;</span>`</span>;</span><br><span class="line"><span class="comment">// 结果: &quot;用户 &lt;span class=&quot;highlight&quot;&gt;张三&lt;/span&gt; 是 &lt;span class=&quot;highlight&quot;&gt;管理员&lt;/span&gt;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="解构赋值详解"><a href="#解构赋值详解" class="headerlink" title="解构赋值详解"></a>解构赋值详解</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组解构的高级用法</span></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]; <span class="comment">// first = 1, rest = [2, 3, 4]</span></span><br><span class="line"><span class="keyword">const</span> [a, , c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];            <span class="comment">// a = 1, c = 3, 跳过中间元素</span></span><br><span class="line"><span class="keyword">const</span> [x = <span class="number">0</span>, y = <span class="number">0</span>] = [];             <span class="comment">// x = 0, y = 0, 提供默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象解构的高级用法</span></span><br><span class="line"><span class="keyword">const</span> &#123; name, age = <span class="number">20</span> &#125; = &#123; <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span> &#125;; <span class="comment">// name = &quot;李四&quot;, age = 20 (默认值)</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">name</span>: fullName &#125; = &#123; <span class="attr">name</span>: <span class="string">&quot;王五&quot;</span> &#125;; <span class="comment">// fullName = &quot;王五&quot; (属性重命名)</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">a</span>: &#123; b &#125; &#125; = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="string">&#x27;nested&#x27;</span> &#125; &#125;; <span class="comment">// b = &quot;nested&quot; (嵌套解构)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数参数解构</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printPersonInfo</span>(<span class="params">&#123; name, age = <span class="number">18</span>, city = <span class="string">&quot;北京&quot;</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;name&#125;</span>, <span class="subst">$&#123;age&#125;</span>岁, 来自<span class="subst">$&#123;city&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">printPersonInfo</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;赵六&quot;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;); <span class="comment">// &quot;赵六, 25岁, 来自北京&quot;</span></span><br></pre></td></tr></table></figure><h4 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组展开</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [...arr1, <span class="number">4</span>, <span class="number">5</span>]; <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数参数展开</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(...numbers)); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象展开</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; ...obj1, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">3</span> &#125;; <span class="comment">// &#123; a: 1, b: 3, c: 3 &#125; (b被覆盖)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组复制</span></span><br><span class="line"><span class="keyword">const</span> originalArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> copyArray = [...originalArray]; <span class="comment">// 创建新数组，而不是引用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象复制</span></span><br><span class="line"><span class="keyword">const</span> originalObject = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">const</span> copyObject = &#123; ...originalObject &#125;; <span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="comment">// 注意：这只是浅拷贝，嵌套对象仍然是引用</span></span><br></pre></td></tr></table></figure><h4 id="类（Class）"><a href="#类（Class）" class="headerlink" title="类（Class）"></a>类（Class）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本类语法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 实例方法</span></span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`你好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 静态方法</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">createAnonymous</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;无名氏&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">sayHello</span>()); <span class="comment">// &quot;你好，我是张三，30岁&quot;</span></span><br><span class="line"><span class="keyword">const</span> anonymous = <span class="title class_">Person</span>.<span class="title function_">createAnonymous</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age, grade</span>) &#123;</span><br><span class="line">    <span class="comment">// 调用父类构造函数</span></span><br><span class="line">    <span class="variable language_">super</span>(name, age);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">grade</span> = grade;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 覆盖父类方法</span></span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">super</span>.sayHello()&#125;</span>，我在<span class="subst">$&#123;<span class="variable language_">this</span>.grade&#125;</span>年级`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 新增方法</span></span><br><span class="line">  <span class="title function_">study</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>正在学习`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小明&quot;</span>, <span class="number">15</span>, <span class="string">&quot;初三&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="title function_">sayHello</span>()); <span class="comment">// &quot;你好，我是小明，15岁，我在初三年级&quot;</span></span><br></pre></td></tr></table></figure><h4 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出 (math.js)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14159</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入 (app.js)</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Calculator</span>, &#123; <span class="variable constant_">PI</span>, add, multiply <span class="keyword">as</span> mult &#125; <span class="keyword">from</span> <span class="string">&#x27;./math.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>);                <span class="comment">// 3.14159</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>));         <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">mult</span>(<span class="number">2</span>, <span class="number">3</span>));        <span class="comment">// 6 (重命名为mult)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> calc = <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(calc.<span class="title function_">add</span>(<span class="number">5</span>, <span class="number">3</span>));    <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入所有</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">MathUtils</span> <span class="keyword">from</span> <span class="string">&#x27;./math.js&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MathUtils</span>.<span class="property">PI</span>);      <span class="comment">// 3.14159</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MathUtils</span>.<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h3 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h3><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统回调函数处理异步</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = &#123; <span class="attr">name</span>: <span class="string">&quot;示例数据&quot;</span>, <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>() &#125;;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="literal">null</span>, data); <span class="comment">// 第一个参数通常是错误，第二个是数据</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>(<span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;发生错误:&quot;</span>, error);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数据:&quot;</span>, data);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 回调地狱示例</span></span><br><span class="line">  <span class="title function_">fetchData</span>(<span class="function">(<span class="params">error, moreData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;发生错误:&quot;</span>, error);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;更多数据:&quot;</span>, moreData);</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">fetchData</span>(<span class="function">(<span class="params">error, evenMoreData</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 嵌套更深...</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Promise</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> success = <span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.3</span>; <span class="comment">// 70%成功率</span></span><br><span class="line">      <span class="keyword">if</span> (success) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;示例数据&quot;</span>, <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>() &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;无法获取数据&quot;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Promise</span></span><br><span class="line"><span class="title function_">fetchData</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数据:&quot;</span>, data);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetchData</span>(); <span class="comment">// 链式调用</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">moreData</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;更多数据:&quot;</span>, moreData);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetchData</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">evenMoreData</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;更多更多数据:&quot;</span>, evenMoreData);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 捕获链中任何一个环节的错误</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;发生错误:&quot;</span>, error);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 无论成功失败都会执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求完成&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise组合</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">fetchData</span>(), <span class="title function_">fetchData</span>(), <span class="title function_">fetchData</span>()])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">resultsArray</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;所有请求完成:&quot;</span>, resultsArray);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;至少一个请求失败:&quot;</span>, error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([<span class="title function_">fetchData</span>(), <span class="title function_">fetchData</span>(), <span class="title function_">fetchData</span>()])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">firstResult</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;最快的请求结果:&quot;</span>, firstResult);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;最快的请求失败:&quot;</span>, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="Async-Await"><a href="#Async-Await" class="headerlink" title="Async&#x2F;Await"></a>Async&#x2F;Await</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用async/await简化Promise处理</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchAllData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 等待Promise完成</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetchData</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一组数据:&quot;</span>, data);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 顺序执行，但代码像同步一样清晰</span></span><br><span class="line">    <span class="keyword">const</span> moreData = <span class="keyword">await</span> <span class="title function_">fetchData</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第二组数据:&quot;</span>, moreData);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 并行执行</span></span><br><span class="line">    <span class="keyword">const</span> [result1, result2] = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">      <span class="title function_">fetchData</span>(),</span><br><span class="line">      <span class="title function_">fetchData</span>()</span><br><span class="line">    ]);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;并行结果:&quot;</span>, result1, result2);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;所有数据获取成功&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 捕获任何一步出现的错误</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;处理数据时出错:&quot;</span>, error);</span><br><span class="line">    <span class="keyword">throw</span> error; <span class="comment">// 可以重新抛出</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用async函数</span></span><br><span class="line"><span class="title function_">fetchAllData</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">message</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(message))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;最外层捕获:&quot;</span>, error));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 立即执行的异步函数</span></span><br><span class="line">(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">fetchAllData</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="DOM操作与浏览器API"><a href="#DOM操作与浏览器API" class="headerlink" title="DOM操作与浏览器API"></a>DOM操作与浏览器API</h3><h4 id="DOM选择与操作"><a href="#DOM选择与操作" class="headerlink" title="DOM选择与操作"></a>DOM选择与操作</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选择元素</span></span><br><span class="line"><span class="keyword">const</span> heading = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;main-heading&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> paragraphs = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> specialElements = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;special&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> firstButton = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> allLinks = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;a.external&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改内容</span></span><br><span class="line">heading.<span class="property">textContent</span> = <span class="string">&#x27;新标题&#x27;</span>;</span><br><span class="line">heading.<span class="property">innerHTML</span> = <span class="string">&#x27;新标题 &lt;span&gt;带HTML&lt;/span&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改属性</span></span><br><span class="line"><span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">img.<span class="property">src</span> = <span class="string">&#x27;new-image.jpg&#x27;</span>;</span><br><span class="line">img.<span class="property">alt</span> = <span class="string">&#x27;图片描述&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义属性</span></span><br><span class="line">img.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-category&#x27;</span>, <span class="string">&#x27;nature&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> category = img.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-category&#x27;</span>);</span><br><span class="line"><span class="comment">// 或使用dataset API</span></span><br><span class="line">img.<span class="property">dataset</span>.<span class="property">category</span> = <span class="string">&#x27;nature&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> category2 = img.<span class="property">dataset</span>.<span class="property">category</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改样式</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.highlight&#x27;</span>);</span><br><span class="line">element.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">element.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&#x27;20px&#x27;</span>;</span><br><span class="line">element.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line"><span class="comment">// 添加/移除/切换类</span></span><br><span class="line">element.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">element.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;hidden&#x27;</span>);</span><br><span class="line">element.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;visible&#x27;</span>);</span><br><span class="line">element.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;active&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新元素</span></span><br><span class="line"><span class="keyword">const</span> newParagraph = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">newParagraph.<span class="property">textContent</span> = <span class="string">&#x27;这是新段落&#x27;</span>;</span><br><span class="line"><span class="comment">// 添加到DOM</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(newParagraph);</span><br><span class="line"><span class="comment">// 插入到特定位置</span></span><br><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.container&#x27;</span>);</span><br><span class="line">container.<span class="title function_">insertBefore</span>(newParagraph, container.<span class="property">firstChild</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除元素</span></span><br><span class="line">container.<span class="title function_">removeChild</span>(newParagraph);</span><br><span class="line"><span class="comment">// 或者自我删除</span></span><br><span class="line">newParagraph.<span class="title function_">remove</span>();</span><br></pre></td></tr></table></figure><h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加事件监听器</span></span><br><span class="line"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;按钮被点击了!&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;事件对象:&#x27;</span>, event);</span><br><span class="line">  <span class="comment">// 阻止默认行为</span></span><br><span class="line">  event.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="comment">// 阻止事件冒泡</span></span><br><span class="line">  event.<span class="title function_">stopPropagation</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用箭头函数和事件对象</span></span><br><span class="line"><span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;输入值:&#x27;</span>, e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除事件监听器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;处理点击&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleClick);</span><br><span class="line"><span class="comment">// 稍后移除</span></span><br><span class="line">button.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleClick);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件委托（代理）</span></span><br><span class="line"><span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">list.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 检查实际点击的是哪个子元素</span></span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&#x27;LI&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了列表项:&#x27;</span>, event.<span class="property">target</span>.<span class="property">textContent</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常见事件类型</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;DOM完全加载&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;页面完全加载，包括所有资源&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;窗口大小改变&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;页面滚动&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Fetch-API"><a href="#Fetch-API" class="headerlink" title="Fetch API"></a>Fetch API</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本GET请求</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 检查响应状态</span></span><br><span class="line">    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`HTTP错误 <span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>(); <span class="comment">// 解析JSON响应</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据:&#x27;</span>, data);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;获取数据出错:&#x27;</span>, error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST请求发送JSON数据</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/create&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Bearer token123&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;新项目&#x27;</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="string">&#x27;项目描述&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;创建结果:&#x27;</span>, data))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;错误:&#x27;</span>, error));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用async/await和Fetch</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchUserData</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`https://api.example.com/users/<span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`HTTP错误 <span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> userData = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="keyword">return</span> userData;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;获取用户数据失败:&#x27;</span>, error);</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件上传</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">uploadFile</span>(<span class="params">file</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">  formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/upload&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      <span class="attr">body</span>: formData</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;文件上传失败:&#x27;</span>, error);</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求中止</span></span><br><span class="line"><span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line"><span class="keyword">const</span> &#123; signal &#125; = controller;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>, &#123; signal &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据:&#x27;</span>, data))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">name</span> === <span class="string">&#x27;AbortError&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求被取消&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;错误:&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5秒后中止请求</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> controller.<span class="title function_">abort</span>(), <span class="number">5000</span>);</span><br></pre></td></tr></table></figure><h3 id="错误处理与调试"><a href="#错误处理与调试" class="headerlink" title="错误处理与调试"></a>错误处理与调试</h3><h4 id="try…catch使用"><a href="#try…catch使用" class="headerlink" title="try…catch使用"></a>try…catch使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本try...catch</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 可能会抛出错误的代码</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="title function_">riskyOperation</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作成功:&#x27;</span>, result);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="comment">// 处理错误</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;捕获到错误:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">  <span class="comment">// 可以根据错误类型进行不同处理</span></span><br><span class="line">  <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">TypeError</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;类型错误&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">ReferenceError</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;引用错误&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// 无论try成功还是catch捕获到错误，都会执行</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;清理资源&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步函数中的错误处理</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">processData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetchData</span>();</span><br><span class="line">    <span class="keyword">const</span> processed = <span class="keyword">await</span> <span class="title function_">processResult</span>(data);</span><br><span class="line">    <span class="keyword">return</span> processed;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;处理数据时出错:&#x27;</span>, error);</span><br><span class="line">    <span class="comment">// 可以返回默认值或重新抛出错误</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">error</span>: <span class="literal">true</span>, <span class="attr">message</span>: error.<span class="property">message</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义错误</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ValidationError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Error</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">message, field</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(message);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;ValidationError&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">field</span> = field;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">validateUser</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!user.<span class="property">name</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidationError</span>(<span class="string">&#x27;名称不能为空&#x27;</span>, <span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!user.<span class="property">email</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidationError</span>(<span class="string">&#x27;邮箱不能为空&#x27;</span>, <span class="string">&#x27;email&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="title function_">validateUser</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span> &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">ValidationError</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`字段 <span class="subst">$&#123;error.field&#125;</span> 验证失败: <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;未知错误:&#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局错误处理</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;全局错误:&#x27;</span>, event.<span class="property">error</span>);</span><br><span class="line">  <span class="comment">// 防止浏览器显示错误</span></span><br><span class="line">  event.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 未捕获的Promise拒绝</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;unhandledrejection&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;未处理的Promise拒绝:&#x27;</span>, event.<span class="property">reason</span>);</span><br><span class="line">  event.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 断点</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">complexFunction</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = a * <span class="number">2</span>;</span><br><span class="line">  <span class="comment">// 可以在开发工具中在此行设置断点</span></span><br><span class="line">  result += b;</span><br><span class="line">  <span class="keyword">return</span> result * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// debugger语句 (临时断点)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findBug</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> processed = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (data[i].<span class="property">value</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">debugger</span>; <span class="comment">// 代码执行将在此暂停（开发工具打开时）</span></span><br><span class="line">      processed.<span class="title function_">push</span>(data[i].<span class="property">value</span> * -<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      processed.<span class="title function_">push</span>(data[i].<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> processed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台API</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;普通信息&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;信息&#x27;</span>); <span class="comment">// 通常和log渲染相同</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;警告&#x27;</span>); <span class="comment">// 通常显示黄色警告图标</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;错误&#x27;</span>); <span class="comment">// 通常显示红色错误图标</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">table</span>([      <span class="comment">// 以表格形式显示数组或对象</span></span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;</span><br><span class="line">]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">group</span>(<span class="string">&#x27;分组标题&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;分组内的消息1&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;分组内的消息2&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">groupEnd</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计时功能</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;操作耗时&#x27;</span>);</span><br><span class="line"><span class="comment">// 耗时操作...</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 模拟耗时操作</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;操作耗时&#x27;</span>); <span class="comment">// 显示：&quot;操作耗时: 10ms&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 跟踪函数调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123; <span class="title function_">b</span>(); &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123; <span class="title function_">c</span>(); &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">trace</span>(<span class="string">&#x27;函数调用堆栈&#x27;</span>); &#125;</span><br><span class="line"><span class="title function_">a</span>(); <span class="comment">// 显示从a到b到c的调用堆栈</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件断点</span></span><br><span class="line"><span class="comment">// 在开发者工具中，可以设置条件断点，只有在满足特定条件时才暂停</span></span><br><span class="line"><span class="comment">// 例如，在循环中仅当i等于特定值时暂停</span></span><br></pre></td></tr></table></figure><h2 id="推荐的-JavaScript-学习资源"><a href="#推荐的-JavaScript-学习资源" class="headerlink" title="推荐的 JavaScript 学习资源"></a>推荐的 JavaScript 学习资源</h2><p>课程推荐：</p><p><a href="https://www.w3schools.com/javascript/default.asp">W3Schools:🛫</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">MDN Web Docs:🛫</a></p><p>项目实践：<br><a href="https://www.freecodecamp.org/learn/">FreeCodeCamp:🛫</a></p><p>❗❗❗ 学习重点 🤔：</p><ol><li><p>基本语法和数据类型</p><ul><li><strong>变量声明</strong>：<code>var</code>、<code>let</code> 和 <code>const</code> 的区别及作用<ul><li>变量提升现象与暂时性死区</li><li>全局变量与window对象的关系</li><li>何时使用const与let的最佳实践</li><li>块级作用域与函数作用域的实际应用场景</li></ul></li><li><strong>数据类型</strong>：字符串、数字、布尔值、undefined、null、对象（Object）、数组（Array）、Symbol 和 BigInt<ul><li>原始类型vs引用类型的内存模型</li><li>Symbol的实际应用场景与唯一性保证</li><li>BigInt处理大数字计算的使用方法</li><li>null与undefined的区别与应用场景</li><li>NaN的特性与isNaN&#x2F;Number.isNaN的区别</li></ul></li><li><strong>类型转换</strong>：隐式转换与显式转换（如 <code>String()</code>, <code>Number()</code> 等）<ul><li>强制类型转换的常见陷阱</li><li>运算符导致的隐式转换规则</li><li>parseInt&#x2F;parseFloat与Number转换的区别</li><li>valueOf与toString方法在转换中的作用</li></ul></li><li><strong>操作符</strong>：算术操作符、比较操作符、逻辑操作符、赋值操作符、三元运算符、位运算符等<ul><li>位运算在实际开发中的高效应用</li><li>逻辑运算符短路求值的应用技巧</li><li>&#x3D;&#x3D;与&#x3D;&#x3D;&#x3D;的区别及何时使用</li><li>复合赋值操作符及其优化</li></ul></li></ul></li><li><p>控制流</p><ul><li><strong>条件语句</strong>：<code>if</code>、<code>else</code>、<code>switch</code> 语句<ul><li>条件表达式的真值与假值评估</li><li>switch语句与策略模式的结合</li><li>多重条件的优化方法</li><li>使用对象字面量替代switch语句</li></ul></li><li><strong>循环语句</strong>：<code>for</code>、<code>while</code>、<code>do...while</code> 循环，<code>for...in</code>、<code>for...of</code><ul><li>各种循环的性能比较与最佳使用场景</li><li>for…in遍历原型链问题及防范</li><li>for…of与迭代器协议的关系</li><li>无限循环的合理应用</li></ul></li><li><strong>跳出循环</strong>：<code>break</code>、<code>continue</code>、<code>return</code><ul><li>标签语句与多层循环跳出</li><li>continue与循环优化</li><li>提前返回模式优化代码结构</li></ul></li></ul></li><li><p>函数与作用域</p><ul><li><strong>函数声明与表达式</strong>：普通函数、匿名函数、命名函数表达式<ul><li>函数声明提升vs函数表达式提升</li><li>立即执行函数表达式(IIFE)及其应用</li><li>命名函数表达式对调试的好处</li><li>高阶函数的概念与实践</li></ul></li><li><strong>箭头函数</strong>：如何简化函数表达式，并理解它与普通函数的 <code>this</code> 指向不同<ul><li>箭头函数没有arguments对象的解决方案</li><li>箭头函数实现对象方法的注意事项</li><li>隐式返回值的各种情况</li><li>何时不应使用箭头函数</li></ul></li><li><strong>作用域</strong>：全局作用域、函数作用域、块级作用域<ul><li>词法作用域与动态作用域的区别</li><li>作用域链的工作原理</li><li>模块作用域在ES模块中的应用</li><li>eval对作用域的影响</li></ul></li><li><strong>闭包</strong>：函数可以”记住”并访问定义时的作用域<ul><li>闭包在实际开发中的常见用例</li><li>闭包导致的内存泄漏及防范</li><li>工厂函数与闭包的关系</li><li>闭包与模块模式</li></ul></li><li><strong>this</strong>：理解 <code>this</code> 在不同情况下的指向（例如在函数内、对象方法内、箭头函数中等）<ul><li>call&#x2F;apply&#x2F;bind方法对this的影响</li><li>构造函数中的this行为</li><li>严格模式vs非严格模式下this的区别</li><li>DOM事件处理程序中的this</li></ul></li></ul></li><li><p>对象与数组</p><ul><li><strong>对象</strong>：如何创建对象、访问属性、方法、遍历对象（如 <code>for...in</code>）<ul><li>对象属性特性与Object.defineProperty</li><li>getter&#x2F;setter方法定义与使用</li><li>对象原型链与继承机制</li><li>Object.create与原型继承</li><li>对象深拷贝与浅拷贝的实现</li></ul></li><li><strong>对象解构</strong>：从对象中提取多个属性到变量<ul><li>嵌套解构的复杂案例</li><li>解构时的默认值与重命名</li><li>解构与函数参数结合使用</li><li>解构失败的行为与处理</li></ul></li><li><strong>数组</strong>：常用数组方法（<code>push</code>、<code>pop</code>、<code>shift</code>、<code>unshift</code>、<code>map</code>、<code>filter</code>、<code>reduce</code>）<ul><li>稀疏数组与密集数组的区别</li><li>reduce方法实现复杂数据处理</li><li>数组方法链式调用与性能</li><li>类数组对象转换为真数组</li><li>多维数组的操作技巧</li></ul></li><li><strong>数组解构</strong>：从数组中提取多个元素到变量<ul><li>剩余参数与数组解构结合</li><li>跳过某些元素的解构方法</li><li>解构赋值用于交换变量</li><li>嵌套数组解构的实际应用</li></ul></li><li><strong>对象与数组的迭代</strong>：如 <code>forEach</code>、<code>map</code>、<code>filter</code> 等<ul><li>数组方法的返回值与链式调用</li><li>迭代方法中的this参数使用</li><li>迭代方法与for循环的性能比较</li><li>自定义迭代器实现</li></ul></li></ul></li><li><p>ES6+ 新特性</p><ul><li><strong>解构赋值</strong>：对象和数组的解构<ul><li>复杂嵌套解构模式</li><li>解构用于API响应处理</li><li>解构与默认参数结合</li><li>函数参数解构的最佳实践</li></ul></li><li><strong>模板字符串</strong>：使用反引号包围字符串，插入表达式<ul><li>标签模板函数的高级应用</li><li>多行字符串处理与格式化</li><li>嵌套模板字符串的处理</li><li>转义序列的处理</li></ul></li><li><strong>扩展运算符</strong>：用于对象和数组的合并与解构<ul><li>多个对象合并时的属性覆盖规则</li><li>在函数参数中的应用</li><li>与解构赋值结合使用</li><li>实现浅拷贝的方法与限制</li></ul></li><li><strong>箭头函数</strong>：简化函数声明，自动绑定 <code>this</code><ul><li>在回调函数中的优势</li><li>隐式返回对象字面量的语法</li><li>不适合使用箭头函数的场景</li><li>与事件处理函数结合使用</li></ul></li><li><strong>类（Class）</strong>：ES6 的面向对象编程，如何定义类与继承<ul><li>私有字段与方法（#语法）</li><li>静态属性与静态方法</li><li>getter&#x2F;setter在类中的应用</li><li>继承与super关键字的使用</li><li>混入模式实现多继承</li></ul></li><li><strong>Promise</strong>：处理异步操作的对象，如何链式调用（<code>then</code>&#x2F;<code>catch</code>）以及捕获错误<ul><li>Promise嵌套与扁平化</li><li>Promise.all&#x2F;race&#x2F;allSettled&#x2F;any的区别</li><li>自定义Promise实现</li><li>微任务队列与事件循环的关系</li></ul></li><li><strong>Set 和 Map</strong>：新的数据结构，用于存储唯一值和键值对<ul><li>WeakSet与WeakMap的特性与应用</li><li>实现高效的数据去重</li><li>Map与Object作为字典的对比</li><li>Set&#x2F;Map的迭代方法</li></ul></li><li><strong>其他ES6+特性</strong><ul><li>Proxy与Reflect API的使用</li><li>装饰器语法与应用(Stage 3)</li><li>可选链操作符(?.)与空值合并(??)</li><li>顶层await的使用(ES2022)</li><li>私有类字段与方法</li></ul></li></ul></li><li><p>异步编程</p><ul><li><strong>回调函数</strong>：理解回调的使用，及回调地狱问题<ul><li>错误优先回调约定</li><li>异步回调与同步回调的区别</li><li>实现控制流程的各种回调模式</li><li>回调地狱的重构方法</li></ul></li><li><strong>Promise</strong>：如何创建和使用 Promise 来解决异步问题<ul><li>Promise链中断的处理</li><li>并行Promise操作的实现方法</li><li>Promise错误处理的最佳实践</li><li>超时与竞态处理</li></ul></li><li><strong>async&#x2F;await</strong>：通过 <code>async</code> 和 <code>await</code> 简化异步代码，使其看起来像同步代码<ul><li>顺序执行vs并行执行</li><li>错误处理策略</li><li>与Promise混合使用</li><li>在循环中使用await的陷阱</li></ul></li><li><strong>错误处理</strong>：如何通过 <code>try/catch</code> 捕获异步错误，确保代码的健壮性<ul><li>全局错误处理</li><li>特定类型错误处理</li><li>错误传播与处理策略</li><li>自定义错误类型</li></ul></li><li><strong>其他异步模式</strong><ul><li>发布&#x2F;订阅模式</li><li>生成器与异步迭代</li><li>可取消的异步操作</li><li>RxJS与响应式编程</li></ul></li></ul></li><li><p>模块化</p><ul><li><strong>模块化引入</strong>：<code>import</code> 和 <code>export</code> 语法，如何将代码分割到不同文件并导入使用<ul><li>命名导出vs默认导出</li><li>动态导入与代码分割</li><li>导入时重命名模块成员</li><li>导入多个模块成员的模式</li></ul></li><li><strong>CommonJS 与 ES6 Modules</strong>：区别与使用场景<ul><li>两种模块系统的主要差异</li><li>混合使用两种模块系统</li><li>Node.js中的模块解析策略</li><li>循环依赖处理</li></ul></li><li><strong>模块打包与构建</strong><ul><li>使用Webpack&#x2F;Rollup等工具</li><li>Tree-shaking机制</li><li>代码分割与懒加载</li><li>模块热替换(HMR)</li></ul></li><li><strong>模块设计模式</strong><ul><li>揭示模块模式</li><li>单例模式与模块</li><li>依赖注入</li><li>模块组合与聚合</li></ul></li></ul></li><li><p>事件处理</p><ul><li><strong>事件监听</strong>：如何在 DOM 元素上绑定事件监听器，理解事件的冒泡与捕获<ul><li>行内事件vs addEventListener</li><li>多事件处理程序注册</li><li>once选项与单次触发</li><li>passive选项与滚动性能</li></ul></li><li><strong>事件对象</strong>：如何访问事件信息（例如点击的元素、键盘按键等）<ul><li>常用事件属性与方法</li><li>不同事件类型的特有属性</li><li>Event与CustomEvent的区别</li><li>合成事件与原生事件</li></ul></li><li><strong>事件委托</strong>：在父元素上监听事件，提高性能和代码简洁性<ul><li>事件委托的性能优势</li><li>动态元素的事件处理</li><li>复杂嵌套结构中的事件委托</li><li>委托事件的过滤技术</li></ul></li><li><strong>自定义事件</strong><ul><li>创建与分发自定义事件</li><li>事件总线&#x2F;发布订阅模式</li><li>跨组件通信</li><li>事件命名空间</li></ul></li><li><strong>事件流控制</strong><ul><li>事件冒泡与捕获机制详解</li><li>preventDefault与stopPropagation</li><li>event.stopImmediatePropagation</li><li>事件顺序与执行时机</li></ul></li></ul></li><li><p>错误处理与调试</p><ul><li>**<code>try...catch</code>**：捕获并处理同步代码的错误<ul><li>try…catch…finally的完整使用</li><li>各种内置错误类型的识别</li><li>错误包装与重抛出</li><li>多重catch块与特定错误处理</li></ul></li><li><strong>调试工具</strong>：使用浏览器的开发者工具进行调试，<code>console.log()</code>、<code>console.error()</code> 等调试方法<ul><li>条件断点设置</li><li>监视表达式与断点</li><li>调用栈分析</li><li>性能分析工具</li><li>网络请求分析</li></ul></li><li><strong>自定义错误</strong>：创建和抛出自定义错误，例如 <code>throw new Error(&#39;message&#39;)</code><ul><li>继承Error类创建自定义错误</li><li>错误层次结构设计</li><li>带错误代码的错误</li><li>错误本地化</li></ul></li><li><strong>错误日志与监控</strong><ul><li>错误上报系统</li><li>生产环境错误捕获</li><li>用户行为追踪</li><li>异常分析与处理流程</li></ul></li><li><strong>防御式编程</strong><ul><li>输入验证</li><li>参数类型检查</li><li>边界条件测试</li><li>安全错误处理</li></ul></li></ul></li><li><p>性能优化</p></li></ol><ul><li><strong>防抖与节流</strong>：减少高频事件的执行，尤其是输入框、窗口大小调整等<ul><li>自定义防抖函数实现</li><li>自定义节流函数实现</li><li>立即执行的防抖变体</li><li>适合防抖与节流的场景分析</li></ul></li><li><strong>懒加载</strong>：推迟不必要的资源加载，提升初始加载速度<ul><li>图片懒加载实现</li><li>组件懒加载技术</li><li>Intersection Observer API应用</li><li>预加载与懒加载结合</li></ul></li><li><strong>内存管理</strong>：理解垃圾回收机制，避免内存泄漏（如无用的闭包、循环引用等）<ul><li>检测内存泄漏的工具与方法</li><li>常见的内存泄漏模式</li><li>WeakMap&#x2F;WeakSet预防内存泄漏</li><li>大型应用的内存管理策略</li></ul></li><li><strong>算法优化</strong>：理解时间复杂度和空间复杂度，优化循环和递归操作<ul><li>常见排序算法的JavaScript实现</li><li>数据结构选择对性能的影响</li><li>递归优化与尾调用</li><li>动态规划与记忆化</li></ul></li><li><strong>批量DOM操作</strong>：使用文档片段(DocumentFragment)和离线DOM操作减少重排和重绘<ul><li>DocumentFragment优化DOM操作</li><li>虚拟DOM原理</li><li>最小化重排与重绘</li><li>requestAnimationFrame应用</li></ul></li><li><strong>渲染性能</strong><ul><li>硬件加速与will-change</li><li>复合层与层管理</li><li>高效动画实现</li><li>栅格化与绘制优化</li></ul></li><li><strong>JavaScript执行优化</strong><ul><li>Web Worker多线程处理</li><li>代码分割与按需加载</li><li>函数去抖与节流</li><li>JIT优化友好的代码</li></ul></li></ul><ol start="11"><li>Web APIs与本地存储</li></ol><ul><li><strong>localStorage 和 sessionStorage</strong>：客户端存储键值对的不同方式和使用场景<ul><li>存储限制与处理方法</li><li>数据序列化与反序列化</li><li>跨域存储访问限制</li><li>存储事件与同步</li></ul></li><li><strong>Cookies</strong>：了解cookie的设置、读取、参数和安全性考虑<ul><li>Cookie属性详解(HttpOnly, Secure, SameSite)</li><li>第一方Cookie vs 第三方Cookie</li><li>Cookie安全最佳实践</li><li>服务器与客户端Cookie操作</li></ul></li><li><strong>IndexedDB</strong>：客户端结构化数据存储，适用于大量数据存储和复杂查询<ul><li>数据库创建与版本管理</li><li>事务与CRUD操作</li><li>索引创建与高效查询</li><li>异步API使用模式</li></ul></li><li><strong>Cache API</strong>：理解浏览器缓存机制和Service Worker配合使用<ul><li>缓存策略(Cache-First, Network-First等)</li><li>缓存失效与更新</li><li>预加载与离线访问</li><li>与Service Worker集成</li></ul></li><li><strong>Geolocation API</strong>：获取用户位置信息<ul><li>位置权限管理</li><li>高精度vs低功耗选项</li><li>位置监视与更新</li><li>错误处理与降级策略</li></ul></li><li><strong>Web Workers</strong>：在后台线程执行计算密集型任务，避免阻塞主线程<ul><li>创建与使用Worker</li><li>Worker间通信</li><li>SharedWorker与跨标签页通信</li><li>Worker中可用的API</li></ul></li><li><strong>其他重要Web APIs</strong><ul><li>Fetch API与网络请求</li><li>Web Sockets实时通信</li><li>File API与本地文件操作</li><li>Web Audio API音频处理</li><li>Canvas与WebGL图形渲染</li><li>Drag and Drop API</li></ul></li></ul><ol start="12"><li>现代JavaScript与最佳实践</li></ol><ul><li><strong>函数式编程</strong>：纯函数、不可变性和高阶函数的概念和使用<ul><li>纯函数概念与实践</li><li>高阶函数与函数组合</li><li>柯里化与偏函数应用</li><li>不可变数据处理</li><li>函数式编程库(Ramda, Lodash&#x2F;fp)</li></ul></li><li><strong>代码分割</strong>：动态导入和懒加载模块，提高应用加载性能<ul><li>基于路由的代码分割</li><li>基于组件的代码分割</li><li>import()语法与webpack集成</li><li>预加载与预获取技术</li></ul></li><li><strong>空值处理</strong>：使用空值合并运算符(??)和可选链操作符(?.)<ul><li>空值合并与默认值的区别</li><li>深层属性访问安全策略</li><li>空值处理的模式与反模式</li><li>Maybe模式与Option类型</li></ul></li><li><strong>TypeScript基础</strong>：类型系统、接口和泛型的基本概念<ul><li>基本类型注解</li><li>接口与类型别名</li><li>泛型编程</li><li>TypeScript配置与集成</li><li>类型声明文件(.d.ts)</li></ul></li><li><strong>状态管理</strong>：了解常见的状态管理模式和原则<ul><li>单向数据流</li><li>不可变状态原则</li><li>状态容器设计</li><li>发布&#x2F;订阅模式</li><li>Context API与Redux比较</li></ul></li><li><strong>测试技术</strong>：单元测试、集成测试的基本概念和工具<ul><li>Jest, Mocha等测试框架</li><li>BDD vs TDD方法论</li><li>测试覆盖率与质量度量</li><li>模拟与存根</li><li>E2E测试与Cypress</li></ul></li><li><strong>代码规范</strong>：了解ESLint、Prettier等工具，保持代码一致性和质量<ul><li>配置ESLint规则</li><li>Prettier代码格式化</li><li>Git hooks与提交前检查</li><li>风格指南与团队规范</li><li>JSDoc文档注释</li></ul></li><li><strong>设计模式与架构</strong><ul><li>常用JavaScript设计模式</li><li>组件化与模块化设计</li><li>SOLID原则应用</li><li>微前端架构</li><li>服务端渲染vs客户端渲染</li></ul></li></ul><script src='/js/series.js'></script>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机系统漫游</title>
      <link href="/blog/post/37jfws7d.html"/>
      <url>/blog/post/37jfws7d.html</url>
      
        <content type="html"><![CDATA[<h2 id="计算机体系结构中的伟大思想"><a href="#计算机体系结构中的伟大思想" class="headerlink" title="计算机体系结构中的伟大思想"></a>计算机体系结构中的伟大思想</h2><ol><li>使用抽象简化设计<br>隐层底层细节以提供给高层一个更简单的模型</li><li>加速经常性事件<br>优化经常性事件远比优化罕见情形能够更好地提高性能</li><li>通过并行提高性能<br>通过同时执行多个任务来提高性能</li><li>通过流水线提高性能<br>通过将指令分解成多个阶段，并运行多条指令同时在不同阶段上执行来提高性能</li><li>通过预测提高性能<br>假设从预测错误中恢复的代价并不高，且大多数时候预测相对准确，那么预测并开始工作要比明确结果后在执行要快</li><li>存储层次<br>设计存储层次的目的是在性能、成本和容量之间找到平衡，使系统既能够快速访问数据，又具有足够的存储空间</li><li>通过冗余提高可靠性<br>通过引入冗余组件来使得系统可靠</li></ol><p>这些思想将会在后续中应用与体现。</p><h2 id="程序表层之下"><a href="#程序表层之下" class="headerlink" title="程序表层之下"></a>程序表层之下</h2><p>计算机的硬件只能执行极其简单的低级指令，从复杂的应用程序到原始的指令涉及若干软件层次来将高层次操作解释或翻译成简单的计算机指令，这些软件层次结果为以下三层：</p><ol><li>应用软件</li><li>系统软件</li><li>硬件</li></ol><p>应用软件运行在系统软件之上，系统软件运行在硬件之上。</p><p>系统软件有很多种，其中对于现代计算机系统来说是必须的：操作系统和编译器。<br>操作系统（operating system）是用户程序和硬件之间的接口，为用户提供各种服务和监控功能，操作系统最重要的作用是：</p><ul><li>处理基本的输入和输出操作</li><li>分配外存和内存</li><li>为多个应用程序提供共享计算机资源的服务</li></ul><p>编译器（compiler）把高级语言（比如 C、C++、Java 或 Visual Basic 等）编写成的程序硬件能执行的指令，这个翻译过程相当复杂，这里仅作简要介绍，后续会深入介绍。<br>硬件能够执行的指令是一串二进制位，比如：<code>1001010100101110</code>，通过编写这些二进制串可以直接与计算机进行通信，但是这是相当繁琐的，所以计算机设计者很快就发明了助记符来解决这个问题，这样更加符合人类的思维方式。原先这个将助记符转换成二进制串的过程是手工进行的，后来计算机设计者开发了一种软件称为汇编器（assembler）来自动执行这个过程，比如程序员写下：<code>add A, B</code>，汇编器就会将其翻译成<code>1001010100101110</code>。这个过程称为汇编（assemble），这种符号语言称为汇编语言（assembly language），机器可以直接执行的二进制语言称为机器语言（machine language）。<br>与之类似的编译器则是将高级编程语言翻译成汇编语言，比如程序员写下：<code>A + B</code>，编译器就会将其翻译成<code>add A, B</code>。<br>这些编程语言层次都是抽象思想的伟大体现。</p><h2 id="硬件组件"><a href="#硬件组件" class="headerlink" title="硬件组件"></a>硬件组件</h2><p>一台计算机的基础硬件包含以下：</p><ul><li>运算器：处理数据</li><li>控制器：控制指令执行和数据流向</li><li>存储器：存储指令和数据</li><li>输入设备：输入数据</li><li>输出设备：输出数据</li></ul><p>现代计算机硬件也是由这几部分组成但是复杂程度要高很多，所以硬件会被简化成一层抽象来提供硬件与底层软件之间的接口，这就是指令集架构（ISA，Instruction Set Architecture）。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>衡量一台计算机的性能主要看响应时间（执行时间）和吞吐率（带宽），响应时间就是一台计算机从开始任务到完成任务所花费的时间，吞吐率为给定时间内完成的任务数。</p><p>一般来说程序执行时间越短，计算机性能越好，在统计程序执行时间时我们一般将重点放在 CPU 执行时间上而不包括 I&#x2F;O 或其他程序的时间。<br>在计算 CPU 时间时会关注需要几个参数：</p><ul><li>指令数</li><li>指令平均时钟周期数（CPI，Clock cycle Per Instruction）</li><li>时钟周期长度</li></ul><p>指令数为程序包含的指令数量，指令平均时钟周期数为平均每条指令需要花费的时钟周期数量，时钟周期长度一般用 CPU 时钟频率倒数来表示。</p><p>$$ CPU 时间 &#x3D; \frac{指令数 \times CPI}{时钟频率} $$</p><p>除此之外，还有一个表示 CPU 性能的方法 ，每秒平均指令数（IPS，Instruction Per Second）。</p><p>$$ IPS &#x3D; \frac{时钟频率}{CPI} $$</p><h2 id="基准评测程序"><a href="#基准评测程序" class="headerlink" title="基准评测程序"></a>基准评测程序</h2><p>不同的用户会使用计算机从事各种工作，使用到不同的程序，如果使用不同的程序来衡量不同计算机性能的话将会无法比较，所以就有了由多个计算机销售商出资赞助的组织 SPEC（System Performance Evaluation Cooperative），SPEC 建立的基准评测程序集可以为不同的计算机评测其性能，目前最新的程序集为 SPEC CPU2017，它包含 10 个整数基准程序集（SPECspeed 2017 Integer）和 13 个浮点基准程序集（SPECspeed 2017 Floating Point）。整数基准程序集中包含 C 编译器、下象棋程序、量子计算机仿真等，浮点基准程序集包含有限元模型结构化网格法、分子动力学质点法、流体动力学稀疏线性代数法等。</p><h2 id="Amdahl-定律"><a href="#Amdahl-定律" class="headerlink" title="Amdahl 定律"></a>Amdahl 定律</h2><p>Amdahl 定律的含义是：提升一个系统的一部分的性能对整个系统有多大的影响。<br>计算公式如下：</p><p>$$ \text{改进后的执行时间} &#x3D; \frac{\text{受改进影响的执行时间}}{\text{改进量}} + \text{不受影响的执行时间} $$</p><p>这表明了对于一部分的性能改进对整个系统的提升会由这个部分在整个系统中的占比所影响，它是“收益递减定律”的量化版本。</p><p>比如一个程序在一台计算机上运行需要100秒，其中乘法部分需要80秒，如果对乘法部分进行改进使得整个程序的运行速度提高5倍，那么乘法部分的运行时间则为0秒，这意味着只对乘法部分进行改进以提升5倍性能是不可能的。</p>]]></content>
      
      
      <categories>
          
          <category> 深入理解计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解计算机系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>处理器体系结构</title>
      <link href="/blog/post/03b23ak4.html"/>
      <url>/blog/post/03b23ak4.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>了解了程序在机器级的表示方式和运作原理后，我们将进一步的研究处理器是如何实现指令集架构的，我们将从硬件电路开始，研究指令集架构在 cpu 内部是如何实现的。但是现在现代微处理器的体系结构是如此的精细复杂，可以称得上是人类创造出的最复杂的系统之一了，如果我们从相对熟悉的 x86-64 架构开始实现的话，可能会花上相当长的一段时间，所以我们将会实现一个受 x86-64 启发的架构，Y86-64，它是 x86-64 架构的精简版，可以让我们在实现上省去一些复杂精细的结构，在总体上对 cpu 的体系结构有个大致的了解。</p><h2 id="Y86-64"><a href="#Y86-64" class="headerlink" title="Y86-64"></a>Y86-64</h2><p>定义一个指令集体系架构（例如 Y86-64）包括定义各种状态单元、指令集和它们得编码、一组编程规范和异常事件处理体系。</p><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>在 Y86-64 中有几个可见状态，分别为：</p><ul><li>RF：程序寄存器</li><li>CC：条件码</li><li>PC：程序计数器</li><li>Stat：程序状态</li><li>DMEM：内存</li></ul><p>RF 中有 15 个程序寄存器：%rax、%rcx、%rdx、%rbx、%rsp、%rbp、%rsi、%rdi 和%r8 到%r14（省略了 x86-64 中的%r15 来简化指令编码）每个寄存器存储一个 64 位的字。寄存器%rsp 被入栈、出栈、调用和返回指令作为栈指针使用，除此之外其他寄存器没有固定的含义或固定值。</p><p>CC 中有 3 个一位的条件码：ZF、OF 和 SF。</p><p>PC 中存放当前正在执行的指令地址。</p><p>Stat 中的状态码表明程序执行的总体状态，它会指示程序是正常运行还是出现了某种异常。</p><p>DMEM 看作是虚拟内存系统提供的一个单一的字节数组映射，先不考虑虚拟内存的具体实现。</p><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>Y86-64 中只有 8 字节整数的操作，内存引用方式也只有简单的基址加偏移量的形式，也不支持任何寄存器值的伸缩，下面是 Y86-64 中的所有指令：</p><ul><li>4 个数据传送指令。Y86-64 将 x86-64 的 movq 分成四条指令，分别为 irmovq、rrmovq、mrmovq 和 rmmovq，在 Y86-64 中需要在前缀中显式指定源和目的的类型，i 指代立即数（immediate）、r 指代寄存器（register）、m 指代内存（memory）。</li><li>4 个整数操作指令，OPq。OP（operation）代表操作类型，分别为：addq、subq、andq 和 xorq，这些指令会设置 3 个条件码 ZF、OF 和 SF。</li><li>7 个跳转指令，jXX。jmp、je、jne、jl、jle、jg、jge。</li><li>6 个条件传送指令，cmovXX。cmovle、cmovl、cmove、cmovne、cmovge、comvg，这些指令只能从寄存器传送到寄存器。</li><li>call 指令将返回地址入栈，然后跳转到目的地址。ret 指令从调用中返回。</li><li>pushq 指令入栈。popq 指令出栈。</li><li>halt 指令停止指令运行。Y86-64 中和 halt 和 x86-64 中的 hlt 相似。x86-64 应用不允许使用 hlt，因为会使得整个系统停止运行，对于 Y86-64 来说，halt 会使得处理器停止运行，并设置状态码为 HLT。</li></ul><h3 id="指令编码"><a href="#指令编码" class="headerlink" title="指令编码"></a>指令编码</h3><p>以下为 Y86-64 指令集字节级编码：</p><table>  <tr><td>字节</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>  <tr><td>halt</td><td>00</td><td colspan="9"></td></tr>  <tr><td>nop</td><td>10</td><td colspan="9"></td></tr>  <tr><td>rrmovq rA, rB</td><td>20</td><td>rArB</td><td colspan="8"></td></tr>  <tr><td>irmovq V, rB</td><td>30</td><td>FrB</td><td colspan="8">V</td></tr>  <tr><td>rmmovq rA, D(rB)</td><td>40</td><td>rArB</td><td colspan="8">D</td></tr>  <tr><td>mrmovq D(rB), rA</td><td>50</td><td>rArB</td><td colspan="8">D</td></tr>  <tr><td>OPq rA, rB</td><td>6fn</td><td>rArB</td><td colspan="8"></td></tr>  <tr><td>jXX Dest</td><td>7fn</td><td colspan="8">Dest</td><td></td></tr>  <tr><td>cmovXX rA, rB</td><td>2fn</td><td>rArB</td><td colspan="8"></td></tr>  <tr><td>call Dest</td><td>80</td><td colspan="8">Dest</td><td></td></tr>  <tr><td>ret</td><td>90</td><td colspan="9"></td></tr>  <tr><td>pushq rA</td><td>A0</td><td>rAF</td><td colspan="8"></td></tr>  <tr><td>popq rA</td><td>B0</td><td>rAF</td><td colspan="8"></td></tr></table><p>每条指令的第一个字节表明指令的类型，这个字节分为两部分：高四位为代码（code）部分，第四位为功能（function）部分。<br>其中功能部分 fn 的具体编码为：</p><ul><li>整数操作指令：<ul><li>addq：60</li><li>subq：61</li><li>andq：62</li><li>xorq：63</li></ul></li><li>分支指令：<ul><li>jmp：70</li><li>jle：71</li><li>jl：72</li><li>je：73</li><li>jne：74</li><li>jge：75</li><li>jg：76</li></ul></li><li>传送指令：<ul><li>rrmovq：20</li><li>cmovle：21</li><li>comvl：22</li><li>cmove：23</li><li>cmovne：24</li><li>cmovge：25</li><li>cmovg：26</li></ul></li></ul><p>rA，rB 为寄存器，每个寄存器使用 4 个位来编码，具体如下：</p><ul><li>rax：0</li><li>rcx：1</li><li>rdx：2</li><li>rbx：3</li><li>rsp：4</li><li>rbp：5</li><li>rsi：6</li><li>rdi：7</li><li>r8 ：8</li><li>r9 ：9</li><li>r10：A</li><li>r11：B</li><li>r12：C</li><li>r13：D</li><li>r14：E</li><li>无寄存器：F</li></ul><p>跳转指令使用绝对寻址的方式，不使用 PC 相对寻址。</p><p>有些指令需要一个附加的 8 字节常数，我们默认是在小端法机器上实现，所以这个常数需要按字节反序，0x0123456789abcdef 反序后为<code>ef cd ab 89 67 45 23 01</code>，比如：<code>rmmovq %rsp, 0x123456789abcd(%rdx)</code>的编码为<code>40 42 cd ab 89 67 45 23 01 00</code>。</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>Y86-64 中有几个异常，如下：</p><table><thead><tr><th>值</th><th>名字</th><th>含义</th></tr></thead><tbody><tr><td>1</td><td>AOK</td><td>正常操作</td></tr><tr><td>2</td><td>HLT</td><td>遇到 halt 指令</td></tr><tr><td>3</td><td>ADR</td><td>遇到非法地址</td></tr><tr><td>4</td><td>INS</td><td>遇到非法指令</td></tr></tbody></table><h2 id="逻辑设计和硬件控制语言（HCL）"><a href="#逻辑设计和硬件控制语言（HCL）" class="headerlink" title="逻辑设计和硬件控制语言（HCL）"></a>逻辑设计和硬件控制语言（HCL）</h2><p>指令集架构是通过处理器内部的数字电路实现的，我们在这里将会简单的介绍一些数字电路的知识和 HCL 来描述不同部件的设计逻辑。</p><h3 id="逻辑门"><a href="#逻辑门" class="headerlink" title="逻辑门"></a>逻辑门</h3><p>所有数字电路都是由一个个逻辑门组成的，逻辑门可以实现单个位的逻辑判断，有以下 3 种逻辑门：</p><ul><li>与门（AND）</li><li>或门（OR）</li><li>非门（NOT）</li></ul><p>与门可以实现 a&amp;&amp;b，或门实现 a||b，非门实现!a。</p><h3 id="组合逻辑电路和-hcl-布尔表达式"><a href="#组合逻辑电路和-hcl-布尔表达式" class="headerlink" title="组合逻辑电路和 hcl 布尔表达式"></a>组合逻辑电路和 hcl 布尔表达式</h3><p>通过逻辑门的组合，我们可以实现更多复杂的逻辑判断，这些组合逻辑电路的硬件结构会非常庞大和复杂，所以我们会使用 hcl 布尔表达式来简化它的描述和表达，比如一个判断位级相等的电路为：<code>bool eq = (a &amp;&amp; b) || (!a &amp;&amp; !b)</code>，还有一个位级的多路复用器为：<code>bool out = (s &amp;&amp; a) || (!s &amp;&amp; b)</code>，hcl 表达式类似 c 语言中的函数，<code>bool</code>为返回值类型，其中<code>bool</code>表示单个位，如果是字级的返回值会使用<code>word</code>。</p><p>将位级逻辑判断的电路进行组合我们可以实现字级逻辑判断的电路，比如 64 位字的判断相等电路就是由 64 个位级判断相等的电路组成的，表达式为：<code>bool Eq = (A == B)</code>，字级的多路复用器为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">word Out = [</span><br><span class="line">    s: A;</span><br><span class="line">    1: B;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这个语句的判断顺序类似于 c 语言的 switch 语言，从上到下依次判断冒号前的布尔表达式是否为真，若为真则输出为冒号后的表达式，否则继续向下执行。</p><p>还有更多的例子，如果是一个字级的四路复用器，有两个控制信号 s0、s1，四个字级的输入 A、B、C、D，它的表达式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">word Out4 = [</span><br><span class="line">    !s1 &amp;&amp; !s0: A; # 00</span><br><span class="line">    !s1: B; # 01</span><br><span class="line">    !s0: C; # 10</span><br><span class="line">    1: D; # 11</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果是一个字级选 3 个数中最小的数的电路，它的表达式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">word Min3 = [</span><br><span class="line">    A &lt;= B &amp;&amp; B &lt;= C: A;</span><br><span class="line">    B &lt;= A &amp;&amp; B &lt;= C: B;</span><br><span class="line">    1: C;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>除此之外，我们定义一个简单的 ALU（算术\逻辑单元），有两个字级的输入 X、Y，当控制信号的输入为 0 时，输出为 X+Y，输入为 1 时，输出为 X-Y，输入为 2 时，输出为 X&amp;Y，输入为 3 时，输出为 X^Y，表达式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">word ALU = [</span><br><span class="line">    !s1 &amp;&amp; !s0: X + Y; # 00 0</span><br><span class="line">    !s1: X - Y; # 01 1</span><br><span class="line">    !s0: X &amp; Y; # 10 2</span><br><span class="line">    1: X ^ Y; # 11 3</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>以上的控制信号表达有些繁琐，我们可以使用 hcl 中的集合关系表达式来简化，假设一个 2 位的 code 信号，将其译码成两条电路 s0、s1，在之前我们这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool s1 = code == 2 || code == 3;</span><br><span class="line">bool s2 = code == 1 || code == 2;</span><br></pre></td></tr></table></figure><p>使用集合关系简化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool s1 = code in &#123;2, 3&#125;;</span><br><span class="line">bool s2 = code in &#123;1, 3&#125;;</span><br></pre></td></tr></table></figure><h3 id="存储器和时钟"><a href="#存储器和时钟" class="headerlink" title="存储器和时钟"></a>存储器和时钟</h3><p>数字电路有两大类，组合逻辑电路和时序逻辑电路，以上的数字电路为前者，时序逻辑电路可以根据电路的输入和原有状态来改变输出，而组合逻辑电路只能根据电路的输入来改变输出，所以通过时序逻辑电路我们可以实现寄存器和存储器。<br>时序逻辑电路需要时钟来驱动，当时钟的上升沿或者下降沿到来时，电路的输出就会根据输入和原有状态来改变。由于时序逻辑电路的底层比较复杂，我们不会去研究它的具体电路结构，因为这要涉及到数电中大量的触发器等知识，我们会直接使用它们的抽象，我们统一规定后续抽象依赖时钟的使用都是当时钟的上升沿到来时触发。</p><p>寄存器文件，它实现了寄存器，它有两个读端口，A、B，每个读端口有一个输入 src(source，代表寄存器 ID)和一个输出 val(value，输出值)，还有一个写端口，有两个输入 valW（value write，写入值）、dstW（destination write，写入的寄存器 ID），最后还有时钟信号，寄存器文件的读不需要依赖时钟，而写需要依赖时钟的上升沿，以下是它的工作过程：</p><ul><li>读出<ol><li>更新 srcA 或 srcB</li><li>valA 或 valB 更新为对应 src 中寄存器的值</li></ol></li><li>写入<ol><li>更新 valW 和 dstW</li><li>等待时钟上升沿到来</li><li>对应寄存器更新成输入值</li></ol></li></ul><p>数据存储器，它实现了存储器，他有一个读\写信号，一个数据输出，一个数据输入，一个地址信号，一个异常输出以及时钟信号，它同寄存器文件一样，读不依赖时钟，写依赖时钟，以下是它的工作过程：</p><ul><li>读出<ol><li>读写信号设置为 0</li><li>更新地址信号为期望读出数据的地址</li><li>如果地址超出范围，异常输出 1，否则数据输出更新为对应地址数据，异常输出 0</li></ol></li><li>写入<ol><li>读写信号设置为 1</li><li>更新地址信号为期望写入数据的地址</li><li>等待时钟上升沿到来</li><li>如果地址超出范围，异常输出 1，否则对应地址数据更新为输入数据，异常输出 0</li></ol></li></ul><h2 id="Y86-64-的顺序实现"><a href="#Y86-64-的顺序实现" class="headerlink" title="Y86-64 的顺序实现"></a>Y86-64 的顺序实现</h2><p>我们现在已经有了实现 Y86-64 处理器所需的部件了，我们将会描述一个 SEQ（sequential，顺序的）的处理器。SEQ 处理器会在一个时钟周期中会执行一条完整指令所需的所有步骤，这样的处理器的 IPC 会非常低，十分低效，不过开发 SEQ 只是第一步，我们最终会实现一个高效的、流水线化的处理器。</p><h3 id="将处理组织成阶段"><a href="#将处理组织成阶段" class="headerlink" title="将处理组织成阶段"></a>将处理组织成阶段</h3><p>通常多数指令的部分操作都存在相似性，如果每个指令都是用一套独立的电路来实现那么成本将是高昂的，虽然指令的动作差异很大，但是都是按照遵循统一的序列的，我们可以创建一套执行指令的框架来设计一个充分利用硬件的处理器。下面是关于各个阶段和阶段内部执行操作的描述：</p><ul><li>取指（fetch）：取指阶段将从内存中读取指令字节，地址为 PC 的值。从指令字节中抽出两个四位的部分，称为 icode（指令代码）和 ifun（指令功能）。它还可能读出一个寄存器指示符字节，指明一个或两个寄存器 rA 和 rB。除此之外，他还可能取出一个 8 字节的常数 valC。然后计算出下一条指令的地址 valP，也就是说 valP 为 PC 的值加上已取出的指令长度。</li><li>译码（decode）：译码阶段从寄存器文件读入最多两个操作数，得到 valA 和 valB。它通常读入寄存器指示符字段指明的寄存器，而有些指令可能是读入%rsp 的值。</li><li>执行（execute）：执行阶段，ALU 要么执行 ifun 指明的操作，计算内存引用的有效地址，要么增加和减少栈指针。得到的值为 valE。除此之外，它还可能设置条件码。如果是条件传送指令，它会检验条件码和传送条件，如果条件成立则更新目标寄存器。同样的，如果是条件跳转指令，它会判断是否选择分支。</li><li>访存（memory）：访存阶段可以将数据写入内存或者通过内存读出数据。读出的值为 valM。</li><li>写回（write back）：写回阶段最多可以写两个结果到寄存器文件。</li><li>更新 PC（PC update）：将 PC 设置为下一条指令的地址。</li></ul><p>处理器会无限循环的执行这些阶段，在我们简化的处理器中，如果发生了任何的异常，处理器就会停止。在完整的设计中，处理器会进入异常处理模式，开始执行由异常类型指定的代码。</p><p>以下是一些不涉及到访存的指令所需的通用执行过程：</p><table><thead><tr><th>阶段</th><th>OPq rA, rB</th><th>rrmovq rA, rB</th><th>irmovq V, rB</th></tr></thead><tbody><tr><td>取指</td><td>icode:ifun &lt;- M1[PC] <br> rA:rB &lt;- M1[PC+1] <br> &nbsp; <br> valP &lt;- PC+2</td><td>icode:ifun &lt;- M1[PC] <br> rA:rB &lt;- M1[PC+1] <br> &nbsp; <br> valP &lt;- PC+2</td><td>icode:ifun &lt;- M1[PC] <br> rA:rB &lt;- M1[PC+1] <br> valC &lt;- M8[PC+2] <br> valP &lt;- PC+10</td></tr><tr><td>译码</td><td>valA &lt;- R[rA] <br> valB &lt;- R[rB]</td><td>valA &lt;- R[rA] <br> &nbsp;</td><td>&nbsp; <br> &nbsp;</td></tr><tr><td>执行</td><td>valE &lt;- valB OP valA <br> Set CC</td><td>valE &lt;- 0+valA <br> &nbsp;</td><td>valE &lt;- 0+valC <br> &nbsp;</td></tr><tr><td>访存</td><td></td><td></td><td></td></tr><tr><td>写回</td><td>R[rB] &lt;- valE <br> &nbsp;</td><td>R[rB] &lt;- valE <br> &nbsp;</td><td>R[rB] &lt;- valE <br> &nbsp;</td></tr><tr><td>更新 PC</td><td>PC &lt;- valP</td><td>PC &lt;- valP</td><td>PC &lt;- valP</td></tr></tbody></table><p>以下是涉及到访存的指令所需的通用执行过程：</p><table><thead><tr><th>阶段</th><th>rmmovq rA, D(rB)</th><th>mrmovq D(rB), rA</th></tr></thead><tbody><tr><td>取指</td><td>icode:ifun &lt;- M1[PC] <br> rA:rB &lt;- M1[PC+1] <br> valC &lt;- M8[PC+2] <br> valP &lt;- PC+10</td><td>icode:ifun &lt;- M1[PC] <br> rA:rB &lt;- M1[PC+1] <br> valC &lt;- M8[PC+2] <br> valP &lt;- PC+10</td></tr><tr><td>译码</td><td>valA &lt;- R[rA] <br> valB &lt;- R[rB]</td><td>&nbsp; <br> valB &lt;- R[rB]</td></tr><tr><td>执行</td><td>valE &lt;- valB+valC <br> &nbsp;</td><td>valE &lt;- valB+valC <br> &nbsp;</td></tr><tr><td>访存</td><td>M8[valE] &lt;- valA</td><td>valM &lt;- M8[valE]</td></tr><tr><td>写回</td><td>&nbsp; <br> &nbsp;</td><td>&nbsp; <br> R[rA] &lt;- valM</td></tr><tr><td>更新 PC</td><td>PC &lt;- valP</td><td>PC &lt;- valP</td></tr></tbody></table><p>以下是 pushq 和 popq 的通用执行过程：</p><table><thead><tr><th>阶段</th><th>pushq rA</th><th>popq rA</th></tr></thead><tbody><tr><td>取指</td><td>icode:ifun &lt;- M1[PC] <br> rA:rB &lt;- M1[PC+1] <br> &nbsp; <br> valP &lt;- PC+2</td><td>icode:ifun &lt;- M1[PC] <br> rA:rB &lt;- M1[PC+1] <br> &nbsp; <br> valP &lt;- PC+2</td></tr><tr><td>译码</td><td>valA &lt;- R[rA] <br> valB &lt;- R[%rsp]</td><td>valA &lt;- R[%rsp] <br> valB &lt;- R[%rsp]</td></tr><tr><td>执行</td><td>valE &lt;- valB+(-8) <br> &nbsp;</td><td>valE &lt;- valB+8 <br> &nbsp;</td></tr><tr><td>访存</td><td>M8[valE] &lt;- valA</td><td>valM &lt;- M8[valA]</td></tr><tr><td>写回</td><td>R[%rsp] &lt;- valE <br> &nbsp;</td><td>R[%rsp] &lt;- valE <br> R[rA] &lt;- valM</td></tr><tr><td>更新 PC</td><td>PC &lt;- valP</td><td>PC &lt;- valP</td></tr></tbody></table><p>以下是 jXX 和 cmovXX 的通用执行过程：</p><table><thead><tr><th>阶段</th><th>jXX Dest</th><th>cmovXX rA, rB</th></tr></thead><tbody><tr><td>取指</td><td>icode:ifun &lt;- M1[PC] <br> &nbsp; <br> valC &lt;- M8[PC+1] <br> valP &lt;- PC+9</td><td>icode:ifun &lt;- M1[PC] <br> rA:rB &lt;- PC+1 <br> &nbsp; <br> valP &lt;- PC+2</td></tr><tr><td>译码</td><td>&nbsp; <br> &nbsp;</td><td>valA &lt;- R[rA] <br> &nbsp;</td></tr><tr><td>执行</td><td>&nbsp; <br> Cnd &lt;- Cond(CC, ifun)</td><td>valE &lt;- 0+valA <br> Cnd &lt;- Cond(CC, ifun)</td></tr><tr><td>访存</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>写回</td><td>&nbsp; <br> &nbsp;</td><td>&nbsp; <br> if(Cnd) R[rB] &lt;- valE</td></tr><tr><td>更新 PC</td><td>PC &lt;- Cnd?valC:valP</td><td>PC &lt;- valP</td></tr></tbody></table><p>以下是 call 和 ret 的通用执行过程：</p><table><thead><tr><th>阶段</th><th>call Dest</th><th>ret</th></tr></thead><tbody><tr><td>取指</td><td>icode:ifun &lt;- M1[PC] <br> &nbsp; <br> valC &lt;- M8[PC+1] <br> valP &lt;- PC+9</td><td>icode:ifun &lt;- M1[PC] <br> &nbsp; <br> &nbsp; <br> valP &lt;- PC+1</td></tr><tr><td>译码</td><td>&nbsp; <br> valB &lt;- R[%rsp]</td><td>valA &lt;- R[%rsp] <br> valB &lt;- R[%rsp]</td></tr><tr><td>执行</td><td>valE &lt;- valB+(-8) <br> &nbsp;</td><td>valE &lt;- valB+8 <br> &nbsp;</td></tr><tr><td>访存</td><td>M8[valE] &lt;- valP</td><td>valM &lt;- M8[valA]</td></tr><tr><td>写回</td><td>R[%rsp] &lt;- valE <br> &nbsp;</td><td>R[%rsp] &lt;- valE <br> &nbsp;</td></tr><tr><td>更新 PC</td><td>PC &lt;- valC</td><td>PC &lt;- valM</td></tr></tbody></table><h3 id="SEQ-硬件结构"><a href="#SEQ-硬件结构" class="headerlink" title="SEQ 硬件结构"></a>SEQ 硬件结构</h3><p>介绍完指令执行的框架后，我们将介绍如何从硬件上实现这个框架，下面先总结一下这个框架中每个阶段会使用到的信息：</p><table><thead><tr><th>阶段</th><th>指令</th></tr></thead><tbody><tr><td>取指</td><td>icode:ifun <br> rA,rB <br> valC <br> valP</td></tr><tr><td>译码</td><td>valA,srcA <br> valB,srcB</td></tr><tr><td>执行</td><td>valE <br> Cond.codes</td></tr><tr><td>访存</td><td>Read&#x2F;Write</td></tr><tr><td>写回</td><td>E port,dstE <br> M port,dstM</td></tr><tr><td>更新 PC</td><td>PC</td></tr></tbody></table><p>下图是以上阶段的硬件实现，正如我们设想的那样，SEQ 会在一个周期中运行完整个指令的所有阶段，为了简化线路设计方便理解，我们先不标明信息传递的源和目的，而是将信息放入信息流中，各部件按需从流中取出信息处理并放回流中。</p><p><img src="https://lanal.site/file/blog/post/03b23ak4/1.jpg"></p><ul><li>取指：将 PC 的值作为地址，指令内存读取指令的字节。PC 增加器（使用单独一套电路不使用 ALU）计算 valP。</li><li>译码：从寄存器文件的 A、B 端口同时读取寄存器值 valA 和 valB。</li><li>执行：根据指令类型设置 ALU 的模式然后设置好 aluA 和 aluB 操作数，计算出 valE 并更新条件码。根据条件码和指令条件和类型来计算分支信号 Cnd。</li><li>访存：从数据内存读出或写入一个内存字。指令和数据内存访问的是同一块内存，只是用于不同的目的。</li><li>写回：寄存器文件有两个写端口。端口 E 用来写 ALU 计算出来的新值，端口 M 用来写从数据内存中读出的值。</li><li>更新 PC：根据指令内存，将 PC 的值更新为 valP（下一条指令的地址），valC（调用指令或跳转指令的目标地址），valM（从内存中读取的返回地址）。</li></ul><p>下图给出了更详细的硬件实现，包括了异常处理和 Stat 的更新：</p><p><img src="https://lanal.site/file/blog/post/03b23ak4/2.jpg"></p><h3 id="SEQ-时序"><a href="#SEQ-时序" class="headerlink" title="SEQ 时序"></a>SEQ 时序</h3><p>以上硬件结构中使用到了组合逻辑电路和时序逻辑电路，组合逻辑电路在输入后即可得到输出，而时序逻辑电路在输入后还需等待时钟上升沿的到来才能改变输出，下图给出一个示例有助于理解这一点：</p><p><img src="https://lanal.site/file/blog/post/03b23ak4/3.jpg"></p><h3 id="SEQ-阶段的实现"><a href="#SEQ-阶段的实现" class="headerlink" title="SEQ 阶段的实现"></a>SEQ 阶段的实现</h3><p>下面将会深入分析各个阶段并使用 HCL 来详细详细描述各个部件的硬件实现，我们先回顾一下 Y86-64 中指令的常数值：</p><p><img src="https://lanal.site/file/blog/post/03b23ak4/4.jpg"></p><p>这其中包含了 nop 指令和 halt 指令。nop 指令只是简单的经过各个阶段，除了要将 PC 加 1，不进行任何处理。halt 指令使得处理器状态设置为 HLT，使得处理器停止运行。</p><h4 id="取指阶段"><a href="#取指阶段" class="headerlink" title="取指阶段"></a>取指阶段</h4><p><img src="https://lanal.site/file/blog/post/03b23ak4/5.jpg"></p><p>取指阶段将 PC 的值作为地址从内存中一次读出 10 个字节。然后将字节 0 作为指令字节放入 Split 单元分割成两个 4 位的 icode 和 ifun，若 icode 和 ifun 不合法，或者指令内存地址不合法时，会设置 imem_error 信号指明状态，并将 icode 和 ifun 设置成 nop 指令对应的值来跳过这个字节。字节 1 作为寄存器标识字节设置 rA，rB 信号。字节 2-9 设置 valC。根据 icode 的值可以计算 instr_valid，need_regids，need_valC 信号，以下是它们的意义：</p><ul><li>instr_valid：这个字节是否对应为一个合法的 Y86-64 指令，可用于发现不合法的指令。</li><li>need_regids：这个指令是否包含寄存器标识字节。</li><li>need_valC：这个指令是否包含一个常数字。</li></ul><p>下面是 need_regids 和 need_valC 信号的 HCL 表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool need_regids = icode in &#123;IRRMOVQ, IOPQ, IPUSHQ, IIRMOVQ, IRMMOVQ, IMRMOVQ&#125;;</span><br><span class="line">bool need_valC = icode in &#123;IIRMOVQ, IRMMOVQ, IMRMOVQ, IJXX, ICALL&#125;;</span><br></pre></td></tr></table></figure><p>通过 need_regids 和 need_valC 信号 PC 增加器可以计算出 valP。对于 PC 的值为 p，need_regids 为 r，need_valC 为 i，则<code>valP = p + 1 + r + 8i</code>。</p><h4 id="译码和写回阶段"><a href="#译码和写回阶段" class="headerlink" title="译码和写回阶段"></a>译码和写回阶段</h4><p><img src="https://lanal.site/file/blog/post/03b23ak4/6.jpg"></p><p>寄存器文件有两个读端口（A 和 B）和两个写端口（E 和 M）。每个端口都有一个地址连接和数据连接，地址连接为寄存器 ID，数据连接为一组 64 位信号，对于读口来说是输出字，对于写口来说是输入字。两个读口的地址输入为 srcA 和 srcB，两个写口的地址输入为 dstE 和 dstM。四个地址的输入是根据 icode，rA，rB，Cnd 信号设置的。</p><p>以下是 srcA 和 srcB 的 hcl 表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">word srcA = [</span><br><span class="line">    icode in &#123;IRRMOVQ, IRMMOVQ, IOPQ, IPUSHQ&#125; : rA;</span><br><span class="line">    icode in &#123;IPOPQ, IRET&#125; : RRSP; # RRSP为寄存器%rsp的id</span><br><span class="line">    1 : RNONE; # 不需要寄存器</span><br><span class="line">];</span><br><span class="line">word srcB = [</span><br><span class="line">    icode in &#123;IOPQ, IRMMOVQ, IMRMOVQ&#125; : rB;</span><br><span class="line">    icode in &#123;IPUSHQ, IPOPQ, ICALL, IRET&#125; : RRSP;</span><br><span class="line">    1 : RNONE;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>以下是 dstE 和 dstM 的 hcl 表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">word dstE = [</span><br><span class="line">    icode in &#123;IRRMOVQ&#125; &amp;&amp; Cnd : rB; # 实现条件传送</span><br><span class="line">    icode in &#123;IIRMOVQ, IOPQ&#125; : rB;</span><br><span class="line">    icode in &#123;IPUSHQ, IPOPQ, ICALL, IRET&#125; : RRSP;</span><br><span class="line">    1 : RNONE;</span><br><span class="line">];</span><br><span class="line">word dstM = [</span><br><span class="line">    icode in &#123;IMRMOVQ, IPOPQ&#125; : rA;</span><br><span class="line">    1 : RNONE;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="执行阶段"><a href="#执行阶段" class="headerlink" title="执行阶段"></a>执行阶段</h4><p><img src="https://lanal.site/file/blog/post/03b23ak4/7.jpg"></p><p>根据 icode 和 ifun 设置 alufun 信号来设置 ALU 的计算模式，alufun 的 hcl 表达式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">word alufun = [</span><br><span class="line">    icode == IOPQ : ifun;</span><br><span class="line">    1 : ALUADD;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>根据 icode 设置 aluA 为 valA、valC 或者是-8、+8，aluB 为 valB 或者 0，以下是两者的 hcl 表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">word aluA = [</span><br><span class="line">    icode in &#123;IRRMOVQ, IOPQ&#125; : valA;</span><br><span class="line">    icode in &#123;IIRMOVQ, IMRMOVQ, IRMMOVQ&#125; : valC;</span><br><span class="line">    icode in &#123;IPUSHQ, ICALL&#125; : -8;</span><br><span class="line">    icode in &#123;IPOPQ, IRET&#125; : +8;</span><br><span class="line">    # 其他指令不需要ALU</span><br><span class="line">];</span><br><span class="line">word aluBB = [</span><br><span class="line">    icode in &#123;IMRMOVQ, IRMMOVQ, IOPQ, IPUSHQ, IPOPQ, ICALL, IRET&#125; : valB;</span><br><span class="line">    icode in &#123;IRRMOVQ, IIRMOVQ&#125; : 0;</span><br><span class="line">    # 其他指令不需要ALU</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>最后还有一个 set_cc 信号来控制是否要更新条件码寄存器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool set_cc = icode in &#123;IOPQ&#125;;</span><br></pre></td></tr></table></figure><h4 id="访存阶段"><a href="#访存阶段" class="headerlink" title="访存阶段"></a>访存阶段</h4><p><img src="https://lanal.site/file/blog/post/03b23ak4/8.jpg"></p><p>两个控制块产生内存地址和输入数据，两个控制块控制是执行读操作还是写操作，以下是读写信号的 hcl 代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool mem_read = icode in &#123;IMRMOVQ, IPOPQ, IRET&#125;;</span><br><span class="line">bool mem_write = icode in &#123;IRMMOVQ, IPUSHQ, ICALL&#125;;</span><br></pre></td></tr></table></figure><p>以下是内存地址和输入数据的 hcl 代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">word mem_addr = [</span><br><span class="line">    icode in &#123;IRMMOVQ, IPUSHQ, ICALL, IMRMOVQ&#125; : valE;</span><br><span class="line">    icode in &#123;IPOPQ, IRET&#125; : valA;</span><br><span class="line">    # 其他指令不需要产生内存地址</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">word mem_data = [</span><br><span class="line">    icode in &#123;IRMMOVQ, IPUSHQ&#125; : valA;</span><br><span class="line">    icode in &#123;ICALL&#125; : valP;</span><br><span class="line">    # 其他指令不需要产生内存输入数据</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>如果内存地址不合法将会设置 dmem_error 信号，最后 Stat 将会根据 icode、imem_error、instr_valid 和 dmem_error 计算出状态码 Stat，以下是 Stat 的 hcl 代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">word Stat = [</span><br><span class="line">    imem_error || dmem_error : SADR;</span><br><span class="line">    !instr_valid: SINS;</span><br><span class="line">    icode == IHALT : SHLT;</span><br><span class="line">    1 : SAOK;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="更新-PC-阶段"><a href="#更新-PC-阶段" class="headerlink" title="更新 PC 阶段"></a>更新 PC 阶段</h4><p><img src="https://lanal.site/file/blog/post/03b23ak4/9.jpg"></p><p>最后一个阶段会产生 PC 的新值。根据 icode 和 Cnd，new_pc 可能为 valC，valM 或 valP，以下是 hcl 代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">word new_pc = [</span><br><span class="line">    icode == ICALL : valC;</span><br><span class="line">    icode == IJXX &amp;&amp; Cnd : valC;</span><br><span class="line">    icode == IRET : valM;</span><br><span class="line">    1 : valP;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="SEQ-小结"><a href="#SEQ-小结" class="headerlink" title="SEQ 小结"></a>SEQ 小结</h4><p>现在我们已经浏览了 Y86-64 处理器的一个完整设计。可以看到，通过将执行每条指令所需的步骤组织成一个统一的流程，就可以用少量的各种硬件单元以及一个时钟来控制计算的顺序，从而实现整个处理器。SEQ 的唯一问题就是太慢了，时钟必须非常慢才能使信号在一个周期中传输完所有阶段。这种实现方式不能充分利用硬件单元，因为每个硬件单元只在整个时钟周期的一部分时间中被使用到。后续我们将会引进流水线设计来获得更好的性能。</p><h2 id="流水线的通用原理"><a href="#流水线的通用原理" class="headerlink" title="流水线的通用原理"></a>流水线的通用原理</h2><p>流水线（pipeline）是一项提高系统吞吐量的重要技术。它的基本思想是将一个任务分解为多个连续的步骤或阶段，每个阶段由专门的硬件电路来执行。通过这种方式，我们可以同时处理多条指令，每条指令处于执行的不同阶段。<br>为了理解流水线的原理，我们可以通过一个简单的例子来说明：<br>现在假设洗一批衣服需要三个步骤：洗、漂洗和烘干，每个步骤需要 30 分钟。如果采用顺序处理的方式，处理 3 批衣服就需要 270 分钟（每批 90 分钟）。如果采用流水线的方式，第二批衣服就可以在第一批衣服进行漂洗的时候开始洗，第三批可以在第一批进行烘干，第二批进行漂洗的时候进行洗，那么处理完 3 批衣服就只需要 150 分钟，因为我们可以同时进行漂洗和烘干。</p><h3 id="计算流水线"><a href="#计算流水线" class="headerlink" title="计算流水线"></a>计算流水线</h3><p>通过流水线技术我们可以将一个组合逻辑电路进行拆分，在拆分的电路之间插入寄存器，用来存储中间结果，从而提高电路的吞吐量。<br>下面给出一个简单的例子：</p><ul><li>未流水线化前：</li></ul><p><img src="https://lanal.site/file/blog/post/03b23ak4/10.jpg"></p><p>未流水线化前，一组指令进入系统（I1,I2,I3），系统将会执行完一个指令之后再进行下一个指令，所以在流水线图中三个指令在垂直上并没有重叠，系统的延迟为 300+20&#x3D;320ps，最大吞吐量计算如下：</p><p>$$ \text{最大吞吐量} &#x3D; \frac{1}{(300+20)ps} \times \frac{1s}{1ps} \approx 3.125 GIPS $$</p><p>$ 1s &#x3D; 10^{12}ps $</p><ul><li>流水线化后：</li></ul><p><img src="https://lanal.site/file/blog/post/03b23ak4/11.jpg"></p><p>流水线化后，我们将系统拆分成三个阶段（A,B,C），一组指令进入系统（I1,I2,I3），系统会在开始的 120ps 时，开始执行 I2，在 240ps 时开始执行 I3，三个指令在垂直上有了重叠，系统的延迟为 3(100+20)&#x3D;360ps，最大吞吐量计算如下：</p><p>$$ \text{最大吞吐量} &#x3D; \frac{1}{(100+20)ps} \times \frac{1s}{1ps} \approx 8.333 GIPS $$</p><p>$ 1s &#x3D; 10^{12}ps $</p><p>流水线化后，系统的吞吐量提高到了原来的 8.333&#x2F;3.125&#x3D;2.667 倍，而代价是延迟小幅提升到了 360&#x2F;320&#x3D;1.125 倍。<br>流水线化中，我们会将系统的时钟周期设置为最长的那个阶段，这样可以保证每个阶段都能在时钟周期结束时完成，不会出现数据冲突。</p><h3 id="流水线的局限性"><a href="#流水线的局限性" class="headerlink" title="流水线的局限性"></a>流水线的局限性</h3><p>上述的流水线设计是在理想情况下，能将每个部分都均匀划分，但实际中流水线设计会遇到以下问题：</p><ul><li>不一致的划分：<br>假如我们将系统仍然划分成 3 个阶段，但每个阶段的延迟从 50ps 到 150ps 不等，A 阶段为 50ps，B 阶段为 150ps，C 阶段为 100ps，那么流水线化后，系统的延迟将会变成 3(150+20)&#x3D;510ps，吞吐量为 5.882 GIPS，当系统运行时 A 和 C 阶段会存在空闲，这样就无法充分利用硬件资源。</li><li>流水线过深，收益反而下降：<br>假如我们将系统划分为 6 个阶段，每个阶段需要 50ps，那么流水线化后，系统的延迟将会变成 6(50+20)&#x3D;420ps，吞吐量为 14.286 GIPS，我们将性能提高了 14.286&#x2F;8.333&#x3D;1.713 倍，没有阶段的时钟周期缩短到了原来的两倍，但是由于流水线寄存器的存在，吞吐量并没有加倍，流水线寄存器的延迟成为了系统提升吞吐量的一个制约因素，在我们的新的设计中，这个延迟占到了整个时钟周期的 28.6%。</li></ul><h3 id="带反馈的流水线设计"><a href="#带反馈的流水线设计" class="headerlink" title="带反馈的流水线设计"></a>带反馈的流水线设计</h3><p>目前为止，我们只考虑了单独执行的指令，但实际中，指令之间可能存在依赖关系，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">irmovq $100, %rax</span><br><span class="line">addq %rax, %rbx</span><br><span class="line">mrmovq 50(%rbx), %rdx</span><br></pre></td></tr></table></figure><p>在上述指令中，第二条指令需要使用第一条指令存入的值，第三条指令需要第二条指令中计算出的值，这些相邻的指令之间都存在数据相关（data dependency）。</p><p>另外一种相关是控制相关，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">loop:</span><br><span class="line">  subq %rdx, %rax</span><br><span class="line">  jne targ</span><br><span class="line">  irmovq $100, %rdx</span><br><span class="line">  jmp loop</span><br><span class="line">targ:</span><br><span class="line">  halt</span><br></pre></td></tr></table></figure><p>上述指令中使用到了 jne 指令，产生了一个控制相关（control dependency）。</p><p>如果我们仍然使用之前的 3 阶段流水线设计，那 I2 将无法获取 I1 的反馈，只能等到 I1 执行完后续的指令才能获取反馈，之将会导致系统执行错误，所以我们将流水线设计引入 Y86-64 处理器时，必须要能正确处理反馈的影响。</p><h2 id="Y86-64-的流水线实现"><a href="#Y86-64-的流水线实现" class="headerlink" title="Y86-64 的流水线实现"></a>Y86-64 的流水线实现</h2><p>在设计流水线化的 Y86-64 处理器之前，我们需要先对原先的 SEQ 处理器进行一些修改，以适应流水线的设计。</p><h3 id="SEQ"><a href="#SEQ" class="headerlink" title="SEQ+"></a>SEQ+</h3><p>SEQ+ 处理器在原有的 SEQ 处理器基础上，将 PC 更新阶段移动到取值阶段前，来适应流水线化的改造，同时我们也将 PC 选择器的输入信号进行重新标号。</p><p><img src="https://lanal.site/file/blog/post/03b23ak4/12.jpg"></p><h3 id="插入流水线寄存器"><a href="#插入流水线寄存器" class="headerlink" title="插入流水线寄存器"></a>插入流水线寄存器</h3><p>在创建一个流水线化的 Y86-64 处理器的最初尝试中，我们要在 SEQ+处理器的基础上插入流水线寄存器，并对信号重新排列，得到 PIPE-处理器。</p><p><img src="https://lanal.site/file/blog/post/03b23ak4/13.jpg"></p><p>流水线寄存器按如下方式进行标号：</p><ul><li>F 保存 PC 的预测值</li><li>D 保存取指阶段后取出的指令的信息，用于译码阶段</li><li>E 保存译码阶段后的指令的信息以及从寄存器中取出的值，用于执行阶段</li><li>M 保存执行阶段后的指令的信息以及 ALU 计算结果和条件码，用于访存阶段</li><li>W 保存访存阶段后的指令的信息以及从内存中读取的值，用于写回阶段和更新 PC</li></ul><h3 id="预测下一个-PC"><a href="#预测下一个-PC" class="headerlink" title="预测下一个 PC"></a>预测下一个 PC</h3><p>在 PIPE-处理器中，我们采取了一些措施来正确处理控制相关。<br>对于 call 和 jmp 指令来说，下一条指令的地址就是当前指令中的 valC，所以我们就可以将 valC 作为下一个 PC 的预测值。<br>对于条件分支指令来说，我们将会使用分支预测技术，分支预测策略的不同会影响到预测的准确性，进而影响到流水线的性能。分支预测策略大致可以分为静态预测和动态预测，静态预测策略是根据当前指令的类型来预测，动态预测策略是根据历史执行情况来预测。现代处理器基本都采用动态预测策略。我们在这里就采用简单的静态预测策略的设计，静态预测策略有以下几种：</p><ul><li>总是选择：总是预测分支指令会跳转，成功率大约为 60%</li><li>总是不选择：总是预测分支指令不会跳转，成功率大约为 40%</li><li>反向选择：当分支地址比下一条地址低时，预测分支指令会跳转，否则预测不会跳转，成功率大约为 65%</li><li>正向选择：当分支地址比下一条地址高时，预测分支指令会跳转，否则预测不会跳转，成功率大约为 45%</li></ul><p>正向选择和反向选择的实现难度较为复杂，我们在这里采用总是选择策略。</p><p>对于 ret 指令，它的新 PC 值并不能从指令中获取，而是要通过访问栈帧才能得知，所以我就为了简化设计就不会对返回地址进行预测，而是简单的暂停处理新的指令，直到 ret 指令执行完成。</p><p>对于大多数程序来说，预测返回地址是很容易的，因为过程调用和过程返回是成对出现，大多数函数的返回地址就是调用函数指令的下一条指令，现代处理器会在取指单元中放入一个硬件栈，保存过程调用指令产生的返回地址，当取出一个 ret 指令时就从这个栈中弹出顶部的值作为预测的返回地址。但是有的时候这样的预测不一定会成功，所以我们仍然需要提供一个恢复机制来处理预测失败的情况。</p><h3 id="流水线冒险"><a href="#流水线冒险" class="headerlink" title="流水线冒险"></a>流水线冒险</h3><p>流水线冒险（pipeline hazard）是指流水线中指令的执行顺序与预期顺序不一致的情况。流水线冒险可以分为数据冒险（data hazard）和控制冒险（control hazard）。</p><p>在刚才的 PIPE-设计中，我们并没有对数据冒险进行处理，所以当一条指令需要使用到上一条指令的计算结果时，流水线就会发生数据冒险。</p><p>以下有几个措施来解决数据冒险问题：</p><ol><li>用暂停来避免数据冒险</li><li>用转发来避免数据冒险</li><li>加载&#x2F;使用数据冒险</li></ol><p>后面将会使用以下指令作为示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">irmovq $10, %rdx</span><br><span class="line">irmovq $3, %rax</span><br><span class="line">addlq %rdx, %rax</span><br><span class="line">halt</span><br></pre></td></tr></table></figure><p>每条指令分别有以下几个阶段：</p><ul><li>F(fetch)：取指</li><li>D(decode)：解码</li><li>E(execute)：执行</li><li>M(memory)：访存</li><li>W(write back)：写回</li></ul><p>如果我们没有引入一个带反馈的流水线设计，那么以上指令就会出现如下问题：</p><table><thead><tr><th>指令</th><th>周期</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td>irmovq $10, %rdx</td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>irmovq $3, %rax</td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td><td></td><td></td></tr><tr><td>addlq %rdx, %rax</td><td></td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td><td></td></tr><tr><td>halt</td><td></td><td></td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td></tr></tbody></table><p>在第 4 周期时，addlq 进行译码时读取到的%rdx 和%rax 的值仍然是 0，因为前两条 irmovq 指令还没有完成 W 阶段，寄存器中的值还没有更新</p><h4 id="使用暂停来避免数据冒险"><a href="#使用暂停来避免数据冒险" class="headerlink" title="使用暂停来避免数据冒险"></a>使用暂停来避免数据冒险</h4><p>最简单的解决方法就是在 addlq 和 irmovq 之间添加 nop 指令，使得 addlq 的 D 阶段在 irmovq 的 W 阶段之后，所以改造后的代码为：</p><table><thead><tr><th>指令</th><th>周期</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th></tr></thead><tbody><tr><td>irmovq $10, %rdx</td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>irmovq $3, %rax</td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>nop</td><td></td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td><td></td><td></td></tr><tr><td>nop</td><td></td><td></td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td><td></td></tr><tr><td>nop</td><td></td><td></td><td></td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td></tr><tr><td>addlq %rdx, %rax</td><td></td><td></td><td></td><td></td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td></tr><tr><td>halt</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td></tr></tbody></table><p>这样 addlq 阶段的 D 阶段就会变道第 7 周期，此时两个 irmovq 的 W 阶段都已经完成，这样 addlq 就能取到更新后的值了，解决了数据冒险问题，我们实际上并不会真的在两条指令中添加 3 个 nop 指令而是使用阻塞<br>我们会在 addlq 和 irmovq 指令之间添加 3 个 bubble，使得后续的指令阻塞在当前阶段，如图：</p><table><thead><tr><th>指令</th><th>周期</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th></tr></thead><tbody><tr><td>irmovq $10, %rdx</td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>irmovq $3, %rax</td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>bubble</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>bubble</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>bubble</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>addlq %rdx, %rax</td><td></td><td></td><td></td><td>F</td><td>D</td><td>D</td><td>D</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td></tr><tr><td>halt</td><td></td><td></td><td></td><td></td><td>F</td><td>F</td><td>F</td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td></tr></tbody></table><p>这样虽然能解决问题，但是这样会使得流水线暂停长达 3 个周期，严重降低了整体的吞吐量</p><h4 id="使用转发来避免数据冒险"><a href="#使用转发来避免数据冒险" class="headerlink" title="使用转发来避免数据冒险"></a>使用转发来避免数据冒险</h4><p>当流水线进行到第 4 个周期的时候，addlq 正处在 D 阶段中，此时第一条 irmovq 指令正在 M 阶段，它的 M_valE 的值是 10，第二条 irmovq 指令正在 E 阶段，它的 e_valE 的值是 3，所以我们可以在这两个信号处搭建旁路将信号转发到 D 阶段中，这样 D 阶段就能将正确的值写入流水线寄存器中，所以我们需要一个控制器来发现数据冒险然后选择使用转发过来的信号，解决数据冒险，同时为了保证泛用性，我们会将更多的信号进行转发，最后我们会将 e_valE、m_valM、M_valE、W_valM、W_valE 这五个信号进行转发，所以最后的设计如下：</p><p><img src="https://lanal.site/file/blog/post/03b23ak4/14.jpg"></p><h4 id="加载-使用数据冒险"><a href="#加载-使用数据冒险" class="headerlink" title="加载&#x2F;使用数据冒险"></a>加载&#x2F;使用数据冒险</h4><p>有一类数据冒险不能单纯用转发来解决，因为内存读在流水线发生的时候比较晚，所以我们无法将访存后才能得到的值转发到过去的过去发生的阶段中，因此我们只能使用暂停的方式在处理这个问题，比如以下例子：</p><table><thead><tr><th>指令</th><th>周期</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th></tr></thead><tbody><tr><td>irmovq $128, %rdx</td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>irmovq $3, %rcx</td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>rmmovq %rcx, 0(%rdx)</td><td></td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td><td></td><td></td></tr><tr><td>irmovq $10, %rbx</td><td></td><td></td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td><td></td></tr><tr><td>mrmovq 0(%rdx), %rax</td><td></td><td></td><td></td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td></tr><tr><td>addlq %ebx, %eax</td><td></td><td></td><td></td><td></td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td></tr><tr><td>halt</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td></tr></tbody></table><p>mrmovq 指令在内存中的值需要到 M 阶段后才能得到，无法通过转发来解决，所以我们会在 mrmovq 和 addlq 之间加入一条 bubble，这样就能在 mrmovq 的 W 阶段将值转发到 addlq 指令的 D 阶段<br>这种用暂停来处理加载&#x2F;使用数据冒险的方法称为加载互锁，使用加载互锁和转发技术结合起来足以处理所有可能的数据冒险。因为只有加载互锁才会降低流水线的吞吐量，所以我们几乎可以实现每一个周期都发射一条新指令的目标</p><h4 id="避免控制冒险"><a href="#避免控制冒险" class="headerlink" title="避免控制冒险"></a>避免控制冒险</h4><p>当处理器没有办法根据处于取指阶段的当前指令来确定下一条指令的地址时，就会出现控制冒险。在前面我们的处理器设计中，控制冒险只会发生在 ret 指令和跳转指令。<br>对于 ret 指令，我们必须要通过访问栈帧才能知道具体的返回地址，所以当我们遇到了 ret 指令就会往后面插入 3 个 bubble 来暂停流水线，等到 ret 进行到 W 阶段时 PC 选择器就能知道下一条指令的地址，例如以下：</p><table><thead><tr><th>指令</th><th>周期</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th></tr></thead><tbody><tr><td>irmovq Stack, %rsp</td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>call proc</td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>ret</td><td></td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td><td></td><td></td></tr><tr><td>bubble</td><td></td><td></td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td><td></td></tr><tr><td>bubble</td><td></td><td></td><td></td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td></tr><tr><td>bubble</td><td></td><td></td><td></td><td></td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td></tr><tr><td>irmovq $10, %rdx</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td></tr></tbody></table><p>对于跳转指令，我们采用总是选择策略，预测跳转指令会选择分支，对于以下例子，当 jne 指令到 E 阶段也就是第 4 周期时，分支逻辑发现不应该选择分支，但是此时已经选择我们已经取出了两条指令，它们不应该执行下去了，所以我们会为已经进入流水线的两条指令都给一个 bubble 来阻塞住它们，这样它们就不会进行到 E 阶段，影响程序员可见的状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  xorq %rax, %rax</span><br><span class="line">  jne target      # not taken</span><br><span class="line">  irmovq $1, %rax # fall through</span><br><span class="line">  halt</span><br><span class="line">target:</span><br><span class="line">  irmovq $2, %rdx # target</span><br><span class="line">  irmovq $3, %rbx # target + 1</span><br><span class="line">  halt</span><br></pre></td></tr></table></figure><table><thead><tr><th>指令</th><th>周期</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>xorq %rax, %rax</td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td><td></td><td></td></tr><tr><td>jne target</td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td><td></td></tr><tr><td>irmovl $2, %rdx</td><td></td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td><td></td></tr><tr><td>bubble</td><td></td><td></td><td></td><td></td><td></td><td>D</td><td>E</td><td>M</td><td>W</td><td></td></tr><tr><td>irmovq $3, %rbx</td><td></td><td></td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td><td></td></tr><tr><td>bubble</td><td></td><td></td><td></td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td></tr><tr><td>irmovq $1, %rax</td><td></td><td></td><td></td><td></td><td></td><td>F</td><td>D</td><td>E</td><td>M</td><td>W</td></tr></tbody></table><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>处理器中很多事情都会导致异常控制流，此时，程序执行的正常流程就会被破坏掉。异常可以由程序执行从内部产生，也可以由某个外部信号从外部产生。在我们的 ISA 中包括三种不同的内部产生的异常：</p><ol><li>halt 指令</li><li>非法指令和功能码组合的指令</li><li>取指或数据读写尝试访问一个非法地址</li></ol><p>除此之外，还有三个细节问题：</p><ul><li>流水线中可能会同时有多条指令导致异常，比如处在取指阶段中有 halt 指令，而数据内存报告访存阶段的阶段出现了指令地址越界的问题。我们处理这个问题的原则是：有流水线中最深的指令引起的异常的优先级最高。</li><li>取出了一条指令进入流水线中，但是由于分支预测失败取消了这条指令，也就说这条指令本不会实际影响执行结果但是去导致了异常。所以我们需要避免出现这个异常。</li><li>当一条指令导致了一个异常，而后面的指令已经更新了处理器的状态，比如 pushq %rax，此时的 %rsp 为 0x0000000000000000，那么 pushq 指令就会向 0xfffffffffffffff8 中插入数据，但是这会在访存阶段导致一个异常，如果后面紧跟着一条 addq 指令，那么指令就会在执行阶段更新 CC，但实际上并不应该对 CC 进行更改。所以我们应该要能够发现出现了这个异常然后停止执行。</li></ul><h3 id="PIPE-各阶段的实现"><a href="#PIPE-各阶段的实现" class="headerlink" title="PIPE 各阶段的实现"></a>PIPE 各阶段的实现</h3><h4 id="PC-选择和取指阶段"><a href="#PC-选择和取指阶段" class="headerlink" title="PC 选择和取指阶段"></a>PC 选择和取指阶段</h4><p><img src="https://lanal.site/file/blog/post/03b23ak4/15.jpg"></p><h4 id="译码和写回阶段-1"><a href="#译码和写回阶段-1" class="headerlink" title="译码和写回阶段"></a>译码和写回阶段</h4><p><img src="https://lanal.site/file/blog/post/03b23ak4/16.jpg"></p><h4 id="执行阶段-1"><a href="#执行阶段-1" class="headerlink" title="执行阶段"></a>执行阶段</h4><p><img src="https://lanal.site/file/blog/post/03b23ak4/17.jpg"></p><h4 id="访存阶段-1"><a href="#访存阶段-1" class="headerlink" title="访存阶段"></a>访存阶段</h4><p><img src="https://lanal.site/file/blog/post/03b23ak4/18.jpg"></p><h3 id="流水线控制逻辑"><a href="#流水线控制逻辑" class="headerlink" title="流水线控制逻辑"></a>流水线控制逻辑</h3><p>为了能够控制流水线，我们会为流水线引入几个机制，分别是正常，暂停和气泡，这三种模式分别会对流水线寄存器产生以下影响：</p><p><img src="https://lanal.site/file/blog/post/03b23ak4/19.jpg"></p><p>最后再根据具体指令来得到具体的控制逻辑：</p><p><img src="https://lanal.site/file/blog/post/03b23ak4/20.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 深入理解计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解计算机系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端开发基础（三）- maven</title>
      <link href="/blog/post/34f041e5.html"/>
      <url>/blog/post/34f041e5.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在软件开发中，一个项目的依赖管理，项目结构以及项目构建流程对于不同的开发者来说可能有一套属于自己的方式，对于独立开发来说这不是什么大问题，但是一个人的力量往往是有限的，所以我们不可避免的要进行团队协作，如果每个开发者都坚守一套自己的规则，那是既不利于团队开发的。而 maven 就为我们提供了一套很好的解决方案，maven 是 apache 开源基金会的一个项目，它为 java 语言提供了一个很好的第三方依赖管理以及项目管理的解决方案。对于其他编程语言都有自己的第三方依赖管理，比如 python 的 pip，js 的 npm 等，这些依赖管理工具能让我们站在巨人的肩膀上生产出更好的作品来回馈社区。</p><h2 id="maven-项目结构"><a href="#maven-项目结构" class="headerlink" title="maven 项目结构"></a>maven 项目结构</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">项目文件夹</span><br><span class="line">├── src      源文件</span><br><span class="line">│   ├── main</span><br><span class="line">│   │   ├── java  主程序</span><br><span class="line">│   │   └── resources  静态资源</span><br><span class="line">│   └── test</span><br><span class="line">│       └── java  测试代码</span><br><span class="line">├── target   编译好的class文件和jar包等</span><br><span class="line">│   ├── classes</span><br><span class="line">│   ├── ...</span><br><span class="line">│   └── xxx.jar</span><br><span class="line">└── pox.xml</span><br></pre></td></tr></table></figure><h2 id="maven-依赖管理"><a href="#maven-依赖管理" class="headerlink" title="maven 依赖管理"></a>maven 依赖管理</h2><p>maven 使用 xml 来配置项目工程，在项目中的 pom.xml 文件中配置项目的依赖的信息，在 dependencies 标签中配置所需要的 dependency，格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.36<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>groupId 标签为组织名称，如果组织下项目比较多需要细分的话则可以在后面添加项目名称</li><li>artifactId 标签为项目或模块名称</li><li>version 标签为版本</li></ul><h2 id="maven-依赖传递"><a href="#maven-依赖传递" class="headerlink" title="maven 依赖传递"></a>maven 依赖传递</h2><p>如果当 A 工程导入了 B 工程，而 B 工程导入了 C 工程，那么 A 工程中在构建打包时也会打包 C 工程所需的依赖</p><p>如果 A 工程不需要 C 工程的某个依赖，可以使用 exclusions 标签来排除这个工程中的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>priv.ana<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-projectB<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="maven-依赖范围"><a href="#maven-依赖范围" class="headerlink" title="maven 依赖范围"></a>maven 依赖范围</h2><p>在 dependency 标签中使用 scope 标签可以配置每个依赖的依赖范围，格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依赖范围有以下三种：</p><ul><li>主程序范围，main 文件夹</li><li>测试程序范围，test 文件夹</li><li>打包运行范围，jar 包</li></ul><p>scope 标签的常见值如下：</p><table><thead><tr><th>值</th><th>主程序</th><th>测试</th><th>打包（运行）</th></tr></thead><tbody><tr><td>compile(默认)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>test</td><td>-</td><td>Y</td><td>-</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td>-</td></tr><tr><td>runtime</td><td>-</td><td>Y</td><td>Y</td></tr></tbody></table><h2 id="maven-构建生命周期"><a href="#maven-构建生命周期" class="headerlink" title="maven 构建生命周期"></a>maven 构建生命周期</h2><p>maven 有以下三个标准的生命周期：</p><ol><li>Clean 生命周期：<ul><li>clean：删除目标目录中的编译输出文件。</li></ul></li><li>Default 生命周期：<ul><li>validate：验证项目的正确性，例如检查项目的版本是否正确。</li><li>compile：编译项目的源代码。</li><li>test：运行项目的单元测试。</li><li>package：将编译后的代码打包成可分发的格式，例如 JAR 或 WAR。</li><li>verify：对项目进行额外的检查以确保质量。</li><li>install：将项目的构建结果安装到本地 Maven 仓库中，以供其他项目使用。</li><li>deploy：将项目的构建结果复制到远程仓库，以供其他开发人员或团队使用。</li></ul></li><li>Site 生命周期：<ul><li>site：生成项目文档和站点信息。</li><li>deploy-site：将生成的站点信息发布到远程服务器，以便共享项目文档。</li></ul></li></ol><h2 id="maven-继承"><a href="#maven-继承" class="headerlink" title="maven 继承"></a>maven 继承</h2><p>maven 中可以实现工程与工程之间的继承关系，比如当我们开发多个模块中存在很多的共同依赖则可以将这些依赖抽取成一个父工程，然后让各个模块成为它的子工程，所以说一个父工程就是用来进行多个模块的依赖管理的，与子工程不一样的是父工程的打包方式需要为 pom，以下为样例：</p><p>父工程 xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>priv.ana<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven-project-parent<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> <span class="comment">&lt;!-- 共同依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子工程 xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>priv.ana<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-part1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven-project-part1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子工程的 parent 标签中需要指定父工程 pom.xml 位置，如果子父工程的结构如下则可以使用以上配置：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">父工程文件夹</span><br><span class="line">├── 子工程1文件夹</span><br><span class="line">├── 子工程2文件夹</span><br><span class="line">├── 子工程3文件夹</span><br><span class="line">├── ...</span><br><span class="line">└── pox.xml</span><br></pre></td></tr></table></figure><p>如果这整个工程为一个 springboot 工程，则可以在父工程的 parent 标签中指定 springboot 的父工程，并且将 relativePath 标签设置为空，表示需要到仓库中拉取。</p><h2 id="maven-依赖版本管理"><a href="#maven-依赖版本管理" class="headerlink" title="maven 依赖版本管理"></a>maven 依赖版本管理</h2><p>在整个项目当中如果分了模块来进行开发，那么模块与模块之间就会存在版本不同的问题，这样不便于管理和维护，所以在整个项目的父工程中可以使用 dependencyManagement 标签进行依赖版本管理，示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">jjwt.version</span>&gt;</span>0.12.3<span class="tag">&lt;/<span class="name">jjwt.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pagehelper-spring-boot-starter.version</span>&gt;</span>1.4.7<span class="tag">&lt;/<span class="name">pagehelper-spring-boot-starter.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mybatis-spring-boot.version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">mybatis-spring-boot.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pagehelper-spring-boot-starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jjwt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时，如果管理的依赖过多，依赖的版本号会散落在各处，使用 properties 标签可以将版本号等信息集中起来方便管理。<br>这样，后续在子工程中使用到父工程管理的依赖时就可以不用指定版本号来使用父工程管理好的版本了。</p><h2 id="maven-聚合"><a href="#maven-聚合" class="headerlink" title="maven 聚合"></a>maven 聚合</h2><p>多个子工程之间如果互相依赖，那么在打包时需要将这些工程按照依赖的顺序先后打包，如果需要手动进行这些操作将会非常的繁琐而且还需要我们去分析这些模块之间的依赖关系，而 maven 中的聚合可以解决这个问题，在父工程的 pom.xml 文件中配置 modules 标签然后对父工程执行标准的生命周期，则可以实现多模块的构建，以下为样例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>maven-project-part1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>maven-project-part2<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>maven-project-part3<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="maven-私服"><a href="#maven-私服" class="headerlink" title="maven 私服"></a>maven 私服</h2><p>当我们开发好的模块需要给其他开发成员使用时，就需要将编译好的文件上传到 maven 仓库中，但是 maven 的中央仓库我们并没有权限上传代码，所以我们就需要建立一个 maven 的私服仓库。</p><p>Nexus 是一个可以使用 docker 部署的第三方依赖仓库，安装好 docker 后使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8081:8081 --name nexus -v /docker/nexus/nexus-data:/nexus-data --restart=always sonatype/nexus3</span><br></pre></td></tr></table></figure><p>此命令会下载 Nexus 的镜像并启动容器，将容器的 8081 端口映射到主机的 8081 端口，并将容器的&#x2F;nexus-data 目录挂载到主机的&#x2F;docker&#x2F;nexus&#x2F;nexus-data 目录。<br>然后就可以通过 <a href="http://ip:8081/">http://IP:8081</a> 访问管理面板了。</p><p>如果出现启动失败可以使用 <code>docker logs -f nexus</code> 查看日志，一般的问题为容器没有权限访问主机的&#x2F;docker&#x2F;nexus&#x2F;nexus-data 目录，可以使用<code>chmod 777 /docker/nexus/nexus-data</code>命令给予权限，然后重启容器即可。</p><p>默认账号为 admin，密码在文件&#x2F;nexus-data&#x2F;admin.password 中，也就是主机的&#x2F;docker&#x2F;nexus&#x2F;nexus-data&#x2F;admin.password，第一次登录之后需要修改密码。</p><h3 id="私服仓库"><a href="#私服仓库" class="headerlink" title="私服仓库"></a>私服仓库</h3><p>默认的私服仓库有三个，分别为：</p><ul><li>maven-central：maven 中央仓库的代理，通过这个仓库下载的包会缓存在这个仓库中，以便于下次使用</li><li>maven-releases：发布版的仓库，如果版本号后面什么都没加或者添加了 RELEASE 则上传到这个仓库中</li><li>maven-snapshots：快照版的仓库，如果版本号后面添加了 SNAPSHOT 则上传到这个仓库中</li></ul><p>除了这三个仓库之外还有一个仓库组：</p><ul><li>maven-public：通过这个仓库组下载依赖时会从三个仓库中搜索相应的包，在 maven 配置中设置这个下载源就可使用自己开发的依赖以及中央仓库中的依赖</li></ul><p>nexus 除了支持 maven 的仓库之外还支持 docker，apt，npm，pip 的仓库，可以按需使用</p><h3 id="maven-配置"><a href="#maven-配置" class="headerlink" title="maven 配置"></a>maven 配置</h3><p>maven 默认连接的是中央仓库，需要在 maven 的 settings.xml 和项目的 pom.xml 添加配置才能连接私服仓库。</p><p>settings.xml 需要使用 servers 配置仓库的账号密码，然后使用 mirrors 更改下载源：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.2.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servers</span>&gt;</span> <span class="comment">&lt;!--仓库的账号和密码--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>账号<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>账号<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>账号<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span> <span class="comment">&lt;!--下载源地址--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.100.88:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span> <span class="comment">&lt;!--指定快照版本的依赖依然允许使用--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>allow-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.100.88:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>项目中的 pom.xml 中需要使用 distributionManagement 添加 releases 和 snapshots 仓库的地址：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.100.88:8081/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.100.88:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发 </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序的机器级表示</title>
      <link href="/blog/post/869285ma.html"/>
      <url>/blog/post/869285ma.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>了解了基础的编码知识后，下一步我们开始研究程序是如何在计算机当中表示和执行，我们将会深入了解程序中的分支、循环还有函数调用等是如何在使用机器码（机器语言）来表示，但是我们不会直接研究机器语言，毕竟机器语言都是由 0、1 组成的，实在不利于阅读和理解，我们将会研究机器语言的助记符，汇编语言，它在底层是与机器语言等效的，所以研究它其实是等同于研究机器语言的。不同的 cpu 架构的指令集架构也不同，后续的研究中将会基于 Intel 的 x86-64 架构。</p><h2 id="硬件抽象"><a href="#硬件抽象" class="headerlink" title="硬件抽象"></a>硬件抽象</h2><p>计算机系统使用了多种不同形式的抽象，利用更简单的抽象模型来隐藏具体的实现细节，即使是机器级代码也已经使用到了许多的抽象模型，其中两点尤为重要的。</p><ol><li>指令集架构（ISA）</li><li>虚拟地址</li></ol><p>指令集架构定义了处理器状态，指令的格式以及每条指令对状态的影响。大多数 ISA，比如 x86-64，arm 等，会将程序的行为描述成每条指令都是顺序执行的，一条指令执行完后，下一条才开始。可是处理器的硬件实际上要远比描述的更精密，硬件会并发的执行多条指令，但又会采取措施来保证整体行为和 ISA 指定的顺序执行的结果是一致的。</p><p>虚拟地址将机器级代码使用的内存看上去是一个巨大的字节数组，但实际上储存器系统是将多个硬件储存器和操作系统软件组合起来的。</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>在下面的研究中，我们不会直接编写汇编代码，而是使用 c 语言来生成对应的汇编代码。</p><p>比如有以下示例代码保存在 mstore.c 文件中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">mult2</span><span class="params">(<span class="type">long</span>, <span class="type">long</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">multstore</span><span class="params">(<span class="type">long</span> x, <span class="type">long</span> y, <span class="type">long</span> *dest)</span> &#123;</span><br><span class="line">    <span class="type">long</span> t = mult2(x, y);</span><br><span class="line">    *dest = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 gcc 的命令行选项-S 可以直接生成对应汇编码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -Og -S mstore.c</span><br></pre></td></tr></table></figure><p>使用 gcc 的命令行选项-c 可以直接编译并汇编 c 代码，得到对应的机器码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -Og -c mstore.c</span><br></pre></td></tr></table></figure><p>使用 objdump 来查看机器码对应的汇编码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -d mstore.o</span><br></pre></td></tr></table></figure><h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><p>由于是从 16 位体系结构拓展位 32 位的。Intel 将术语“字（word）”表示 16 位数据格式，所以 32 位的为“双字（double words）”或者“长字（long words）”，64 位的位“四字（quad words）”。</p><p>不同的数据格式的指令会使用后缀来表示对应：</p><table><thead><tr><th>C 声明</th><th>Intel 数据类型</th><th>后缀</th><th>大小（byte）</th></tr></thead><tbody><tr><td>char</td><td>字节</td><td>b</td><td>1</td></tr><tr><td>short</td><td>字</td><td>w</td><td>2</td></tr><tr><td>int</td><td>双字</td><td>l</td><td>4</td></tr><tr><td>long</td><td>四字</td><td>q</td><td>8</td></tr><tr><td>char*</td><td>四字</td><td>q</td><td>8</td></tr><tr><td>float</td><td>单精度</td><td>s</td><td>4</td></tr><tr><td>double</td><td>双精度</td><td>l</td><td>8</td></tr></tbody></table><h2 id="访问信息"><a href="#访问信息" class="headerlink" title="访问信息"></a>访问信息</h2><p>x86-64 的 CPU 包含一组 16 个存储 64 位值的通用目的寄存器。</p><table><thead><tr><th>64 位寄存器</th><th>低 32 位</th><th>低 16 位</th><th>低 8 位</th><th>描述</th></tr></thead><tbody><tr><td>rax</td><td>eax</td><td>ax</td><td>al</td><td>返回值</td></tr><tr><td>rbx</td><td>ebx</td><td>bx</td><td>bl</td><td>被调用者保存</td></tr><tr><td>rcx</td><td>ecx</td><td>cx</td><td>cl</td><td>第 4 个参数</td></tr><tr><td>rdx</td><td>edx</td><td>dx</td><td>dl</td><td>第 3 个参数</td></tr><tr><td>rsi</td><td>esi</td><td>si</td><td>sil</td><td>第 2 个参数</td></tr><tr><td>rdi</td><td>edi</td><td>di</td><td>dil</td><td>第 1 个参数</td></tr><tr><td>rbp</td><td>ebp</td><td>bp</td><td>bpl</td><td>被调用者保存</td></tr><tr><td>rsp</td><td>esp</td><td>sp</td><td>spl</td><td>栈指针</td></tr><tr><td>r8</td><td>r8d</td><td>r8w</td><td>r8b</td><td>第 5 个参数</td></tr><tr><td>r9</td><td>r9d</td><td>r9w</td><td>r9b</td><td>第 6 个参数</td></tr><tr><td>r10</td><td>r10d</td><td>r10w</td><td>r10b</td><td>调用者保存</td></tr><tr><td>r11</td><td>r11d</td><td>r11w</td><td>r11b</td><td>调用者保存</td></tr><tr><td>r12</td><td>r12d</td><td>r12w</td><td>r12b</td><td>被调用者保存</td></tr><tr><td>r13</td><td>r13d</td><td>r13w</td><td>r13b</td><td>被调用者保存</td></tr><tr><td>r14</td><td>r14d</td><td>r14w</td><td>r14b</td><td>被调用者保存</td></tr><tr><td>r15</td><td>r15d</td><td>r15w</td><td>r15b</td><td>被调用者保存</td></tr></tbody></table><h3 id="操作数指示符"><a href="#操作数指示符" class="headerlink" title="操作数指示符"></a>操作数指示符</h3><p>大多数指令都有一个或多个操作数（operand），用于表示执行的指令中要使用的源数据值，以及防止结果的目的位置。x86-64 支持多种操作数格式，大致分为三类：</p><ul><li>立即数：表示一个常数，书写格式为$后跟着常数，比如$-57,$0x1F</li><li>寄存器：表示一个寄存器中的值，书写格式为%后跟着寄存器名称，比如%rax，%r8d</li><li>内存引用：表示内存中具体地址的值，书写格式有很多种</li></ul><table><thead><tr><th>类型</th><th>格式</th><th>操作数值</th><th>名称</th></tr></thead><tbody><tr><td>立即数</td><td>$$Imm$</td><td>$Imm$</td><td>立即数寻址</td></tr><tr><td>寄存器</td><td>$r_a$</td><td>$R[r_a]$</td><td>寄存器寻址</td></tr><tr><td>存储器</td><td>$Imm$</td><td>$M[Imm]$</td><td>绝对寻址</td></tr><tr><td>存储器</td><td>$(r_a)$</td><td>$M[R[r_a]]$</td><td>间接寻址</td></tr><tr><td>存储器</td><td>$Imm(r_b)$</td><td>$M[Imm+R[r_b]]$</td><td>(基址+偏移量)寻址</td></tr><tr><td>存储器</td><td>$(r_b,r_i)$</td><td>$M[R[r_b]+R[r_i]]$</td><td>变址寻址</td></tr><tr><td>存储器</td><td>$Imm(r_b,r_i)$</td><td>$M[Imm+R[r_b]+R[r_i]]$</td><td>变址寻址</td></tr><tr><td>存储器</td><td>$(,r_i,s)$</td><td>$M[R[r_i]*s]$</td><td>比例变址寻址</td></tr><tr><td>存储器</td><td>$Imm(,r_i,s)$</td><td>$M[Imm+R[r_i]*s]$</td><td>比例变址寻址</td></tr><tr><td>存储器</td><td>$(r_b,r_i,s)$</td><td>$M[R[r_b]+R[r_i]*s]$</td><td>比例变址寻址</td></tr><tr><td>存储器</td><td>$Imm(r_b,r_i,s)$</td><td>$M[Imm+R[r_b]+R[r_i]*s]$</td><td>比例变址寻址</td></tr></tbody></table><h3 id="数据传送指令"><a href="#数据传送指令" class="headerlink" title="数据传送指令"></a>数据传送指令</h3><p>MOV 类指令可以将数据从源位置复制到目的目的位置。</p><table><thead><tr><th>指令</th><th>效果</th><th>描述</th></tr></thead><tbody><tr><td>MOV S, D</td><td>S -&gt; D</td><td>传送</td></tr><tr><td>movb</td><td></td><td>传送字节</td></tr><tr><td>movw</td><td></td><td>传送字</td></tr><tr><td>movl</td><td></td><td>传送双字</td></tr><tr><td>movq</td><td></td><td>传送四字</td></tr><tr><td>movabsq I, R</td><td>I -&gt; R</td><td>传送绝对的四字</td></tr></tbody></table><p>其中的 S 可以为立即数，寄存器，存储器，D 可以为寄存器，存储器，但是 S 和 D 不能同时为存储器。<br>将数据复制到寄存器的低位时，寄存器的高位不会改变数值，但有一个例外是 movl 将数据复制到低 4 字节时，高 4 字节会置为 0，以下给出一个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">movabsq $0x0011223344556677, %rax  # %rax=0x0011223344556677</span><br><span class="line">movb $-1, %al                      # %rax=0x00112233445566FF</span><br><span class="line">movw $-1, %ax                      # %rax=0x001122334455FFFF</span><br><span class="line">movl $-1, %eax                     # %rax=0x00000000FFFFFFFF</span><br><span class="line">movq $-1, %rax                     # %rax=0xFFFFFFFFFFFFFFFF</span><br></pre></td></tr></table></figure><p>以上指令是适用于源与目的的数据格式相同的情况，当目的的数据格式大于源的时候有以下指令来解决问题：</p><p>零拓展数据传送指令：</p><table><thead><tr><th>指令</th><th>效果</th><th>描述</th></tr></thead><tbody><tr><td>MOVZ S, D</td><td>S -&gt; D</td><td>进行零拓展并传送</td></tr><tr><td>movzbw</td><td></td><td>将做了零拓展的字节传送到字</td></tr><tr><td>movzbl</td><td></td><td>将做了零拓展的字节传送到双字</td></tr><tr><td>movzbq</td><td></td><td>将做了零拓展的字节传送到四字</td></tr><tr><td>movzwl</td><td></td><td>将做了零拓展的字传送到双字</td></tr><tr><td>movzwq</td><td></td><td>将做了零拓展的字传送到四字</td></tr></tbody></table><p>提供的指令中并没有将做了零拓展的双字传送到四字，因为按照 x86-64 的采用的惯例，为寄存器生成 32 位的指令都会将该寄存器的高 4 字节置为 0 ，所以使用 movl 指令也是实现相同效果。</p><p>符号拓展数据传送指令：</p><table><thead><tr><th>指令</th><th>效果</th><th>描述</th></tr></thead><tbody><tr><td>MOVS S, D</td><td>S -&gt; D</td><td>进行符号拓展并传送</td></tr><tr><td>movsbw</td><td></td><td>将做了符号拓展的字节传送到字</td></tr><tr><td>movsbl</td><td></td><td>将做了符号拓展的字节传送到双字</td></tr><tr><td>movsbq</td><td></td><td>将做了符号拓展的字节传送到四字</td></tr><tr><td>movswl</td><td></td><td>将做了符号拓展的字传送到双字</td></tr><tr><td>movswq</td><td></td><td>将做了符号拓展的字传送到四字</td></tr><tr><td>movslq</td><td></td><td>将做了符号拓展的双字传送到四字</td></tr><tr><td>cltq</td><td>符号拓展(%eax) -&gt; %rax</td><td>将%eax 符号拓展到%rax</td></tr></tbody></table><p>其中的<code>cltq</code>指令和<code>movslq %eax, %rax</code>效果一致，只是该指令的编码更紧凑。</p><h3 id="压入和弹出栈数据"><a href="#压入和弹出栈数据" class="headerlink" title="压入和弹出栈数据"></a>压入和弹出栈数据</h3><p>以下两个指令可以将数据压入和弹出程序栈：</p><table><thead><tr><th>指令</th><th>效果</th><th>描述</th></tr></thead><tbody><tr><td>pushq S</td><td>R[%rsp]-8 -&gt; R[%rsp]; <br> S -&gt; M[R[%rsp]]</td><td>将四字压入栈</td></tr><tr><td>popq D</td><td>M[R[%rsp]] -&gt; D; <br> R[%rsp]+8 -&gt; R[%rsp]</td><td>将四字弹出栈</td></tr></tbody></table><h2 id="算术和逻辑操作"><a href="#算术和逻辑操作" class="headerlink" title="算术和逻辑操作"></a>算术和逻辑操作</h2><p>这些指令类主要分为四类：加载有效地址、一元操作、二元操作、移位，每个指令类中都有四种不同大小数据格式的相应指令除了加载有效地址，地址只有 64 位的操作。</p><table><thead><tr><th>指令</th><th>效果</th><th>描述</th></tr></thead><tbody><tr><td>leaq S, D</td><td>&amp;S -&gt; D</td><td>加载有效地址</td></tr><tr><td>INC D<br>DEC D<br>NEG D<br>NOT D</td><td>D+1 -&gt; D<br>D-1 -&gt; D<br>-D -&gt; D<br>~D -&gt; D</td><td>加 1<br>减 1<br>取负<br>取反</td></tr><tr><td>ADD S, D<br>SUB S, D<br>IMUL S, D<br>XOR S, D<br>OR S, D<br>AND S, D<br></td><td>D+S -&gt; D<br>D-S -&gt; D<br>D*S -&gt; D<br>D^S -&gt; D<br>D&#124;S -&gt; D<br>D&amp;S -&gt; D</td><td>加<br>减<br>乘<br>异或<br>或<br>与</td></tr><tr><td>SAL k, D<br>SHL k, D<br>SAR k, D<br>SHR k, D</td><td>D&lt;&lt;k -&gt; D<br>D&lt;&lt;k -&gt; D<br>D&gt;&gt;k -&gt; D<br>D&gt;&gt;&gt;k -&gt; D</td><td>左移<br>左移（等同于 SAL）<br>算术右移<br>逻辑右移</td></tr></tbody></table><h3 id="特殊的算术操作"><a href="#特殊的算术操作" class="headerlink" title="特殊的算术操作"></a>特殊的算术操作</h3><p>两个 64 位的有符号或者无符号整数相乘得到的乘积需要 128 位来表示。x86-64 指令集对 128 位操作提供有限的支持，按照命名习惯，Intel 将 16 字节数成为八字（oct word），以下为支持产生两个 64 位数字的全 128 位乘积以及整数除法的指令：</p><table><thead><tr><th>指令</th><th>效果</th><th>描述</th></tr></thead><tbody><tr><td>imulq S<br>mulq S</td><td>S * R[%rax] -&gt; R[%rdx]:R[%rax]</td><td>有符号全乘法<br>无符号全乘法</td></tr><tr><td>cqto</td><td>符号拓展（R[%rax]） -&gt; R[%rdx]:R[%rax]</td><td>转换为八字</td></tr><tr><td>idivq S</td><td>R[%rdx]:R[%rax] &#x2F; S -&gt; R[%rax]<br>R[%rdx]:R[%rax] mod S -&gt; R[%rdx]</td><td>有符号除法</td></tr><tr><td>divq S</td><td>R[%rdx]:R[%rax] &#x2F; S -&gt; R[%rax]<br>R[%rdx]:R[%rax] mod S -&gt; R[%rdx]</td><td>无符号除法</td></tr></tbody></table><p>使用 64 位寄存器来进行全 128 位乘法时，会将乘积的高 64 位放在%rdx 中，低 64 位放在%rax 中。进行除法时，会将商放在%rax 中，余数放在%rdx 中。</p><h2 id="控制"><a href="#控制" class="headerlink" title="控制"></a>控制</h2><p>至此我们仅仅考虑了直线代码的行为，但是实际代码中还有分支和循环。jump 指令就可以根据条件码等信息控制 cpu 执行指定位置的指令从而实现分支和循环。</p><h3 id="条件码"><a href="#条件码" class="headerlink" title="条件码"></a>条件码</h3><p>除了整数寄存器，CPU 维护着一组单个位的条件码寄存器，当进行算术逻辑操作、CMP、TEST 等指令时就会更新这几个值。</p><ul><li>CF：进位标志。最近操作使最高位发生了进位。可以用来检测无符号操作的溢出。</li><li>ZF：零标志。最近操作得出的结果为 0。</li><li>SF：符号标志。最近操作得到的结果为负数。</li><li>OF：溢出标志。最近的操作导致一个补码溢出，正溢出或者负溢出。</li></ul><p>CMP 和 TEST 指令：</p><table><thead><tr><th>指令</th><th>基于</th><th>描述</th></tr></thead><tbody><tr><td>CMP S1, S2</td><td>S2-S1</td><td>比较</td></tr><tr><td>cmpb</td><td></td><td>比较字节</td></tr><tr><td>cmpw</td><td></td><td>比较字</td></tr><tr><td>cmpl</td><td></td><td>比较双字</td></tr><tr><td>cmpq</td><td></td><td>比较四字</td></tr><tr><td>TEST S1, S2</td><td>S1&amp;S2</td><td>测试</td></tr><tr><td>testb</td><td></td><td>测试字节</td></tr><tr><td>testw</td><td></td><td>测试字</td></tr><tr><td>testl</td><td></td><td>测试双字</td></tr><tr><td>testq</td><td></td><td>测试四字</td></tr></tbody></table><p>CMP 和 SUB 以及 TEST 和 AND 指令的区别在于不会将计算的结果存入寄存器当中。</p><h3 id="访问条件码"><a href="#访问条件码" class="headerlink" title="访问条件码"></a>访问条件码</h3><p>条件码通常不会直接读取，通常的使用方法有三种：</p><ol><li>根据条件码的组合设置一个字节为 0 或者 1</li><li>根据条件码有条件地跳转执行程序的其他部分</li><li>根据条件码有条件地传送数据</li></ol><p>分别对应的指令为：</p><ol><li>有条件地设置字节（SET）</li></ol><table><thead><tr><th>指令</th><th>同义名</th><th>效果</th><th>设置条件</th></tr></thead><tbody><tr><td>sete D</td><td>setz</td><td>ZF -&gt; D</td><td>相等&#x2F;零</td></tr><tr><td>setne D</td><td>setnz</td><td>~ZF -&gt; D</td><td>不相等&#x2F;非零</td></tr><tr><td>sets D</td><td></td><td>SF -&gt; D</td><td>负数</td></tr><tr><td>setns D</td><td></td><td>~SF -&gt; D</td><td>非负数</td></tr><tr><td>setg D</td><td>setnle</td><td>~(SF^OF) &amp; ~ZF -&gt; D</td><td>有符号大于</td></tr><tr><td>setge D</td><td>setnl</td><td>~(SF^OF) -&gt; D</td><td>有符号大于等于</td></tr><tr><td>setl D</td><td>setnge</td><td>SF^OF -&gt; D</td><td>有符号小于</td></tr><tr><td>setle D</td><td>setng</td><td>(SF^OF) &#124; ZF -&gt; D</td><td>有符号小于等于</td></tr><tr><td>seta D</td><td>setnbe</td><td>~CF &amp; ~ZF -&gt; D</td><td>无符号大于</td></tr><tr><td>setae D</td><td>setnb</td><td>~CF -&gt; D</td><td>无符号大于等于</td></tr><tr><td>setb D</td><td>setnae</td><td>CF -&gt; D</td><td>无符号小于</td></tr><tr><td>setbe D</td><td>setna</td><td>CF &#124; ZF -&gt; D</td><td>无符号小于等于</td></tr></tbody></table><p>set 指令的后缀不是表示数据格式的大小，实际含义为：g，greater（有符号大于）；l，less（有符号小于）；a，above（无符号大于）；b，below（无符号小于）；e，equal（相等）；n，not（非）。</p><ol start="2"><li>有条件地跳转（JMP）</li></ol><table><thead><tr><th>指令</th><th>同义名</th><th>跳转条件</th><th>描述</th></tr></thead><tbody><tr><td>jmp Label</td><td></td><td>1</td><td>直接跳转</td></tr><tr><td>jmp *Operand</td><td></td><td>1</td><td>间接跳转</td></tr><tr><td>je Label</td><td>jz</td><td>ZF</td><td>相等&#x2F;零</td></tr><tr><td>jne Label</td><td>jnz</td><td>~ZF</td><td>不相等&#x2F;非零</td></tr><tr><td>js Label</td><td></td><td>SF</td><td>负数</td></tr><tr><td>jns Label</td><td></td><td>~SF</td><td>非负数</td></tr><tr><td>jg Label</td><td>jnle</td><td>~(SF^OF) &amp; ~ZF</td><td>有符号大于</td></tr><tr><td>jge Label</td><td>jnl</td><td>~(SF^OF)</td><td>有符号大于等于</td></tr><tr><td>jl Label</td><td>jnge</td><td>SF^OF</td><td>有符号小于</td></tr><tr><td>jle Label</td><td>jng</td><td>(SF^OF) &#124; ZF</td><td>有符号小于等于</td></tr><tr><td>ja Label</td><td>jnbe</td><td>~CF &amp; ~ZF</td><td>无符号大于</td></tr><tr><td>jae Label</td><td>jnb</td><td>~CF</td><td>无符号大于等于</td></tr><tr><td>jb Label</td><td>jnae</td><td>CF</td><td>无符号小于</td></tr><tr><td>jbe Label</td><td>jna</td><td>CF &#124; ZF</td><td>无符号小于等于</td></tr></tbody></table><p>后缀含义同 set 指令一致</p><ol start="3"><li>有条件地传送（CMOV）</li></ol><table><thead><tr><th>指令</th><th>同义名</th><th>传送条件</th><th>描述</th></tr></thead><tbody><tr><td>comve S, R</td><td>cmovz</td><td>ZF</td><td>相等&#x2F;零</td></tr><tr><td>comvne S, R</td><td>cmovnz</td><td>~ZF</td><td>不相等&#x2F;非零</td></tr><tr><td>comvs S, R</td><td></td><td>SF</td><td>负数</td></tr><tr><td>comvns S, R</td><td></td><td>~SF</td><td>非负数</td></tr><tr><td>comvg S, R</td><td>cmovnle</td><td>~(SF^OF) &amp; ~ZF</td><td>有符号大于</td></tr><tr><td>comvge S, R</td><td>cmovnl</td><td>~(SF^OF)</td><td>有符号大于等于</td></tr><tr><td>comvl S, R</td><td>cmovnge</td><td>SF^OF</td><td>有符号小于</td></tr><tr><td>comvle S, R</td><td>cmovng</td><td>(SF^OF) &#124; ZF</td><td>有符号小于等于</td></tr><tr><td>comva S, R</td><td>cmovnbe</td><td>~CF &amp; ~ZF</td><td>无符号大于</td></tr><tr><td>comvae S, R</td><td>cmovnb</td><td>~CF</td><td>无符号大于等于</td></tr><tr><td>comvb S, R</td><td>cmovnae</td><td>CF</td><td>无符号小于</td></tr><tr><td>comvbe S, R</td><td>cmovna</td><td>CF &#124; ZF</td><td>无符号小于等于</td></tr></tbody></table><p>后缀含义同 set 指令一致</p><h3 id="跳转指令的编码"><a href="#跳转指令的编码" class="headerlink" title="跳转指令的编码"></a>跳转指令的编码</h3><p>虽然在这里我们不关心机器码格式的细节，但是理解跳转指令的目标是如何编码的对后续研究链接是非常重要的。<br>现在有以下汇编代码及其机器码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0000000000000000 &lt;loop&gt;:</span><br><span class="line">   0:   f3 0f 1e fa             endbr64</span><br><span class="line">   4:   89 f8                   mov    %edi,%eax</span><br><span class="line">   6:   eb 02                   jmp    a &lt;loop+0xa&gt;</span><br><span class="line">   8:   d1 f8                   sar    $1,%eax</span><br><span class="line">   a:   85 c0                   test   %eax,%eax</span><br><span class="line">   c:   7f fa                   jg     8 &lt;loop+0x8&gt;</span><br><span class="line">   e:   c3                      ret</span><br></pre></td></tr></table></figure><p>其中 jmp 指令的目标为 a &lt;loop+0xa&gt;，对应的编码为 0x02，即 2，而 jg 指令的目标为 8 &lt;loop+0x8&gt;，对应的编码为 0xfa，即-6，可以看出跳转指令的目标的编码是相对的，计算方式为下一条指令的地址加上偏移量，比如 jmp 指令的目标为 0x0a，实际上是 0x08+0x02 得到的，jg 指令的目标为 0x08，实际上是 0x0e+0xfa 得到的，这样编码的好处在于，当这个方法被重定义到其他地方中时该代码不需要发生改变。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>过程是软件中的一种重要的抽象，它提供了一种封装代码的方式，在不同编程语言中会有不同的形式，比如函数，方法等。所以要对过程进行机器级的支持，假设 P 调用 Q，Q 执行后返回到 P，这一个调用的动作主要包含以下机制：</p><ul><li>传递控制，进入过程 Q 时，程序计数器需要设置为 Q 代码的起始地址，然后在返回时需要设置回 P 中调用 Q 后面的那条指令。</li><li>传递参数，P 需要能够为 Q 提供一个或多个参数，Q 必须能向 P 返回一个值。</li><li>分配和释放内存，在开始时，需要为 Q 的局部变量分配空间，在返回前，需要释放掉这些空间。</li></ul><h3 id="运行时栈"><a href="#运行时栈" class="headerlink" title="运行时栈"></a>运行时栈</h3><p>过程运行时超出寄存器的部分就要在内存中开辟空间，这个部分称为过程的栈帧，依然假设 P 调用 Q，在内存中会产生以下结构：</p><p>栈底</p><table>  <tr><td>较早的帧</td><td>...</td><td></td><td rowspan="10">^<br>|<br>|<br>地<br>址<br>增<br>大<br>|<br>|</td></tr>  <tr><td rowspan="5">P的帧</td><td>...</td><td></td></tr>  <tr><td>参数n</td><td></td></tr>  <tr><td>...</td><td></td></tr>  <tr><td>参数7</td><td></td></tr>  <tr><td>返回地址</td><td></td></tr>  <tr><td rowspan="3">Q的帧</td><td>被保存的寄存器</td><td><- %rbp</td></tr>  <tr><td>局部变量</td><td></td></tr>  <tr><td>参数构造区</td><td><- %rsp</td></tr></table><p>栈“顶”</p><p>此时为 Q 运行完准备返回时的内存情况，%rsp 寄存器记录栈顶位置，%rbp 寄存器记录栈底位置</p><h3 id="控制转移"><a href="#控制转移" class="headerlink" title="控制转移"></a>控制转移</h3><p>使用 call 指令调用过程，ret 指令从过程调用中返回。<br>在读取完 call 指令后会将程序计数器（PC）的值压入栈中，也就是返回地址，在 x86-64 中使用%rip 来表示 PC，然后将 PC 设置为过程的起始地址，实现将控制从 P 转到 Q 中。<br>在读取完 ret 指令后会将 Q 中的栈帧回收，将被保护的寄存器恢复，然后将返回地址弹出，并将 PC 设置为弹出值，实现将控制从 Q 返回到 P 中。</p><h3 id="数据传送"><a href="#数据传送" class="headerlink" title="数据传送"></a>数据传送</h3><p>除了控制转移，还需要实现参数传递。在 x86-64 中大部分参数都是通过寄存器实现的，当 P 调用过程 Q 时，P 的代码必须先将参数复制到适当的寄存器当中，而当 Q 返回到 P 时，P 的代码就可访问寄存器%rax 中的返回值。<br>x86-64 中可以通过寄存器最多传递 6 个整型参数，寄存器的使用是有特殊顺序的，具体使用哪个长度的寄存器是根据数据格式长度决定的，规则依据下表：</p><table>  <tr><th rowspan="2">参数大小（位）</th><th colspan="6">参数顺序</th></tr>  <tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th></tr>  <tr><td>64</td><td>%rdi</td><td>%rsi</td><td>%rdx</td><td>%rcx</td><td>%r8</td><td>%r9</td></tr>  <tr><td>32</td><td>%edi</td><td>%esi</td><td>%edx</td><td>%ecx</td><td>%r8d</td><td>%r9d</td></tr>  <tr><td>16</td><td>%di</td><td>%si</td><td>%dx</td><td>%cx</td><td>%r8w</td><td>%r9w</td></tr>  <tr><td>8</td><td>%dil</td><td>%sil</td><td>%dl</td><td>%cl</td><td>%r8b</td><td>%r9b</td></tr></table><p>超过六个的参数就要通过栈来传递了，下面有一个例子：</p><p>c 代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">proc</span><span class="params">(<span class="type">long</span> a1,<span class="type">long</span>* a1p,<span class="type">int</span> a2,<span class="type">int</span>* a2p,<span class="type">short</span> a3,<span class="type">short</span>* a3p,<span class="type">char</span> a4,<span class="type">char</span>* a4p)</span>&#123;</span><br><span class="line">    *a1p+=a1;</span><br><span class="line">    *a2p+=a2;</span><br><span class="line">    *a3p+=a3;</span><br><span class="line">    *a4p+=a4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">proc:</span><br><span class="line">    .cfi_startproc</span><br><span class="line">    endbr64</span><br><span class="line">    movq    16(%rsp), %rax   # 获取a4p</span><br><span class="line">    addq    %rdi, (%rsi)     # *a1p+=a1</span><br><span class="line">    addl    %edx, (%rcx)     # *a2p+=a2</span><br><span class="line">    addw    %r8w, (%r9)      # *a3p+=a3</span><br><span class="line">    movl    8(%rsp), %edx    # 获取a4</span><br><span class="line">    addb    %dl, (%rax)      # *a4p+=a4</span><br><span class="line">    ret</span><br><span class="line">    .cfi_endproc</span><br></pre></td></tr></table></figure><p>可以看到参数 a4 和 a4p 都是通过%rsp 加偏置量来获取的，所有通过栈传递的传递的参数都是向 8 字节对齐的。<br>第一个通过栈传递的传递的参数并不是栈顶数据而是栈顶的下一个数据，这是因为执行 call 指令后会将返回地址压入栈中，所以栈顶数据为返回地址。</p><h3 id="栈上的局部存储"><a href="#栈上的局部存储" class="headerlink" title="栈上的局部存储"></a>栈上的局部存储</h3><p>过程的局部变量会在栈空间存储，在过程开始时，栈指针会减小来申请空间，当过程结束时，栈指针会增加来回收申请的空间。</p><p>c 代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">caller_proc</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">long</span> a1=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> a2=<span class="number">2</span>;</span><br><span class="line">    <span class="type">short</span> a3=<span class="number">3</span>;</span><br><span class="line">    <span class="type">char</span> a4=<span class="number">4</span>;</span><br><span class="line">    proc(a1,&amp;a1,a2,&amp;a2,a3,&amp;a3,a4,&amp;a4);</span><br><span class="line">    <span class="keyword">return</span> (a1+a2)*(a3-a4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">caller_proc:</span><br><span class="line">.LFB1:</span><br><span class="line">    .cfi_startproc</span><br><span class="line">    endbr64</span><br><span class="line">    subq    $40, %rsp       # 申请空间</span><br><span class="line">    .cfi_def_cfa_offset 48</span><br><span class="line">    movq    %fs:40, %rax</span><br><span class="line">    movq    %rax, 24(%rsp)</span><br><span class="line">    xorl    %eax, %eax</span><br><span class="line">    movq    $1, 16(%rsp)</span><br><span class="line">    movl    $2, 12(%rsp)</span><br><span class="line">    movw    $3, 10(%rsp)</span><br><span class="line">    movb    $4, 9(%rsp)</span><br><span class="line">    leaq    12(%rsp), %rcx</span><br><span class="line">    leaq    16(%rsp), %rsi</span><br><span class="line">    leaq    9(%rsp), %rax</span><br><span class="line">    pushq   %rax</span><br><span class="line">    .cfi_def_cfa_offset 56</span><br><span class="line">    pushq   $4</span><br><span class="line">    .cfi_def_cfa_offset 64</span><br><span class="line">    leaq    26(%rsp), %r9</span><br><span class="line">    movl    $3, %r8d</span><br><span class="line">    movl    $2, %edx</span><br><span class="line">    movl    $1, %edi</span><br><span class="line">    call    proc</span><br><span class="line">    movslq  28(%rsp), %rax</span><br><span class="line">    addq    32(%rsp), %rax</span><br><span class="line">    movswl  26(%rsp), %edx</span><br><span class="line">    movsbl  25(%rsp), %ecx</span><br><span class="line">    subl    %ecx, %edx</span><br><span class="line">    movslq  %edx, %rdx</span><br><span class="line">    imulq   %rdx, %rax</span><br><span class="line">    addq    $16, %rsp</span><br><span class="line">    .cfi_def_cfa_offset 48</span><br><span class="line">    movq    24(%rsp), %rdx</span><br><span class="line">    subq    %fs:40, %rdx</span><br><span class="line">    jne     .L5</span><br><span class="line">    addq    $40, %rsp       # 回收空间</span><br><span class="line">    .cfi_remember_state</span><br><span class="line">    .cfi_def_cfa_offset 8</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure><h3 id="寄存器中的局部存储空间"><a href="#寄存器中的局部存储空间" class="headerlink" title="寄存器中的局部存储空间"></a>寄存器中的局部存储空间</h3><p>寄存器组是唯一被过程共享的资源，虽然在给定时刻只有一个过程是活动的，但我们仍然要保证调用者调用被调用者时，被调用者不能覆盖调用者稍后会使用的寄存器。为此 x86-64 采用了一组惯例来保证这一点。根据惯例，寄存器%rbx，%rbp 和%r12~%r15 被划分为被调用者保存寄存器。被调用过程在过程开始时有义务保存好这些寄存器中的值，在过程结束准备返回时应当恢复这些寄存器中的值，下面有一个例子：</p><p>c 代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">P</span><span class="params">(<span class="type">long</span> x,<span class="type">long</span> y)</span>&#123;</span><br><span class="line">    <span class="type">long</span> u = Q(y);</span><br><span class="line">    <span class="type">long</span> v = Q(x);</span><br><span class="line">    <span class="keyword">return</span> u+v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>汇编代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">P:</span><br><span class="line">.LFB0:</span><br><span class="line">    .cfi_startproc</span><br><span class="line">    endbr64</span><br><span class="line">    pushq   %rbp            # 保存rbp</span><br><span class="line">    .cfi_def_cfa_offset 16</span><br><span class="line">    .cfi_offset 6, -16</span><br><span class="line">    pushq   %rbx            # 保存rbx</span><br><span class="line">    .cfi_def_cfa_offset 24</span><br><span class="line">    .cfi_offset 3, -24</span><br><span class="line">    subq    $8, %rsp</span><br><span class="line">    .cfi_def_cfa_offset 32</span><br><span class="line">    movq    %rdi, %rbp</span><br><span class="line">    movq    %rsi, %rdi</span><br><span class="line">    movl    $0, %eax</span><br><span class="line">    call    Q</span><br><span class="line">    movslq  %eax, %rbx</span><br><span class="line">    movq    %rbp, %rdi</span><br><span class="line">    movl    $0, %eax</span><br><span class="line">    call    Q</span><br><span class="line">    cltq</span><br><span class="line">    addq    %rbx, %rax</span><br><span class="line">    addq    $8, %rsp</span><br><span class="line">    .cfi_def_cfa_offset 24</span><br><span class="line">    popq    %rbx            # 恢复rbx</span><br><span class="line">    .cfi_def_cfa_offset 16</span><br><span class="line">    popq    %rbp            # 恢复rbp</span><br><span class="line">    .cfi_def_cfa_offset 8</span><br><span class="line">    ret</span><br><span class="line">    .cfi_endproc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深入理解计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解计算机系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三层架构和分层解耦</title>
      <link href="/blog/post/de55ev34.html"/>
      <url>/blog/post/de55ev34.html</url>
      
        <content type="html"><![CDATA[<h2 id="内聚和耦合"><a href="#内聚和耦合" class="headerlink" title="内聚和耦合"></a>内聚和耦合</h2><p>在软件的设计开发中离不开两个词，内聚性和耦合性 🤔。<br>内聚性是指机能相关的程序组合成一模块的程度，以下的情形会降低程序的内聚性：</p><ul><li>许多机能封装在一类型内，可以借由方法供外界使用，但机能彼此类似之处不多。</li><li>在方法中进行许多不同的机能，使用的是相关性低或不相关的资料。</li></ul><p>低内聚性的缺点如下：</p><ul><li>增加理解模块的困难度。</li><li>增加维护系统的困难度，因为一个逻辑修改会影响许多模块，而一个模块的修改会使得一些相关模块也要修改。</li><li>增加模块复用困难度，因为大部分的应用程序无法复用一个由许多不一定相关的机能组成的模块。</li></ul><p>耦合性是与耦合性是指一程序中模块及模块之间信息或参数依赖的程度。耦合性可以是低耦合性（或称为松散耦合），也可以是高耦合性（或称为紧密耦合）。</p><p>紧密耦合的系统在开发阶段有以下的缺点：</p><ul><li>一个模块的修改会产生涟漪效应，其他模块也需随之修改。</li><li>由于模块之间的相依性，模块的组合会需要更多的精力及时间。</li><li>由于一个模块有许多的相依模块，模块的可复用性低。</li></ul><p>一个优秀的应用程序应当是高内聚和松散耦合的。在开发 web 应用程序时，解决内聚性和耦合性是一个不得不面对的问题，而 spring 框架为我们提供一个很好的解决方案。</p><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><p>在这里我们给出一个示例程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).getFile();</span><br><span class="line">        List&lt;Emp&gt; list = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">        list.forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">switch</span> (gender) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> -&gt; emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> -&gt; emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span> -&gt; emp.setGender(<span class="string">&quot;其他&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">switch</span> (job) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> -&gt; emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> -&gt; emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span> -&gt; emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> Result.success(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例程序中我们在接收到请求时，会将读取<code>emp.xml</code>中的数据并将数据封装入 JavaBean 对象中，然后替换对应字段，接着将处理好的数据封装入 Result 对象中并以 json 的形式返回响应。<br>这个程序代码并不长但是这并不是一个好的程序。它将数据的读取，处理和返回都放在了同一个方法中，这功能之间确实是互相依赖的但彼此之间是可以相互独立的，所以这种写法并不便于后续的开发和维护。根据前面内聚性和耦合性的知识，我们可以判断出这是一个高耦合且低内聚的程序。<br>现在，我们将要对其进行改造。我们将这个方法中对数据的操作分为三个部分：</p><ol><li>数据的读取</li><li>数据的处理</li><li>数据的返回</li></ol><p>并用 spring 中三个层来进行改造，我们先看看 spring 中的三个层之间与前端和数据库的关系：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LRsubgraph Frontendendsubgraph Backendsubgraph Controllerdirection TBA[XxxController]B[XxxController]C[XxxController]endsubgraph Servicedirection TBD[XxxService]E[XxxService]F[XxxService]endsubgraph Daodirection TBG[XxxDao]H[XxxDao]I[XxxDao]endendsubgraph DatabaseendFrontend -- httpRequest --&gt; Backend -- getData --&gt; DatabaseDatabase -- returnData --&gt; Backend -- httpRespond --&gt; FrontendController -- call --&gt; Service -- call --&gt; DaoDao --&gt; Service --&gt; Controller  </pre></div><p>Controller：用于处理 http 请求和返回响应<br>Service：用于处理业务逻辑，处理数据<br>Dao：<code>data access object</code>的缩写，用于和数据库交互获取数据</p><p>现在我们基于这三层架构对程序进行改造：</p><p>Controller 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">EmpService</span> <span class="variable">empService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpServiceA</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(empService.listEmp());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Service层接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Service层实现类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">EmpDao</span> <span class="variable">empDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpDaoA</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Emp&gt; list = empDao.listEmp();</span><br><span class="line">        list.forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">switch</span> (gender) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> -&gt; emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> -&gt; emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span> -&gt; emp.setGender(<span class="string">&quot;其他 &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">switch</span> (job) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> -&gt; emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> -&gt; emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span> -&gt; emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dao 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dao层接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dao层实现类</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoA</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> Objects.requireNonNull(<span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>)).getFile();</span><br><span class="line">        <span class="keyword">return</span> XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过改造后，我们成功将每个模块都独立了出来，便于我们后期对各个模块进行维护和拓展功能，虽然我们提高了每个模块自身的内聚性，但是我们并没有解决每个层之间的耦合性，当我们产品迭代需要开发新的实现类时，我们还是需要到每个层中实例化对应的对象。这仍然不便于协作开发，因此我们需要分层解耦。</p><h2 id="分层解耦"><a href="#分层解耦" class="headerlink" title="分层解耦"></a>分层解耦</h2><p>IOC（控制反转，Inversion of Control）和 DI（依赖注入，Dependency Injection），通过使用这两个概念我们能实现组件之间的解耦和提高代码的可维护性。下面是这两个概念的详细解释。</p><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><p>控制反转是一种设计原则，它将对象的创建和管理权从应用程序代码转移到外部容器。换句话说，IOC 让框架或容器负责控制程序的执行流，而不是由程序自身来控制。<br>在传统的编程中，程序通常会直接创建和管理依赖对象。但在 IOC 中，应用程序通过依赖于抽象（如接口或基类）来声明所需的依赖，而具体的实现和生命周期则由 IOC 容器负责。</p><h3 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h3><p>依赖注入是指在一个 JavaBean 对象在使用时将其依赖的其他对象从 IOC 容器中注入到 JavaBean 对象中。</p><p>spring 中提供了这两个概念的具体实现，使用以下注释可以将 JavaBean 的控制权交给 spring 的 IoC 容器：</p><table><thead><tr><th>注解</th><th>说明</th><th>位置</th></tr></thead><tbody><tr><td>@Component</td><td>声明 bean 的基础注解</td><td>不属于下面三类</td></tr><tr><td>@Controller</td><td>@Component 的衍生注解</td><td>控制器类</td></tr><tr><td>@Service</td><td>@Component 的衍生注解</td><td>业务类</td></tr><tr><td>@Repository</td><td>@Component 的衍生注解</td><td>数据访问类</td></tr></tbody></table><p>使用<code>@Autowired</code>注解可以在使用到相关类时让 spring 的 IoC 容器自动装配到此类中。<br>使用这些注解改造后的代码：</p><p>Controller 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(empService.listEmp());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Service层接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Service层实现类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpDao empDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Emp&gt; list = empDao.listEmp();</span><br><span class="line">        list.forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">switch</span> (gender) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> -&gt; emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> -&gt; emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span> -&gt; emp.setGender(<span class="string">&quot;其他 &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">switch</span> (job) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> -&gt; emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> -&gt; emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span> -&gt; emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dao 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dao层接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dao层实现类</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoA</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> Objects.requireNonNull(<span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>)).getFile();</span><br><span class="line">        <span class="keyword">return</span> XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>@RestController</code>注解是包含了<code>@Controller</code>和<code>@ResponseBody</code>注解的。</p><p>通过这些操作我们成功降低了三层之间的耦合性 🥳</p><p>不过还有一个小问题，如果在后期我们新增了一个 Service 接口的实现类，那么在 autowired 时就会出现 Error，IoC 容器并不知道要注入哪个实现类对象，对于这个问题有三种解决方法：</p><ol><li><p>@Primary：使用<code>@Primary</code>提升注入的优先级<br>使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> EmpDao empDao;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">     List&lt;Emp&gt; list = empDao.listEmp();</span><br><span class="line">     list.forEach(emp -&gt; &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">         <span class="keyword">switch</span> (gender) &#123;</span><br><span class="line">             <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> -&gt; emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">             <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> -&gt; emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">             <span class="keyword">case</span> <span class="string">&quot;3&quot;</span> -&gt; emp.setGender(<span class="string">&quot;其他 &quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">         <span class="keyword">switch</span> (job) &#123;</span><br><span class="line">             <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> -&gt; emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">             <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> -&gt; emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">             <span class="keyword">case</span> <span class="string">&quot;3&quot;</span> -&gt; emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="keyword">return</span> list;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@Qualifier：使用<code>@Qualifier</code>预选择注入的类，通过名称指定，名称可以在<code>@Component</code>处修改<br>使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line"> <span class="meta">@Qualifier(&quot;empServiceA&quot;)</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> EmpService empService;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> Result.success(empService.listEmp());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@Resource：这是 Java EE 规范中提供的，<code>@Resource</code>用于资源的查找的注入<br>使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line"> <span class="meta">@Resource(name = &quot;empServiceA&quot;)</span></span><br><span class="line"> <span class="keyword">private</span> EmpService empService;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> Result.success(empService.listEmp());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>controller响应请求</title>
      <link href="/blog/post/236k9554.html"/>
      <url>/blog/post/236k9554.html</url>
      
        <content type="html"><![CDATA[<div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR  A[浏览器（browser）]  B[前端控制器\nDispathcherServlet]  C[XxxController]  D[XxxController]  E[XxxController]  F[App]  G[小程序]  subgraph 客户端    direction TB    A    F    G  end  subgraph web服务器    direction LR    B -- 2 --&gt; C -- 3 --&gt; B    B -- 2 --&gt; D -- 3 --&gt; B    B -- 2 --&gt; E -- 3 --&gt; B  end  客户端 -- 1 --&gt; web服务器 -- 4 --&gt; 客户端  </pre></div><ol><li>发起请求</li><li>将请求解析为 HttpServletRequest 对象</li><li>将响应封装为 HttpServletResponse 对象</li><li>返回响应</li></ol>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息的表示和处理</title>
      <link href="/blog/post/8705251a.html"/>
      <url>/blog/post/8705251a.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>计算机是以二进制（0 和 1）的方式存储信息的，包括数字，字符，图像，音频等。每个二进制位称为比特（bit），8 个二进制位为一个字节（byte）。内存的最小寻址单位就是一个字节。在研究二进制数据时使用 01 的方式不便于阅读，一般会转换十六进制来表示。</p><h2 id="大端存储和小端存储"><a href="#大端存储和小端存储" class="headerlink" title="大端存储和小端存储"></a>大端存储和小端存储</h2><p>对于二进制数如何在计算机中存储这个问题，人们提出了两种解决方案，大端法和小端法。<br>对于数据 0x01234567 的存储：</p><p>大端法：</p><table><thead><tr><th>…</th><th>0x100</th><th>0x101</th><th>0x102</th><th>0x103</th><th>…</th></tr></thead><tbody><tr><td>…</td><td>01</td><td>23</td><td>45</td><td>67</td><td>…</td></tr></tbody></table><p>小端法：</p><table><thead><tr><th>…</th><th>0x100</th><th>0x101</th><th>0x102</th><th>0x103</th><th>…</th></tr></thead><tbody><tr><td>…</td><td>67</td><td>45</td><td>23</td><td>01</td><td>…</td></tr></tbody></table><p>大端法将高位字节 0x01 放在了前面，而小端法将低位字节放在了后面。<br>下面有一个示例程序来验证机器使用的存储方式为何种：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_bytes</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *p, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2x &quot;</span>, *(p + i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0x01234567</span>;</span><br><span class="line">    show_bytes((<span class="type">unsigned</span> <span class="type">char</span> *) &amp;x, <span class="keyword">sizeof</span>(x));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是小端法的机器则输出<code>67 45 23 01</code>，而大端法机器输出<code>01 23 45 67</code>。<br>这两种存储方式在技术上并无优劣，只是顺序上有所不同，对于这两种存储方式的争论并无意义。</p><h2 id="整数表示"><a href="#整数表示" class="headerlink" title="整数表示"></a>整数表示</h2><table><thead><tr><th>C 语言数据类型</th><th>最小值</th><th>最大值</th><th>占用空间（字节）</th></tr></thead><tbody><tr><td>char</td><td>$-2^7$</td><td>$2^7-1$</td><td>1</td></tr><tr><td>unsigned char</td><td>$0$</td><td>$2^8-1$</td><td>1</td></tr><tr><td>short</td><td>$-2^{15}$</td><td>$2^{15}-1$</td><td>2</td></tr><tr><td>unsigned short</td><td>$0$</td><td>$2^{16}-1$</td><td>2</td></tr><tr><td>int</td><td>$-2^{31}$</td><td>$2^{31}-1$</td><td>4</td></tr><tr><td>unsigned int</td><td>$0$</td><td>$2^{32}-1$</td><td>4</td></tr><tr><td>long</td><td>$-2^{31}$</td><td>$2^{31}-1$</td><td>4</td></tr><tr><td>unsigned long</td><td>$0$</td><td>$2^{32}-1$</td><td>4</td></tr><tr><td>int32_t</td><td>$-2^{31}$</td><td>$2^{31}-1$</td><td>4</td></tr><tr><td>uint32_t</td><td>$0$</td><td>$2^{32}-1$</td><td>4</td></tr><tr><td>int64_t</td><td>$-2^{63}$</td><td>$2^{63}-1$</td><td>8</td></tr><tr><td>uint64_t</td><td>$0$</td><td>$2^{64}-1$</td><td>8</td></tr></tbody></table><p>整型数据使用补码方式表示：</p><p>比如：<br>$(1)<em>{10}&#x3D;(00000001)</em>{2}$<br>$(-1)<em>{10}&#x3D;(11111111)</em>{2}$<br>此时最高位的位权不再是<code>128</code>而是<code>-128</code></p><p>原码转补码就是<code>x-&gt;~x+1</code></p><h2 id="整数运算"><a href="#整数运算" class="headerlink" title="整数运算"></a>整数运算</h2><ol><li><p>加法<br>当进行求和计算时，若它们的和超过了数据类型的表示范围时就发生了溢出（overflow），计算机会将溢出的数据直接截断保留低位有效字节，比如：<code>0xF1 + 0x0F = 0x00</code></p></li><li><p>减法<br>进行减法计算时，会将减数取补然后使用加法的电路进行计算，比如：<code>0x7F - 0x12 = 0x7F + 0xEE = 0x6D</code></p></li><li><p>乘法<br>进行乘法计算时也是和加法一样，溢出的部分截断保留低位有效字节，比如：<code>-3 * 3 = 101 * 011 = 110111</code>然后截断成<code>111</code>。<br>计算机计算二进制乘法的方式类似于人类笔算的方式：</p><ul><li>正数 * 正数</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   0011     3</span><br><span class="line">*  0100     4</span><br><span class="line">-------</span><br><span class="line">0000000</span><br><span class="line">000000</span><br><span class="line">00011</span><br><span class="line">0000</span><br><span class="line">-------</span><br><span class="line">0001100     12</span><br></pre></td></tr></table></figure><ul><li>正数 * 负数</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   0011     3</span><br><span class="line">*  1100     -4</span><br><span class="line">-------</span><br><span class="line">0000000</span><br><span class="line">000000</span><br><span class="line">00011</span><br><span class="line">1101</span><br><span class="line">-------</span><br><span class="line">1110100     -12</span><br></pre></td></tr></table></figure><ul><li>负数 * 正数</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   1101     -3</span><br><span class="line">*  0100     4</span><br><span class="line">-------</span><br><span class="line">0000000</span><br><span class="line">000000</span><br><span class="line">11101</span><br><span class="line">0000</span><br><span class="line">-------</span><br><span class="line">1110100     -12</span><br></pre></td></tr></table></figure><ul><li>负数 * 负数</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   1101     -3</span><br><span class="line">*  1100     -4</span><br><span class="line">-------</span><br><span class="line">0000000</span><br><span class="line">000000</span><br><span class="line">11101</span><br><span class="line">0011</span><br><span class="line">-------</span><br><span class="line">0001100     12</span><br></pre></td></tr></table></figure></li><li><p>乘以常数<br>如果作为乘数的常数为 2 的幂则可以直接进行 <code>x&lt;&lt;n</code> 的操作，如果不是 2 的幂可以通过左移和求和的方式来完成乘法，比如：$14 &#x3D; 2^3 + 2^2 + 2^1$，所以<code>x * 14 = (x&lt;&lt;3) + (x&lt;&lt;2) + (x&lt;&lt;1)</code>或者$14 &#x3D; 2^4 - 1$，所以<code>x * 14 = (x&lt;&lt;4) - (x&lt;&lt;1)</code>，显然后者的步数比较少，效率更高</p></li><li><p>除以 2 的幂<br>如果作为除数的常数为 2 的幂则可以进行<code>x&gt;&gt;n</code> 的操作，注意，这里的右移是算数右移。</p></li></ol><h2 id="浮点数表示"><a href="#浮点数表示" class="headerlink" title="浮点数表示"></a>浮点数表示</h2><p>使用浮点数的表示方式可以让计算机以损失一定精度的代价来表示更大范围的数字，IEEE（I triple E，电气电子工程师学会）浮点标准用$V &#x3D; (-1)^s \times M \times 2^E$来表示一个数：</p><ul><li>符号：s 为 1 时，为负数，s 为 0 时，为正数。</li><li>尾数：M 为二进制小数，它的范围为 [1, 2)，或者是 [0, 1)。</li><li>阶码：E 为浮点数加权，这个权重是 2 的 E 次幂。</li></ul><p>举个例子：<br><code>12345.0</code>的单精度存储为：</p><table><thead><tr><th>符号（31:31）</th><th>阶码（30:23）</th><th>尾数（22:0）</th></tr></thead><tbody><tr><td>0</td><td>10001100</td><td>10000001110010000000000</td></tr></tbody></table><p>符号 1 位，阶码 8 位，位数 23 位</p><p><code>12345.0</code>的双精度存储为：</p><table><thead><tr><th>符号（63:63）</th><th>阶码（62:52）</th><th>尾数（51:0）</th></tr></thead><tbody><tr><td>0</td><td>10000001100</td><td>1000000111001000000000000000000000000000000000000000</td></tr></tbody></table><p>符号 1 位，阶码 11 位，位数 52 位</p><p>这个浮点数根据以下规则转换成 10 进制值：</p><ol><li>符号位为 0 为正数，为 1 为负数。</li><li>根据阶码的情况分为三种：<ol><li>阶码全为 0，此时尾数为非规格化的，其余情况尾数则是规格化的，E 为 1 减去偏置量$2^{k-1}-1$，其中 k 为阶码位数，2 的 E 次幂为这个数的权重。</li><li>阶码全为 1，此时尾数必须全为 0，浮点数表示为$\infty$，若尾数不为 0，则为特殊值<code>NaN</code>（Not a Number）。</li><li>除了上述两种情况，其余情况 E 为阶码为减去偏置量$2^{k-1}-1$，2 的 E 次幂为这个数的权重。</li></ol></li><li>根据尾数是否为规格化的分为两种情况：<ol><li>规格化的，在最前面补 1，尾数补全后为 1.xxxx，补全后的尾数记作 M。</li><li>非规格化的，在最前面补 0，尾数补全后为 0.xxxx，补全后的尾数记作 M。</li></ol></li><li>整个浮点数表示的 10 进制为$V &#x3D; (-1)^s \times M \times 2^E$。</li></ol><p>现在给出一个示例：<br>假设一个基于 IEEE 浮点格式的 5 位数，有 1 个符号位，2 个阶码位，2 个尾数位，以下二进制数表示的十进制值是多少：<br>偏置量为$2^{2-1}-1&#x3D;1$</p><ul><li>00000 <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">答案  </button><span class="hide-content">$V = 2^{1-1} \times 0 = 0$</span></span></li><li>00010 <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">答案  </button><span class="hide-content">$V = 2^{1-1} \times 0.5 = 0.5$</span></span></li><li>00100 <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">答案  </button><span class="hide-content">$V = 2^{1-1} \times 1 = 1$</span></span></li><li>00110 <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">答案  </button><span class="hide-content">$V = 2^{1-1} \times 1.5 = 1.5$</span></span></li><li>01000 <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">答案  </button><span class="hide-content">$V = 2^{2-1} \times 1 = 2$</span></span></li><li>01011 <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">答案  </button><span class="hide-content">$V = 2^{2-1} \times 1.75 = 3.5$</span></span></li><li>01100 <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">答案  </button><span class="hide-content">$V = +\infty$</span></span></li><li>01101 <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">答案  </button><span class="hide-content">NaN</span></span></li></ul><h2 id="浮点数的舍入"><a href="#浮点数的舍入" class="headerlink" title="浮点数的舍入"></a>浮点数的舍入</h2><p>由于浮点数的表示方式导致的精度和范围，我们只能使用近似值来进行实数运算，所以 IEEE 指定了一个向偶数舍入的舍入规则来用浮点数能表示的数来近似代表对应实数。<br>这个向偶数舍入的规则与四舍五入有些相似，但是它规定当需要舍入为两个最低有效数字的平均值时，则向偶数舍入使得最低有效数字为偶数，举几个例子：<br>假设最低有效数字为小数点后两位</p><ul><li>1.454 -&gt; 1.45</li><li>1.456 -&gt; 1.46</li><li>1.455 -&gt; 1.46</li><li>1.465 -&gt; 1.46</li><li>1.995 -&gt; 2.00</li></ul><p>对于二进制数也相似，而且二进制的向偶数舍入更简单，毕竟二进制只有 0 和 1，0 为偶数，1 为奇数，举几个例子：<br>假设最低有效数字为小数点后两位</p><ul><li>11.100 -&gt; 11.10</li><li>11.101 -&gt; 11.10</li><li>11.110 -&gt; 11.11</li><li>11.111 -&gt; 100.00</li></ul><h2 id="浮点数的运算"><a href="#浮点数的运算" class="headerlink" title="浮点数的运算"></a>浮点数的运算</h2><p>由于精度和范围，浮点数计算时有可能会发生舍入和溢出，比如在单精度情况下，$(1e20 \times 1e20) \times 1e-20 &#x3D; +\infty$，而$1e20 \times (1e20 \times 1e-20) &#x3D; 1e20$，这是因为在计算$1e20 \times 1e20$时，发生了溢出，再举个例子，比如在单精度情况下，$1e20 \times (1e20-1e20) &#x3D; 0.0$，而$1e20 \times 1e20-1e20 \times 1e20&#x3D;NaN$ （Inf-Inf&#x3D;NaN）。在类型转换时，int 转 float 会发生舍入，而 int 转 double 就不会。</p>]]></content>
      
      
      <categories>
          
          <category> 深入理解计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解计算机系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>衡量计算机性能标准</title>
      <link href="/blog/post/37jfws7d.html"/>
      <url>/blog/post/37jfws7d.html</url>
      
        <content type="html"><![CDATA[<h2 id="衡量计算机性能的几个指标"><a href="#衡量计算机性能的几个指标" class="headerlink" title="衡量计算机性能的几个指标"></a>衡量计算机性能的几个指标</h2><ol><li>主频（Clock Speed）：<br>以 GHz 为单位，表示 CPU 每秒钟可以执行的时钟周期数。虽然主频是一个重要的性能指标，但并不能单独决定处理器的性能。</li><li>每个时钟周期的指令数（IPC，Instructions Per Cycle）：<br>表示 CPU 在每个时钟周期内可以执行的指令数量。更高的 IPC 意味着更高的效率。由于每种指令的 IPC 都不一样，所以计算 CPU 的 IPC 时一般是计算平均 IPC。</li><li>每秒钟的指令数（IPS，Instructions Per Second）：<br>IPS 与主频和 IPC 有关，计算公式如下：<br>$$ \text{IPS} &#x3D; \text{主频(GHz)} \times \text{IPC} $$</li><li>核心数和线程数：<br>多核处理器可以并行处理多个任务。线程数（尤其是支持超线程的 CPU）也可以影响多任务处理的性能。</li><li>缓存（Cache）：<br>CPU 的三级缓存（L1、L2、L3）的大小和速度会影响数据访问速度，较大的缓存通常能提高性能。</li><li>TDP（Thermal Design Power）：<br>设计功耗，表示 CPU 在正常工作时的功耗，影响散热设计和能效。</li><li>每秒钟操作数（OPS，Operations Per Second）<br>与IPS（Instructions Per Second）不同，OPS更广泛地用于描述各种操作，包括但不限于指令执行。比如在数据库系统中，OPS可以用于衡量每秒能够处理的事务或查询数量，反映数据库的处理能力。在机器学习或深度学习中，OPS可以用于衡量每秒能够执行的计算操作，帮助评估硬件（如GPU、TPU等）的性能。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 深入理解计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解计算机系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解计算机系统</title>
      <link href="/blog/post/f1u3bpyv.html"/>
      <url>/blog/post/f1u3bpyv.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列是为了记录一下自己在学习《深入理解计算机系统》这本书时的一些心得和重点。在使用一些接近底层的语言时，对计算机系统有深入的理解可以帮助写出更加优秀的程序。</p><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><div class="note info no-icon flat"><h3 id="深入理解计算机系统文章导航-🌏"><a href="#深入理解计算机系统文章导航-🌏" class="headerlink" title="深入理解计算机系统文章导航 🌏"></a>深入理解计算机系统文章导航 🌏</h3><ol><li><a href="/blog/post/f1u3bpyv.html" title="深入理解计算机系统">深入理解计算机系统</a></li><li><a href="/blog/post/37jfws7d.html" title="衡量计算机性能标准">衡量计算机性能标准</a></li><li><a href="/blog/post/8705251a.html" title="信息的表示和处理">信息的表示和处理</a></li><li><a href="/blog/post/869285ma.html" title="程序的机器级表示">程序的机器级表示</a></li><li><a href="/blog/post/03b23ak4.html" title="处理器体系结构">处理器体系结构</a></li><li><a href="/blog/post/37jfws7d.html" title="计算机系统漫游">计算机系统漫游</a></li></ol></div>]]></content>
      
      
      <categories>
          
          <category> 深入理解计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解计算机系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表达式求值</title>
      <link href="/blog/post/bdiou7vx.html"/>
      <url>/blog/post/bdiou7vx.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们平时见到的表达式一般为中缀表达式，比如<code>3 + 5 * (2 - 1)</code>，这个表达式对于计算机来说并不是直接计算出它的答案的，而是先将其转换成后缀表达式然后再进行计算。</p><h2 id="后缀表达式（逆波兰表达式）"><a href="#后缀表达式（逆波兰表达式）" class="headerlink" title="后缀表达式（逆波兰表达式）"></a>后缀表达式（逆波兰表达式）</h2><p>举个例子，计算一个中缀表达式的具体步骤：</p><ol><li>中缀表达式：<code>3 + 5 * (2 - 1)</code></li><li>转换为后缀表达式：<code>3 5 2 1 - * +</code></li><li>计算结果</li></ol><h3 id="转换过程"><a href="#转换过程" class="headerlink" title="转换过程"></a>转换过程</h3><p>转换的步骤通常遵循运算符优先级和括号规则以及左优先原则：</p><ol><li>操作数：遇到操作数（数字）时，将其放入输出列表。</li><li>操作符：遇到操作符时，根据优先级进行处理：<ul><li>如果当前操作符的优先级高于栈顶操作符，则将其压入栈。</li><li>如果当前操作符的优先级低于或等于栈顶操作符，则将栈顶操作符弹出，加入输出列表，直到找到优先级较低的操作符或栈为空，然后将当前操作符压入栈。</li></ul></li><li>括号：<ul><li>遇到左括号 ( 时，将其压入栈。</li><li>遇到右括号 ) 时，将栈中的操作符弹出并加入输出列表，直到遇到左括号。</li></ul></li></ol><p>以<code>3 + 5 * (2 - 1)</code>为例：</p><ol><li>栈-&gt;<code>[]</code>，输出-&gt;<code>[]</code></li><li>栈-&gt;<code>[]</code>，输出-&gt;<code>[3]</code></li><li>栈-&gt;<code>[+]</code>，输出-&gt;<code>[3]</code></li><li>栈-&gt;<code>[+]</code>，输出-&gt;<code>[3, 5]</code></li><li>栈-&gt;<code>[+, *]</code>，输出-&gt;<code>[3, 5]</code></li><li>栈-&gt;<code>[+, *, (]</code>，输出-&gt;<code>[3, 5]</code></li><li>栈-&gt;<code>[+, *, (]</code>，输出-&gt;<code>[3, 5, 2]</code></li><li>栈-&gt;<code>[+, *, (, -]</code>，输出-&gt;<code>[3, 5, 2, 1]</code></li><li>栈-&gt;<code>[+, *]</code>，输出-&gt;<code>[3, 5, 2, 1, -,]</code></li><li>栈-&gt;<code>[+]</code>，输出-&gt;<code>[3, 5, 2, 1, -, *]</code></li><li>栈-&gt;<code>[]</code>，输出-&gt;<code>[3, 5, 2, 1, -, *, +]</code></li></ol><p>最后得到结果：<code>3 5 2 1 - * +</code></p><h3 id="计算过程"><a href="#计算过程" class="headerlink" title="计算过程"></a>计算过程</h3><ol><li>遇到操作数时，将其压入栈。</li><li>遇到操作符时，从栈中弹出相应数量的操作数进行运算，并将结果压回栈。</li><li>最终，栈中剩下的值就是表达式的结果。</li></ol><p>以后缀表达式<code>3 5 2 1 - * +</code>为例：</p><ol><li>栈-&gt;<code>[]</code></li><li>栈-&gt;<code>[3]</code></li><li>栈-&gt;<code>[3, 5]</code></li><li>栈-&gt;<code>[3, 5, 2]</code></li><li>栈-&gt;<code>[3, 5, 2, 1]</code></li><li>栈-&gt;<code>[3, 5, 1]</code></li><li>栈-&gt;<code>[3, 5]</code></li><li>栈-&gt;<code>[8]</code></li></ol><p>最后得到结果：<code>8</code></p><h2 id="前缀表达式（波兰表达式）"><a href="#前缀表达式（波兰表达式）" class="headerlink" title="前缀表达式（波兰表达式）"></a>前缀表达式（波兰表达式）</h2><p>前缀表达式是将操作符放到了两个操作数前面，比如：<br>中缀表达式<code>3 + 5 * (2 - 1)</code>转换为后缀表达式为<code>+ 3 * 5 - 2 1</code></p><p>它的转换规则与逆波兰表达式基本一致，只是遍历方向变成了从右往左。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>串与KMP</title>
      <link href="/blog/post/zrql7n43.html"/>
      <url>/blog/post/zrql7n43.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>串结构是计算机程序中经常需要使用和运算的，深入研究其结构和相关算法是大有益处的。</p><h2 id="串"><a href="#串" class="headerlink" title="串"></a>串</h2><p>串为一种特殊的线性表结构，所以可以用顺序表和链表的方式来进行实现，由于串结构的使用非常平凡，基本上是每个应用程序都会使用的一种结构，所以主流的编程语言都对字符串有非常良好的工具库支持，因此我们在这里不研究串结构的实现，我们会将重心放在字符串模式匹配算法和实现上。</p><h2 id="字符串模式匹配"><a href="#字符串模式匹配" class="headerlink" title="字符串模式匹配"></a>字符串模式匹配</h2><p>字符串模式匹配就是在主串中找到与模式串相同的子串，并返回其所在位置。模式串就是我们要在主串寻找字串，它不一定在主串中存在，而子串就是主串中的连续子集，子串是一定存在的，不要把模式串和子串的概念混淆了。</p><h3 id="朴素模式匹配算法"><a href="#朴素模式匹配算法" class="headerlink" title="朴素模式匹配算法"></a>朴素模式匹配算法</h3><p>朴素模式匹配算法其实就是暴力搜索。<br>假设主串长度为 n，模式串长度为 m，然后将主串中所有长度为 m 的子串依次与模式串对比，直到找到一个完全匹配的子串，或者所有子串都不匹配为止。</p><p>下面是代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回先匹配子串的索引，若都不匹配返回-1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">index</span><span class="params">(std::string s, std::string t)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> sLen = s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="type">int</span> tLen = t.<span class="built_in">length</span>();</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; sLen &amp;&amp; j &lt; tLen) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == t[j]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i -= j - <span class="number">1</span>;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j &gt;= tLen) <span class="keyword">return</span> i - tLen;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个算法的最坏时间复杂度为 O(nm)</p><h3 id="KMP-算法"><a href="#KMP-算法" class="headerlink" title="KMP 算法"></a>KMP 算法</h3><p>KMP 算法是基于朴素模式匹配算法优化的，从刚才的算法中我们不难看出，如果我们模式串的指针已经指向了最后一位，那么就证明前面的 m-1 个字符都是匹配上的，如果前面的 m-1 个字符存在最大公共前后缀，那么我们就没有必要像朴素匹配那样将主串的指针移动到下一个子串处和将模式串的指针移动到模式串头，而是只将模式串指针移动到最大公共前后缀的前缀处后面，主串指针保持不变。所以说通过构建一个部分匹配表 next 数组，我们可以实现 O（m+n）的匹配算法，其中 O（m）为构建 next 数组的时间，O（n）为匹配过程所花费的时间，这也就是大名鼎鼎的 KMP 算法（Knuth–Morris–Pratt algorithm）。</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KMP</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] buildNext(String pattern) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> pattern.length();</span><br><span class="line">        <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">        next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">prefixLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; m) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pattern.charAt(prefixLen) == pattern.charAt(i)) &#123;</span><br><span class="line">                prefixLen++;</span><br><span class="line">                next[i++] = prefixLen;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (prefixLen == <span class="number">0</span>) &#123;</span><br><span class="line">                    next[i++] = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    prefixLen = next[prefixLen - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">kmpSearch</span><span class="params">(String text, String pattern)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] next = buildNext(pattern);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> text.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> pattern.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (text.charAt(i) == pattern.charAt(j)) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == m) <span class="keyword">return</span> i - j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;ABABDABACDABABDABAB&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">pattern</span> <span class="operator">=</span> <span class="string">&quot;ABABCABAB&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> kmpSearch(text, pattern);</span><br><span class="line">        <span class="keyword">if</span> (result != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Pattern found at index: &quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Pattern not found&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 串 </tag>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表、栈和队列</title>
      <link href="/blog/post/t0326b24.html"/>
      <url>/blog/post/t0326b24.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>表、栈和队列是三种最基本、最简单的数据结构，此后的很多算法与数据结构都是要基于这三种结构。其实从定义来说栈和队列也是表，只不过它们是操作受限的表，为了以防后续混淆先声明一下位序和索引的不同，位序是从 1 开始的，而索引是从 0 开始的，在后续的实现中一般的操作都是基于索引的，如果是基于位序的会在注释中标明。</p><h2 id="表（List）"><a href="#表（List）" class="headerlink" title="表（List）"></a>表（List）</h2><p>表是一个可以存储多个元素的线性数据结构，通常可以通过索引访问。<br>基础操作：</p><ul><li>插入：在特定位置添加元素。</li><li>删除：从特定位置移除元素。</li><li>查找：通过索引或值查找元素。</li><li>遍历：访问表中的每个元素。</li></ul><p>根据其物理结构（存储结构）的不同，分为：</p><ul><li>顺序表</li><li>链表</li></ul><h3 id="顺序表（Sequence-List）"><a href="#顺序表（Sequence-List）" class="headerlink" title="顺序表（Sequence List）"></a>顺序表（Sequence List）</h3><p>顺序表的存储是在一片连续的空间中的，在程序中使用数组来实现，由于数组是静态的，在程序像操作系统申请分配后其大小就无法改变了，所以要实现一个扩容的动态顺序表就要在扩容申请另一片空间并将原来的数据拷贝到新的空间中，然后释放原来的空间。</p><p>以下是一个动态可扩容的顺序表的代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> E int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_CAPACITY 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">SqList</span> &#123;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">    <span class="type">int</span> capacity;</span><br><span class="line">    E *data;</span><br><span class="line">&#125; SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化表</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">initList</span><span class="params">(SqList &amp;list, <span class="type">int</span> initCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initCapacity &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    list.length = <span class="number">0</span>;</span><br><span class="line">    list.capacity = initCapacity;</span><br><span class="line">    E *p = (E *) <span class="built_in">malloc</span>(initCapacity * <span class="built_in">sizeof</span>(E));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    list.data = p;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">initList</span><span class="params">(SqList &amp;list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">initList</span>(list,DEFAULT_CAPACITY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">(SqList &amp;list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> list.length == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将表扩容至新的大小</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">increaseList</span><span class="params">(SqList &amp;list, <span class="type">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity &lt;= list.capacity)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    E *oldData = list.data;</span><br><span class="line">    E *p = (E *) <span class="built_in">malloc</span>(newCapacity * <span class="built_in">sizeof</span>(E));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    list.data = p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; list.length; ++i) &#123;</span><br><span class="line">        list.data[i] = oldData[i];</span><br><span class="line">    &#125;</span><br><span class="line">    list.capacity = newCapacity;</span><br><span class="line">    <span class="built_in">free</span>(oldData);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定位序处插入元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">listInsert</span><span class="params">(SqList &amp;list, <span class="type">int</span> index,E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt;= <span class="number">0</span> || index &gt; list.length + <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = list.length; i &gt;= index; --i) &#123;</span><br><span class="line">        list.data[i] = list.data[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    list.data[index - <span class="number">1</span>] = e;</span><br><span class="line">    list.length++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除指定位序元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">listDelete</span><span class="params">(SqList &amp;list, <span class="type">int</span> index,E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt;= <span class="number">0</span> || index &gt; list.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = list.data[index - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = index - <span class="number">1</span>; i &lt; list.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        list.data[i] = list.data[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    list.length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据位序获取元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">getIndexElem</span><span class="params">(SqList &amp;list, <span class="type">int</span> index, E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt;= <span class="number">0</span> || index &gt; list.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = list.data[index - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据元素获取位序</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">getElemIndex</span><span class="params">(SqList &amp;list,E e, <span class="type">int</span> &amp;index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; list.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e == list.data[i]) &#123;</span><br><span class="line">            index = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(SqList &amp;list)</span> </span>&#123;</span><br><span class="line">    list.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表（Linked-List）"><a href="#链表（Linked-List）" class="headerlink" title="链表（Linked List）"></a>链表（Linked List）</h3><p>链表是动态可扩容的，每次添加新元素时，都会创建一个新的节点然后将尾节点连接连接到新节点上。<br>这个单链表的实现是包含头节点的，由于这个链表结构只包含头节点的信息，所以许多操作都较于繁琐，可以根据需求进行改造。</p><p>以下是单链表的代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> E int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    E data;</span><br><span class="line">    node *next;</span><br><span class="line">&#125; LNode, *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化链表</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">initList</span><span class="params">(LinkList &amp;list)</span> </span>&#123;</span><br><span class="line">    LinkList p = (LinkList) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    list = p;</span><br><span class="line">    list-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为空表</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">(LinkList &amp;list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> list-&gt;next == <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定节点后插入元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insertNextNode</span><span class="params">(LNode *p,E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *q = (LNode *) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span> (q == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    q-&gt;data = e;</span><br><span class="line">    q-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = q;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定节点前插入元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insertPriorNode</span><span class="params">(LNode *p,E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *q = (LNode *) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span> (q == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    q-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = q;</span><br><span class="line">    q-&gt;data = p-&gt;data;</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定位序的节点</span></span><br><span class="line"><span class="function">LNode *<span class="title">getIndexNode</span><span class="params">(LinkList list, <span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    LNode *p = list;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span> &amp;&amp; i &lt; index) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定元素的节点</span></span><br><span class="line"><span class="function">LNode *<span class="title">getElemNode</span><span class="params">(LinkList list,E e)</span> </span>&#123;</span><br><span class="line">    LNode *p = list;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span> &amp;&amp; p-&gt;data != e) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">(LinkList list)</span> </span>&#123;</span><br><span class="line">    LNode *p = list-&gt;next;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定位序处插入元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">listInsert</span><span class="params">(LinkList &amp;list, <span class="type">int</span> index,E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *p = <span class="built_in">getIndexNode</span>(list, index - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">insertNextNode</span>(p, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *由于此链表为单链表，无法得知此节点的前驱节点，</span></span><br><span class="line"><span class="comment"> *所以对于指定节点的删除是将此节点的数据与后一个节点的数据进行交换然后删除后一个节点，</span></span><br><span class="line"><span class="comment"> *因此无法删除最后表尾节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deleteNode</span><span class="params">(LNode *p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *q = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (q == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p-&gt;data = q-&gt;data;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除指定位序元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">listDelete</span><span class="params">(LinkList &amp;list, <span class="type">int</span> index,E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *p = <span class="built_in">getIndexNode</span>(list, index - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    LNode *q = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (q == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = q-&gt;data;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用尾插法插入一系列数据</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">listInsertTail</span><span class="params">(LinkList &amp;list,E es[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    LNode *p = list;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">insertNextNode</span>(p, es[i])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用头插法插入一系列数据</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">listInsertHead</span><span class="params">(LinkList &amp;list,E es[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">insertNextNode</span>(list, es[i])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(LinkList &amp;list)</span> </span>&#123;</span><br><span class="line">    LNode *p = list-&gt;next;</span><br><span class="line">    list-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        LNode *temp = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="表的总结"><a href="#表的总结" class="headerlink" title="表的总结"></a>表的总结</h2><p>不难看出，两种表各有优劣，链表的增删速度快但查找的速度慢，而顺序表的增删速度慢，查找速度快，需要根据具体场景进行选择。</p><h2 id="栈（Stack）"><a href="#栈（Stack）" class="headerlink" title="栈（Stack）"></a>栈（Stack）</h2><p>栈的本质也是一种表，只不过是一种操作受限的表，它限制元素的插入和删除都只能从表的一端进行，由此带来了后进先出（LIFO）的特性，所以对于栈的实现可以使用链表或者顺序表。</p><h3 id="栈的顺序表实现"><a href="#栈的顺序表实现" class="headerlink" title="栈的顺序表实现"></a>栈的顺序表实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> E int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_CAPACITY 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">stack</span> &#123;</span><br><span class="line">    E *data;</span><br><span class="line">    <span class="type">int</span> capacity;</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">&#125; SqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化栈</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">initStack</span><span class="params">(SqStack &amp;stack, <span class="type">int</span> initCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initCapacity &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    stack.top = <span class="number">-1</span>;</span><br><span class="line">    stack.capacity = initCapacity;</span><br><span class="line">    E *p = (E *) <span class="built_in">malloc</span>(initCapacity * <span class="built_in">sizeof</span>(E));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    stack.data = p;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">initStack</span><span class="params">(SqStack &amp;stack)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">initStack</span>(stack,DEFAULT_CAPACITY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将栈扩容至新的大小</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">increaseStack</span><span class="params">(SqStack &amp;stack, <span class="type">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity &lt; stack.capacity) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    E *oldData = stack.data;</span><br><span class="line">    E *p = (E *) <span class="built_in">malloc</span>(newCapacity * <span class="built_in">sizeof</span>(E));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    stack.data = p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= stack.top; ++i) &#123;</span><br><span class="line">        stack.data[i] = oldData[i];</span><br><span class="line">    &#125;</span><br><span class="line">    stack.capacity = newCapacity;</span><br><span class="line">    <span class="built_in">free</span>(oldData);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">(SqStack &amp;stack)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stack.top == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈是否已满</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">(SqStack &amp;stack)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stack.top == stack.capacity - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素入栈</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(SqStack &amp;stack,E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">full</span>(stack)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    stack.data[++stack.top] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素出栈</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(SqStack &amp;stack, E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">empty</span>(stack)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = stack.data[stack.top--];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回栈顶元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">top</span><span class="params">(SqStack &amp;stack, E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">empty</span>(stack))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = stack.data[stack.top];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(SqStack &amp;stack)</span> </span>&#123;</span><br><span class="line">    stack.top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈的链表实现"><a href="#栈的链表实现" class="headerlink" title="栈的链表实现"></a>栈的链表实现</h3><p>对于栈的链表实现使用的是不带头节点的方式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> E int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    E data;</span><br><span class="line">    node *next;</span><br><span class="line">&#125; LNode, *linkStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">initStack</span><span class="params">(linkStack &amp;stack)</span> </span>&#123;</span><br><span class="line">    stack = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">(linkStack &amp;stack)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stack == <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(linkStack &amp;stack,E e)</span> </span>&#123;</span><br><span class="line">    LNode *p = (LNode *) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    p-&gt;next = stack;</span><br><span class="line">    stack = p;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出栈</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(linkStack &amp;stack,E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">empty</span>(stack)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *p = stack;</span><br><span class="line">    stack = p-&gt;next;</span><br><span class="line">    e = p-&gt;data;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取栈顶元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">top</span><span class="params">(linkStack &amp;stack,E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">empty</span>(stack)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = stack-&gt;data;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(linkStack &amp;stack)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">empty</span>(stack)) &#123;</span><br><span class="line">        E temp;</span><br><span class="line">        <span class="built_in">pop</span>(stack,temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈的总结"><a href="#栈的总结" class="headerlink" title="栈的总结"></a>栈的总结</h3><p>栈是一种十分重要的数据结构，它在计算机系统中的使用随处可见。<br>在使用栈时要根据具体场景选择具体的实现方式。</p><h2 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a>队列（Queue）</h2><p>队列的本质也是一种表，只不过是一种操作受限的表，它限制元素的插入只能从表的一端进行而删除要从另一端进行，由此带来了先进先出（FIFO）的特性，所以对于队列的实现可以使用链表或者顺序表。</p><h3 id="队列的顺序表实现"><a href="#队列的顺序表实现" class="headerlink" title="队列的顺序表实现"></a>队列的顺序表实现</h3><p>以下是循环队列的实现，为了区分队头和队尾需要在队尾处空出一个储存空间，若想节省这一处空间，可以使用 size 记录大小或者操作标记来区区分。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> E int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_CAPACITY 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">SqQueue</span> &#123;</span><br><span class="line">    E *data;</span><br><span class="line">    <span class="type">int</span> front, rear;</span><br><span class="line">    <span class="type">int</span> capacity;</span><br><span class="line">&#125; SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">initQueue</span><span class="params">(SqQueue &amp;queue, <span class="type">int</span> initCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initCapacity &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    queue.front = <span class="number">0</span>;</span><br><span class="line">    queue.rear = <span class="number">0</span>;</span><br><span class="line">    E *p = (E *) <span class="built_in">malloc</span>(initCapacity * <span class="built_in">sizeof</span>(E));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    queue.data = p;</span><br><span class="line">    queue.capacity = initCapacity;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">initQueue</span><span class="params">(SqQueue &amp;queue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">initQueue</span>(queue,DEFAULT_CAPACITY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否已满</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">(SqQueue &amp;queue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (queue.rear + <span class="number">1</span>) % queue.capacity == queue.front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">(SqQueue &amp;queue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> queue.front == queue.rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">enQueue</span><span class="params">(SqQueue &amp;queue,E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">full</span>(queue)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    queue.data[queue.rear] = e;</span><br><span class="line">    queue.rear = (queue.rear + <span class="number">1</span>) % queue.capacity;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deQueue</span><span class="params">(SqQueue &amp;queue,E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">empty</span>(queue)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = queue.data[queue.front];</span><br><span class="line">    queue.front = (queue.front + <span class="number">1</span>) % queue.capacity;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取队头元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">getHead</span><span class="params">(SqQueue &amp;queue,E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">empty</span>(queue)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = queue.data[queue.front];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取队伍长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">(SqQueue &amp;queue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (queue.rear + queue.capacity - queue.front) % queue.capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(SqQueue &amp;queue)</span> </span>&#123;</span><br><span class="line">    queue.front = <span class="number">0</span>;</span><br><span class="line">    queue.rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用操作标记的实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> E int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_CAPACITY 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">SqQueue</span> &#123;</span><br><span class="line">    E *data;</span><br><span class="line">    <span class="type">int</span> front, rear;</span><br><span class="line">    <span class="type">int</span> capacity;</span><br><span class="line">    <span class="type">bool</span> tag;</span><br><span class="line">&#125; SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">initQueue</span><span class="params">(SqQueue &amp;queue, <span class="type">int</span> initCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initCapacity &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    queue.front = <span class="number">0</span>;</span><br><span class="line">    queue.rear = <span class="number">0</span>;</span><br><span class="line">    E *p = (E *) <span class="built_in">malloc</span>(initCapacity * <span class="built_in">sizeof</span>(E));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    queue.data = p;</span><br><span class="line">    queue.capacity = initCapacity;</span><br><span class="line">    queue.tag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">initQueue</span><span class="params">(SqQueue &amp;queue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">initQueue</span>(queue,DEFAULT_CAPACITY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否已满</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">(SqQueue &amp;queue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> queue.front == queue.rear &amp;&amp; queue.tag == <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">(SqQueue &amp;queue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> queue.front == queue.rear &amp;&amp; queue.tag == <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">enQueue</span><span class="params">(SqQueue &amp;queue,E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">full</span>(queue)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    queue.data[queue.rear] = e;</span><br><span class="line">    queue.rear = (queue.rear + <span class="number">1</span>) % queue.capacity;</span><br><span class="line">    queue.tag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deQueue</span><span class="params">(SqQueue &amp;queue,E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">empty</span>(queue)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = queue.data[queue.front];</span><br><span class="line">    queue.front = (queue.front + <span class="number">1</span>) % queue.capacity;</span><br><span class="line">    queue.tag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列的链表实现"><a href="#队列的链表实现" class="headerlink" title="队列的链表实现"></a>队列的链表实现</h3><p>对于队列的链表实现使用的是带头节点的方式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    E data;</span><br><span class="line">    Node *next;</span><br><span class="line">&#125; LNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LinkQueue</span> &#123;</span><br><span class="line">    LNode *front;</span><br><span class="line">    LNode *rear;</span><br><span class="line">&#125; LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">initQueue</span><span class="params">(LinkQueue &amp;queue)</span> </span>&#123;</span><br><span class="line">    LNode *p = (LNode *) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    queue.front = p;</span><br><span class="line">    queue.rear = p;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">(LinkQueue &amp;queue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> queue.front == queue.rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">enQueue</span><span class="params">(LinkQueue &amp;queue,E e)</span> </span>&#123;</span><br><span class="line">    LNode *p = (LNode *) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    queue.rear-&gt;next = p;</span><br><span class="line">    queue.rear = p;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deQueue</span><span class="params">(LinkQueue &amp;queue,E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">empty</span>(queue)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *p = queue.front-&gt;next;</span><br><span class="line">    e = p-&gt;data;</span><br><span class="line">    queue.front = p-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">getHead</span><span class="params">(LinkQueue &amp;queue,E &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">empty</span>(queue)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = queue.front-&gt;next-&gt;data;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(LinkQueue &amp;queue)</span> </span>&#123;</span><br><span class="line">    LNode *p = queue.front-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        LNode *temp = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    queue.front-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    queue.rear = queue.front;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h3><p>双端队列的入队和出队操作可以从两端进行，所以说栈和队列能实现的功能双端队列也能实现。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 栈 </tag>
            
            <tag> 表 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/blog/post/4u11a4r5.html"/>
      <url>/blog/post/4u11a4r5.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>数据结构与算法是计算机学习的一个重要方面，对数据结构与算法进行研究可以提升自己的问题解决能力，优化程序性能，并且更加深入的理解计算机系统。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>对一个数据结构进行研究主要有以下三个方面：</p><ul><li>逻辑结构</li><li>数据运算</li><li>物理结构（存储结构）</li></ul><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>对一个算法进行研究有以下几个方面：</p><ul><li>时间复杂度</li><li>空间复杂度</li></ul><p>对于复杂度的表示一般使用大 O 表示法，n 为数据规模，比如：</p><p>$T(n) &#x3D; 520 &#x3D; O (1) $<br>$T(n) &#x3D; n + 520 &#x3D; O(n)$<br>$T(n) &#x3D; n^2 + 4n + 5 &#x3D; O(n^2)$<br>$T(n) &#x3D; nlog_2n + n + 99999 &#x3D; O(nlogn)$<br>$T(n) &#x3D; n^3 + n^2 &#x3D; O(n^3)$<br>$T(n) &#x3D; O(n^3 + n^2) &#x3D; O(n^3)$</p><p>所以，使用大 O 表示法可以让我们忽略那些低阶的因子，把精力放在那些高阶的因子上，毕竟当 n 的规模足够大时，影响运行效率的往往是那些高阶的因子。</p><p>对于复杂度的比较遵循以下原则：</p><p>$O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)$</p><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><div class="note info no-icon flat"><h3 id="数据结构与算法文章导航-🌏"><a href="#数据结构与算法文章导航-🌏" class="headerlink" title="数据结构与算法文章导航 🌏"></a>数据结构与算法文章导航 🌏</h3><ol><li><a href="/blog/post/4u11a4r5.html" title="数据结构与算法">数据结构与算法</a></li><li><a href="/blog/post/t0326b24.html" title="表、栈和队列">表、栈和队列</a></li><li><a href="/blog/post/zrql7n43.html" title="串与KMP">串与KMP</a></li><li><a href="/blog/post/bdiou7vx.html" title="表达式求值">表达式求值</a></li></ol></div>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间类</title>
      <link href="/blog/post/tgpsr7if.html"/>
      <url>/blog/post/tgpsr7if.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在 Java 中，日期和时间的处理经历了重要的变化，特别是在 Java 8 引入了全新的日期时间 API。使用这些工具可以很方便的进行时间日期相关的运算和处理。</p><h2 id="Java8-以前的时间类"><a href="#Java8-以前的时间类" class="headerlink" title="Java8 以前的时间类"></a>Java8 以前的时间类</h2><p>Java 8 之前，主要使用的日期时间类包括 Date 和 Calendar 以及时间格式化类 SimpleDateFormat。但由于设计缺陷和线程不安全，它们在 Java 8 之后逐渐被新的日期时间 API 所替代。</p><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p><code>Date</code>类表示特定的瞬时点（时间戳），可以精确到毫秒。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;Current Date: &quot;</span> + date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h3><p><code>Calendar</code>是一个抽象类，用于操作日期和时间。它支持多种日历系统。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalendarExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> calendar.get(Calendar.YEAR);</span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> calendar.get(Calendar.MONTH) + <span class="number">1</span>; <span class="comment">// 月份从0开始</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(<span class="string">&quot;Current Date: &quot;</span> + year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + day);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h3><p><code>SimpleDateFormat</code> 允许定义日期的格式，以便将 Date 对象转换为字符串或将字符串解析为 Date 对象。</p><p>格式化日期：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleDateFormatExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">formatter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">formattedDate</span> <span class="operator">=</span> formatter.format(date);</span><br><span class="line">        System.out.println(<span class="string">&quot;Formatted Date: &quot;</span> + formattedDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析字符串为日期：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParseDateExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dateString</span> <span class="operator">=</span> <span class="string">&quot;2023-10-17 14:30:00&quot;</span>;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">formatter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> formatter.parse(dateString);</span><br><span class="line">            System.out.println(<span class="string">&quot;Parsed Date: &quot;</span> + date);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三者的结合使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalendarAndSimpleDateFormatExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        calendar.set(<span class="number">2023</span>, Calendar.OCTOBER, <span class="number">17</span>, <span class="number">14</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">formatter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">formattedDate</span> <span class="operator">=</span> formatter.format(date);</span><br><span class="line">        System.out.println(<span class="string">&quot;Formatted Calendar Date: &quot;</span> + formattedDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java8-新增的时间类"><a href="#Java8-新增的时间类" class="headerlink" title="Java8 新增的时间类"></a>Java8 新增的时间类</h2><p>Java 8 引入的日期时间 API 提供了更清晰、易用和功能丰富的方式来处理日期和时间。相较于 Java 8 之前的类，新的 API 更符合现代编程的需求，尤其是在多线程环境下的安全性和可维护性。使用新 API 时，建议尽量避免使用旧的 Date 和 Calendar 类。</p><h3 id="1-LocalDate"><a href="#1-LocalDate" class="headerlink" title="1. LocalDate"></a>1. LocalDate</h3><p>表示没有时区的日期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalDateExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">today</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">        System.out.println(<span class="string">&quot;Today: &quot;</span> + today);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-LocalTime"><a href="#2-LocalTime" class="headerlink" title="2. LocalTime"></a>2. LocalTime</h3><p>表示没有时区的时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalTimeExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">        System.out.println(<span class="string">&quot;Current Time: &quot;</span> + now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-LocalDateTime"><a href="#3-LocalDateTime" class="headerlink" title="3. LocalDateTime"></a>3. LocalDateTime</h3><p>结合日期和时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalDateTimeExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        System.out.println(<span class="string">&quot;Current DateTime: &quot;</span> + now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-DateTimeFormatter"><a href="#4-DateTimeFormatter" class="headerlink" title="4. DateTimeFormatter"></a>4. DateTimeFormatter</h3><p>格式化日期时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTimeFormatterExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">formattedDateTime</span> <span class="operator">=</span> now.format(formatter);</span><br><span class="line">        System.out.println(<span class="string">&quot;Formatted DateTime: &quot;</span> + formattedDateTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-ZoneId"><a href="#5-ZoneId" class="headerlink" title="5. ZoneId"></a>5. ZoneId</h3><p>表示时区。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZoneIdExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ZoneId</span> <span class="variable">zoneId</span> <span class="operator">=</span> ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Zone ID: &quot;</span> + zoneId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-Instant"><a href="#6-Instant" class="headerlink" title="6. Instant"></a>6. Instant</h3><p>表示一个瞬时点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstantExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">        System.out.println(<span class="string">&quot;Current Instant: &quot;</span> + instant);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-ZonedDateTime"><a href="#7-ZonedDateTime" class="headerlink" title="7. ZonedDateTime"></a>7. ZonedDateTime</h3><p>带时区的日期时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.ZonedDateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZonedDateTimeExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ZonedDateTime</span> <span class="variable">zonedDateTime</span> <span class="operator">=</span> ZonedDateTime.now();</span><br><span class="line">        System.out.println(<span class="string">&quot;Current ZonedDateTime: &quot;</span> + zonedDateTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-Duration"><a href="#8-Duration" class="headerlink" title="8. Duration"></a>8. Duration</h3><p>表示时间间隔。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DurationExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Instant</span> <span class="variable">start</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">        <span class="comment">// Simulate some processing time</span></span><br><span class="line">        <span class="keyword">try</span> &#123; Thread.sleep(<span class="number">1000</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; &#125;</span><br><span class="line">        <span class="type">Instant</span> <span class="variable">end</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">        <span class="type">Duration</span> <span class="variable">duration</span> <span class="operator">=</span> Duration.between(start, end);</span><br><span class="line">        System.out.println(<span class="string">&quot;Duration in seconds: &quot;</span> + duration.getSeconds());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-Period"><a href="#9-Period" class="headerlink" title="9. Period"></a>9. Period</h3><p>表示日期之间的时间量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.Period;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PeriodExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">startDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">endDate</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">        <span class="type">Period</span> <span class="variable">period</span> <span class="operator">=</span> Period.between(startDate, endDate);</span><br><span class="line">        System.out.println(<span class="string">&quot;Years: &quot;</span> + period.getYears() + <span class="string">&quot;, Months: &quot;</span> + period.getMonths() + <span class="string">&quot;, Days: &quot;</span> + period.getDays());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-ChronoUnit"><a href="#10-ChronoUnit" class="headerlink" title="10. ChronoUnit"></a>10. ChronoUnit</h3><p>定义时间单位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.ChronoUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChronoUnitExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">start</span> <span class="operator">=</span> LocalDate.of(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">end</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">        <span class="type">long</span> <span class="variable">daysBetween</span> <span class="operator">=</span> ChronoUnit.DAYS.between(start, end);</span><br><span class="line">        System.out.println(<span class="string">&quot;Days between: &quot;</span> + daysBetween);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端开发基础（二）- Java基础</title>
      <link href="/blog/post/u9rubdog.html"/>
      <url>/blog/post/u9rubdog.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><h3 id="后端开发导航-🌏"><a href="#后端开发导航-🌏" class="headerlink" title="后端开发导航 🌏"></a>后端开发导航 🌏</h3><ol><li><a href="/blog/post/z3823524.html" title="后端开发基础（一）- 简介">后端开发基础（一）- 简介</a></li><li><a href="/blog/post/u9rubdog.html" title="后端开发基础（二）- Java基础">后端开发基础（二）- Java基础</a></li><li><a href="/blog/post/34f041e5.html" title="后端开发基础（三）- maven">后端开发基础（三）- maven</a></li><li><a href="/blog/post/h12hgndk.html" title="后端开发基础（四）- SQL">后端开发基础（四）- SQL</a></li></ol></div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java 是一种高级、面向对象的编程语言，以其可移植性、健壮性和可扩展性而闻名。 Java 由 Sun Microsystems（现为 Oracle）开发，遵循”一次编写，随处运行”的原则，允许代码在任何具有 Java 虚拟机 (JVM) 的设备上运行。它广泛用于构建大型企业应用程序、Android 移动应用程序和 Web 服务。 Java 具有自动内存管理（垃圾收集）、庞大的标准库和强大的安全功能，使其成为后端系统、分布式应用程序和基于云的解决方案的流行选择。学习 Java 语言也是为之后深入学习企业常用的后端开发框架 SSM 打好基础。</p><h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h3><h4 id="JDK安装与配置"><a href="#JDK安装与配置" class="headerlink" title="JDK安装与配置"></a>JDK安装与配置</h4><ul><li>了解JDK、JRE和JVM的区别与关系</li><li>选择适合的JDK版本（如LTS版本：JDK 8、JDK 11、JDK 17）</li><li>下载与安装JDK</li><li>配置JAVA_HOME、PATH等环境变量</li><li>验证安装成功（使用java -version命令）</li></ul><h4 id="开发工具选择"><a href="#开发工具选择" class="headerlink" title="开发工具选择"></a>开发工具选择</h4><ul><li>Eclipse IDE：安装、配置插件和工作空间设置</li><li>IntelliJ IDEA：社区版vs专业版、安装和基本设置</li><li>VS Code：安装Java扩展包和配置</li><li>熟悉IDE的基本功能：代码提示、断点调试、快捷键等</li><li>版本控制工具集成（Git）</li></ul><h4 id="编写第一个程序"><a href="#编写第一个程序" class="headerlink" title="编写第一个程序"></a>编写第一个程序</h4><ul><li>了解Java程序的基本结构（类、方法、包）</li><li>编写并运行Hello World程序</li><li>理解main方法的作用和参数</li><li>熟悉编译和运行的过程（javac和java命令）</li><li>掌握基本的程序调试方法</li></ul><h3 id="2-Java语法基础"><a href="#2-Java语法基础" class="headerlink" title="2. Java语法基础"></a>2. Java语法基础</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ul><li>标识符：命名规则和命名约定</li><li>关键字：Java预留的关键字及其用途</li><li>注释：单行注释、多行注释、文档注释（Javadoc）</li><li>基本数据类型：整型（byte、short、int、long）、浮点型（float、double）、字符型（char）、布尔型（boolean）</li><li>类型转换：自动类型转换和强制类型转换</li><li>字面量：整数、浮点数、字符、字符串、布尔字面量</li></ul><h4 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h4><ul><li>变量声明和初始化语法</li><li>局部变量、成员变量、静态变量的区别</li><li>变量作用域和生命周期</li><li>常量（final）的定义和使用</li><li>命名规范与最佳实践</li></ul><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul><li>算术运算符：+、-、*、&#x2F;、%、++、–</li><li>关系运算符：&#x3D;&#x3D;、!&#x3D;、&gt;、&lt;、&gt;&#x3D;、&lt;&#x3D;</li><li>逻辑运算符：&amp;&amp;、||、!</li><li>位运算符：&amp;、|、^、~、&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</li><li>赋值运算符：&#x3D;、+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;等</li><li>条件运算符（三元运算符）：? :</li><li>运算符优先级和结合性</li></ul><h4 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h4><ul><li>条件语句<ul><li>if语句：简单if、if-else、if-else if-else</li><li>switch语句：基本用法、支持的数据类型、fall-through特性</li></ul></li><li>循环语句<ul><li>for循环：标准for循环、增强for循环（for-each）</li><li>while循环：前测试循环</li><li>do-while循环：后测试循环</li></ul></li><li>跳转语句<ul><li>break：跳出循环或switch</li><li>continue：跳过当前循环</li><li>return：从方法返回</li><li>带标签的break和continue</li></ul></li><li>循环嵌套与控制技巧</li></ul><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ul><li>一维数组：声明、创建、初始化</li><li>数组索引和元素访问</li><li>数组长度和遍历方法</li><li>多维数组：二维数组及更高维度</li><li>不规则数组（锯齿形数组）</li><li>Arrays工具类基本使用：排序、查找、填充、比较等</li><li>数组常见算法：查找、排序、合并、复制等</li></ul><h3 id="3-面向对象编程"><a href="#3-面向对象编程" class="headerlink" title="3. 面向对象编程"></a>3. 面向对象编程</h3><h4 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h4><ul><li>类的定义：结构和语法</li><li>对象的创建与使用：new关键字</li><li>构造方法：默认构造器、带参构造器</li><li>构造方法重载和链式调用（this()）</li><li>对象引用和内存模型</li><li>垃圾回收机制和finalize方法</li><li>对象比较：&#x3D;&#x3D;和equals方法</li></ul><h4 id="三大特性"><a href="#三大特性" class="headerlink" title="三大特性"></a>三大特性</h4><ul><li>封装<ul><li>访问控制与信息隐藏</li><li>getter和setter方法</li><li>封装的意义和最佳实践</li></ul></li><li>继承<ul><li>extends关键字和继承语法</li><li>父类和子类关系</li><li>方法继承和覆盖</li><li>构造方法与继承：super()</li><li>继承的限制（final类等）</li><li>多层继承与继承层次</li></ul></li><li>多态<ul><li>向上转型与向下转型</li><li>运行时多态vs编译时多态</li><li>动态绑定机制</li><li>instanceof操作符和类型检查</li><li>多态的实际应用场景</li></ul></li></ul><h4 id="成员变量与方法"><a href="#成员变量与方法" class="headerlink" title="成员变量与方法"></a>成员变量与方法</h4><ul><li>实例变量：声明、初始化、访问</li><li>类变量（静态变量）：static关键字</li><li>实例方法：定义和调用</li><li>静态方法：定义和限制</li><li>方法参数：值传递vs引用传递</li><li>方法重载（Overloading）：规则和用例</li><li>方法重写（Overriding）：规则和注意事项</li><li>可变参数方法（varargs）</li></ul><h4 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h4><ul><li>public：完全公开</li><li>protected：包内和子类可见</li><li>default（无修饰符）：包内可见</li><li>private：仅类内可见</li><li>修饰符的适用范围：类、方法、字段</li><li>封装中的访问控制选择原则</li><li>多个修饰符组合使用</li></ul><h4 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h4><ul><li>抽象类<ul><li>abstract关键字</li><li>抽象方法与具体方法</li><li>抽象类的继承规则</li><li>何时使用抽象类</li></ul></li><li>接口<ul><li>interface定义语法</li><li>接口中的方法和常量</li><li>接口实现：implements关键字</li><li>多接口实现</li><li>接口继承：extends关键字</li><li>默认方法和静态方法（Java 8+）</li><li>函数式接口（@FunctionalInterface）</li></ul></li><li>抽象类vs接口：选择指南</li></ul><h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><ul><li>静态内部类：定义和使用</li><li>非静态内部类（成员内部类）：定义、使用和外部类引用</li><li>局部内部类：方法内定义的类</li><li>匿名内部类：没有名字的内部类</li><li>内部类的应用场景和访问规则</li><li>嵌套内部类和继承关系</li><li>Lambda表达式与匿名内部类的关系</li></ul><h3 id="4-Java核心类"><a href="#4-Java核心类" class="headerlink" title="4. Java核心类"></a>4. Java核心类</h3><h4 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h4><ul><li>Object作为所有类的基类</li><li>toString()方法：默认实现和重写</li><li>equals()方法：相等性判断和重写规则</li><li>hashCode()方法：散列码生成和equals&#x2F;hashCode契约</li><li>getClass()方法：获取运行时类信息</li><li>clone()方法：对象克隆和Cloneable接口</li><li>finalize()方法：对象销毁前的清理（已弃用）</li><li>wait()、notify()、notifyAll()：线程协作</li></ul><h4 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h4><ul><li>字符串的不可变性及其意义</li><li>字符串创建：字面量vs new</li><li>字符串池（String Pool）机制</li><li>常用方法：<ul><li>字符串比较：equals(), equalsIgnoreCase(), compareTo()</li><li>查找和检索：indexOf(), lastIndexOf(), contains(), startsWith(), endsWith()</li><li>提取子串：substring(), split()</li><li>转换：toLowerCase(), toUpperCase(), trim(), replace(), replaceAll()</li><li>格式化：format()</li></ul></li><li>StringBuffer和StringBuilder：可变字符串</li><li>字符串连接性能优化</li><li>字符串常见操作和算法</li></ul><h4 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h4><ul><li>基本数据类型的包装类：Integer, Double, Character, Boolean等</li><li>自动装箱和自动拆箱</li><li>数值类型转换：parseXxx()和valueOf()方法</li><li>包装类的常用方法和常量</li><li>包装类与字符串的相互转换</li><li>包装类的缓存机制（如Integer缓存）</li><li>包装类的比较注意事项</li></ul><h4 id="日期与时间"><a href="#日期与时间" class="headerlink" title="日期与时间"></a>日期与时间</h4><ul><li>传统日期时间API<ul><li>Date类：创建和格式化</li><li>Calendar类：日期计算和字段操作</li><li>SimpleDateFormat：日期格式化和解析</li></ul></li><li>Java 8新日期时间API<ul><li>LocalDate：日期表示</li><li>LocalTime：时间表示</li><li>LocalDateTime：日期和时间</li><li>ZonedDateTime：带时区的日期时间</li><li>Period和Duration：时间段表示</li><li>DateTimeFormatter：格式化和解析</li><li>TemporalAdjusters：日期调整器</li></ul></li><li>日期时间计算和操作</li><li>时区处理</li><li>日期比较和排序</li></ul><h4 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h4><ul><li>Math类常用方法：<ul><li>基本数学函数：abs(), sqrt(), pow(), log()</li><li>取整函数：ceil(), floor(), round()</li><li>最大值和最小值：max(), min()</li><li>随机数：random()</li></ul></li><li>BigInteger：大整数运算</li><li>BigDecimal：精确十进制运算</li><li>常用数学算法和计算</li><li>随机数生成：Random类</li><li>数学常量：PI, E等</li></ul><h3 id="5-异常处理"><a href="#5-异常处理" class="headerlink" title="5. 异常处理"></a>5. 异常处理</h3><h4 id="异常体系"><a href="#异常体系" class="headerlink" title="异常体系"></a>异常体系</h4><ul><li>Throwable类层次结构</li><li>Error：不可恢复的系统错误<ul><li>常见Error类型：OutOfMemoryError, StackOverflowError等</li></ul></li><li>Exception：可处理的程序异常<ul><li>受检异常（Checked Exception）：必须处理的异常</li><li>非受检异常（Unchecked Exception&#x2F;RuntimeException）：可以不显式处理</li></ul></li><li>常见的异常类型及其原因<ul><li>NullPointerException</li><li>ArrayIndexOutOfBoundsException</li><li>ClassCastException</li><li>IllegalArgumentException</li><li>IOException等</li></ul></li></ul><h4 id="异常捕获与处理"><a href="#异常捕获与处理" class="headerlink" title="异常捕获与处理"></a>异常捕获与处理</h4><ul><li>try-catch基本语法</li><li>多catch块处理不同异常</li><li>catch顺序和异常继承关系</li><li>finally块：无论异常是否发生都执行的代码</li><li>try-with-resources语句（Java 7+）：自动资源管理</li><li>异常链：getCause()和initCause()</li><li>多重捕获（Java 7+）：catch (ExceptionA | ExceptionB e)</li><li>异常处理最佳实践</li></ul><h4 id="异常抛出"><a href="#异常抛出" class="headerlink" title="异常抛出"></a>异常抛出</h4><ul><li>throws声明：方法可能抛出的异常</li><li>throw语句：手动抛出异常</li><li>异常传播机制：调用栈中的异常传递</li><li>何时抛出vs何时捕获异常</li><li>异常文档和注释（@throws JavaDoc标记）</li><li>重写方法中的异常声明规则</li></ul><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><ul><li>创建自定义异常类：继承Exception或RuntimeException</li><li>异常构造方法和消息</li><li>添加额外信息到自定义异常</li><li>异常设计原则和最佳实践</li><li>业务异常vs技术异常</li><li>异常转换：将底层异常包装为更有意义的高层异常</li></ul><h3 id="6-集合框架"><a href="#6-集合框架" class="headerlink" title="6. 集合框架"></a>6. 集合框架</h3><h4 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h4><ul><li>Collection接口基本方法：add(), remove(), contains(), size(), isEmpty()等</li><li>List接口及实现<ul><li>ArrayList：基于动态数组的实现</li><li>LinkedList：基于双向链表的实现</li><li>Vector：线程安全的动态数组（较少使用）</li><li>各实现类的性能特征和适用场景</li><li>常用操作：添加、删除、查找、遍历、排序</li></ul></li><li>Set接口及实现<ul><li>HashSet：基于HashMap的实现</li><li>LinkedHashSet：保持插入顺序的HashSet</li><li>TreeSet：基于TreeMap的有序集合</li><li>无重复元素和相等性判断</li><li>常用操作和性能考虑</li></ul></li><li>Queue和Deque接口<ul><li>LinkedList作为队列和双端队列</li><li>PriorityQueue：优先级队列</li><li>ArrayDeque：基于数组的双端队列</li><li>队列操作：offer(), poll(), peek()等</li></ul></li></ul><h4 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h4><ul><li>Map接口基本方法：put(), get(), remove(), containsKey(), keySet(), values(), entrySet()等</li><li>HashMap：基于哈希表的实现<ul><li>内部结构：数组+链表+红黑树（Java 8+）</li><li>负载因子和初始容量</li><li>哈希冲突处理</li></ul></li><li>LinkedHashMap：保持插入顺序的HashMap</li><li>TreeMap：基于红黑树的有序映射</li><li>Hashtable：线程安全的哈希表（较少使用）</li><li>EnumMap：专为枚举键优化的Map</li><li>IdentityHashMap：使用&#x3D;&#x3D;而非equals()的特殊Map</li><li>WeakHashMap：带有弱引用键的Map</li><li>各实现类的选择标准和性能特征</li></ul><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><ul><li>Iterator接口：hasNext(), next(), remove()</li><li>ListIterator：双向迭代</li><li>fail-fast机制：并发修改异常（ConcurrentModificationException）</li><li>迭代过程中安全修改集合</li><li>foreach循环与迭代器的关系</li><li>Iterable接口与可迭代集合</li><li>Spliterator：可分割迭代器（Java 8+）</li></ul><h4 id="泛型的使用"><a href="#泛型的使用" class="headerlink" title="泛型的使用"></a>泛型的使用</h4><ul><li>带泛型的集合声明和使用</li><li>类型安全和避免类型转换</li><li>泛型通配符在集合中的应用</li><li>泛型嵌套：List&lt;Map&lt;String, Integer&gt;&gt;等</li><li>原始类型（raw type）和向后兼容性</li><li>泛型与数组的区别</li></ul><h4 id="集合工具类"><a href="#集合工具类" class="headerlink" title="集合工具类"></a>集合工具类</h4><ul><li>Collections工具类<ul><li>排序：sort(), reverseOrder()</li><li>搜索：binarySearch()</li><li>极值：max(), min()</li><li>填充和替换：fill(), replaceAll()</li><li>同步包装：synchronizedXxx()</li><li>不可修改包装：unmodifiableXxx()</li><li>单例集合：singletonXxx()</li><li>其他实用方法：disjoint(), frequency()等</li></ul></li><li>Arrays工具类<ul><li>转换：asList()</li><li>排序和搜索：sort(), binarySearch()</li><li>填充和复制：fill(), copyOf(), copyOfRange()</li><li>数组与集合的互操作</li></ul></li></ul><h3 id="7-泛型编程"><a href="#7-泛型编程" class="headerlink" title="7. 泛型编程"></a>7. 泛型编程</h3><h4 id="泛型类与接口"><a href="#泛型类与接口" class="headerlink" title="泛型类与接口"></a>泛型类与接口</h4><ul><li>泛型类的定义：class Name<T></li><li>泛型接口的定义：interface Name<T></li><li>类型参数命名约定：E（元素）, T（类型）, K（键）, V（值）等</li><li>多类型参数：&lt;K, V&gt;</li><li>泛型类的实例化和使用</li><li>类型参数的限定：<T extends Number></li><li>泛型类的继承和子类型</li><li>泛型和构造器</li></ul><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><ul><li>泛型方法的定义：<T> T methodName(T param)</li><li>类型推断机制</li><li>静态泛型方法</li><li>泛型方法vs泛型类</li><li>类型参数的作用域</li><li>可变参数与泛型的结合</li><li>通用工具方法的设计</li></ul><h4 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h4><ul><li>泛型的实现原理</li><li>类型擦除的概念和过程</li><li>泛型在运行时的实际类型</li><li>泛型的限制：类型参数不能是基本类型，不能创建泛型数组，不能用instanceof等</li><li>桥接方法（bridge method）</li><li>泛型的向前兼容性</li><li>类型擦除带来的问题及解决方案</li></ul><h4 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h4><ul><li>无界通配符：&lt;?&gt;</li><li>上界通配符：&lt;? extends T&gt;<ul><li>读取安全，写入受限</li><li>Producer Extends原则</li></ul></li><li>下界通配符：&lt;? super T&gt;<ul><li>写入安全，读取受限</li><li>Consumer Super原则</li></ul></li><li>PECS原则（Producer-Extends, Consumer-Super）</li><li>通配符捕获</li><li>通配符vs类型参数</li><li>复杂泛型结构的理解和应用</li></ul><h3 id="8-输入输出流"><a href="#8-输入输出流" class="headerlink" title="8. 输入输出流"></a>8. 输入输出流</h3><h4 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h4><ul><li>文件和目录表示</li><li>文件信息获取：exists(), isFile(), isDirectory(), length(), lastModified()等</li><li>文件操作：createNewFile(), delete(), renameTo()</li><li>目录操作：mkdir(), mkdirs(), list(), listFiles()</li><li>文件路径处理：绝对路径、相对路径</li><li>临时文件创建</li><li>File对象的局限性和新I&#x2F;O API（NIO.2）的改进</li></ul><h4 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h4><ul><li>InputStream抽象类及其方法：read(), available(), close()等</li><li>OutputStream抽象类及其方法：write(), flush(), close()等</li><li>文件字节流：FileInputStream, FileOutputStream</li><li>内存字节流：ByteArrayInputStream, ByteArrayOutputStream</li><li>数据处理流：DataInputStream, DataOutputStream</li><li>对象流：ObjectInputStream, ObjectOutputStream</li><li>缓冲字节流：BufferedInputStream, BufferedOutputStream</li><li>打印流：PrintStream</li><li>流的链接和包装模式</li></ul><h4 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h4><ul><li>Reader抽象类及其方法：read(), ready(), close()等</li><li>Writer抽象类及其方法：write(), append(), flush(), close()等</li><li>文件字符流：FileReader, FileWriter</li><li>内存字符流：CharArrayReader, CharArrayWriter, StringReader, StringWriter</li><li>缓冲字符流：BufferedReader, BufferedWriter</li><li>打印字符流：PrintWriter</li><li>桥接流：InputStreamReader, OutputStreamWriter</li><li>字符编码与解码</li></ul><h4 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h4><ul><li>缓冲流的工作原理</li><li>缓冲区大小设置和性能影响</li><li>缓冲区刷新操作</li><li>行读取：BufferedReader.readLine()</li><li>缓冲流的效率提升</li><li>何时使用缓冲流</li><li>缓冲流的常见用法和模式</li></ul><h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><ul><li>对象序列化的概念和目的</li><li>Serializable接口：标记接口</li><li>序列化过程和反序列化过程</li><li>serialVersionUID的作用和指定</li><li>定制序列化：writeObject()和readObject()方法</li><li>transient关键字：排除不需要序列化的字段</li><li>序列化的安全性考虑</li><li>序列化的替代方案：JSON、XML等</li><li>实战：深拷贝、对象持久化和网络传输</li></ul><h3 id="9-多线程编程"><a href="#9-多线程编程" class="headerlink" title="9. 多线程编程"></a>9. 多线程编程</h3><h4 id="线程基础"><a href="#线程基础" class="headerlink" title="线程基础"></a>线程基础</h4><ul><li>进程vs线程</li><li>线程的创建方式：<ul><li>继承Thread类</li><li>实现Runnable接口</li><li>实现Callable接口（带返回值）</li><li>使用线程池</li></ul></li><li>线程的生命周期：NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED</li><li>线程控制：start(), run(), sleep(), join(), yield(), interrupt()</li><li>线程优先级和调度</li><li>守护线程vs用户线程</li><li>线程组（ThreadGroup）</li></ul><h4 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h4><ul><li>线程安全问题：竞态条件和数据不一致</li><li>synchronized关键字<ul><li>同步方法</li><li>同步代码块</li><li>对象锁vs类锁</li><li>内置锁和监视器（Monitor）</li></ul></li><li>volatile关键字<ul><li>可见性保证</li><li>有序性保证</li><li>不保证原子性</li><li>双重检查锁定（Double-Checked Locking）</li></ul></li><li>线程安全的单例模式</li><li>不可变对象和线程安全</li><li>同步的性能开销和优化</li></ul><h4 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h4><ul><li>Lock接口和ReentrantLock<ul><li>与synchronized的区别</li><li>公平锁vs非公平锁</li><li>可中断锁</li><li>锁超时</li><li>条件变量（Condition）</li></ul></li><li>读写锁：ReadWriteLock和ReentrantReadWriteLock<ul><li>读共享写互斥</li><li>写锁降级</li></ul></li><li>StampedLock（Java 8+）：乐观读锁</li><li>死锁问题<ul><li>死锁条件</li><li>死锁预防和检测</li><li>死锁避免</li></ul></li><li>活锁和饥饿问题</li><li>锁优化：粗锁和细锁、锁分离、锁消除</li></ul><h4 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h4><ul><li>wait&#x2F;notify机制<ul><li>Object.wait()：释放锁等待通知</li><li>Object.notify()&#x2F;notifyAll()：发送通知</li><li>生产者-消费者模式</li></ul></li><li>Condition接口<ul><li>await()和signal()&#x2F;signalAll()</li><li>多条件变量</li></ul></li><li>阻塞队列<ul><li>BlockingQueue接口及实现</li><li>生产者-消费者模式的改进</li></ul></li><li>信号量（Semaphore）</li><li>栅栏（CyclicBarrier）和闭锁（CountDownLatch）</li><li>交换器（Exchanger）</li><li>阻塞vs轮询vs回调</li></ul><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><ul><li>Executor框架<ul><li>Executor接口：执行任务</li><li>ExecutorService接口：管理服务</li><li>Executors工厂方法</li></ul></li><li>常用线程池<ul><li>FixedThreadPool：固定大小</li><li>CachedThreadPool：缓存复用</li><li>SingleThreadExecutor：单线程</li><li>ScheduledThreadPool：定时执行</li></ul></li><li>ThreadPoolExecutor<ul><li>核心线程数和最大线程数</li><li>任务队列</li><li>拒绝策略</li><li>线程工厂</li><li>生命周期管理</li></ul></li><li>ForkJoinPool（Java 7+）：工作窃取算法</li><li>定时任务调度</li><li>线程池使用最佳实践</li></ul><h4 id="并发工具类"><a href="#并发工具类" class="headerlink" title="并发工具类"></a>并发工具类</h4><ul><li>CountDownLatch：等待多个线程完成</li><li>CyclicBarrier：线程相互等待到达屏障点</li><li>Semaphore：控制并发访问的数量</li><li>Phaser：更灵活的多阶段同步器</li><li>Exchanger：两线程交换数据</li><li>CompletableFuture（Java 8+）：异步编程</li><li>原子变量类：AtomicInteger, AtomicLong等</li><li>并发集合：<ul><li>ConcurrentHashMap</li><li>CopyOnWriteArrayList</li><li>ConcurrentLinkedQueue</li><li>BlockingQueue实现类</li></ul></li><li>线程安全实现的选择和性能考量</li></ul><h3 id="10-Java-8-新特性"><a href="#10-Java-8-新特性" class="headerlink" title="10. Java 8+新特性"></a>10. Java 8+新特性</h3><h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><ul><li>Lambda表达式语法：() -&gt; {}</li><li>函数式接口：仅有一个抽象方法的接口</li><li>内置函数式接口：<ul><li>Consumer<T>：消费型</li><li>Supplier<T>：供给型</li><li>Function&lt;T, R&gt;：函数型</li><li>Predicate<T>：断言型</li><li>其他函数式接口</li></ul></li><li>方法引用：类::方法<ul><li>静态方法引用：ClassName::staticMethod</li><li>实例方法引用：instance::method</li><li>类方法引用：ClassName::method</li><li>构造方法引用：ClassName::new</li></ul></li><li>变量捕获和作用域规则</li><li>Lambda表达式的类型推断</li><li>闭包和闭包陷阱</li></ul><h4 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h4><ul><li>流的概念和特点：不存储数据、函数式操作、延迟执行、可能一次性</li><li>流的创建：collection.stream(), Stream.of(), Arrays.stream()等</li><li>中间操作：<ul><li>筛选和切片：filter(), distinct(), limit(), skip()</li><li>映射：map(), flatMap()</li><li>排序：sorted()</li><li>查看：peek()</li></ul></li><li>终端操作：<ul><li>匹配和查找：allMatch(), anyMatch(), noneMatch(), findFirst(), findAny()</li><li>归约：reduce()</li><li>收集：collect(), Collectors工具类</li><li>迭代：forEach()</li><li>计数：count()</li></ul></li><li>并行流：parallelStream()</li><li>数值流：IntStream, LongStream, DoubleStream</li><li>流操作的最佳实践和性能考量</li></ul><h4 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h4><ul><li>Optional<T>类的目的和用法</li><li>创建Optional对象：Optional.of(), Optional.ofNullable(), Optional.empty()</li><li>检查值：isPresent(), isEmpty()（Java 11+）</li><li>获取值：get(), orElse(), orElseGet(), orElseThrow()</li><li>条件操作：filter(), map(), flatMap()</li><li>消费值：ifPresent(), ifPresentOrElse()（Java 9+）</li><li>组合多个Optional</li><li>作为返回类型使用Optional</li><li>Optional最佳实践</li></ul><h4 id="新日期时间API"><a href="#新日期时间API" class="headerlink" title="新日期时间API"></a>新日期时间API</h4><ul><li>不可变性和线程安全</li><li>本地日期时间：<ul><li>LocalDate：年、月、日</li><li>LocalTime：时、分、秒、纳秒</li><li>LocalDateTime：组合日期和时间</li></ul></li><li>时区相关：<ul><li>ZoneId：时区标识</li><li>ZoneOffset：UTC偏移量</li><li>ZonedDateTime：带时区的日期时间</li></ul></li><li>时间间隔：<ul><li>Duration：基于时间的间隔</li><li>Period：基于日期的间隔</li><li>ChronoUnit：时间单位</li></ul></li><li>格式化和解析：<ul><li>DateTimeFormatter：日期时间格式化</li><li>预定义格式和自定义模式</li></ul></li><li>时间调整器：<ul><li>TemporalAdjusters：日期调整器</li><li>常用调整器：firstDayOfMonth(), lastDayOfYear()等</li></ul></li><li>新旧API的转换</li></ul><h4 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h4><ul><li>接口中的默认方法（default methods）</li><li>默认方法的语法和使用</li><li>多接口继承时的冲突解决</li><li>默认方法与抽象类的比较</li><li>静态接口方法</li><li>API演化和向后兼容性</li><li>默认方法最佳实践</li></ul><h3 id="11-反射与注解"><a href="#11-反射与注解" class="headerlink" title="11. 反射与注解"></a>11. 反射与注解</h3><h4 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h4><ul><li>反射概念和用途</li><li>动态获取类信息</li><li>动态实例化对象</li><li>动态访问和修改字段</li><li>动态调用方法</li><li>反射访问私有成员</li><li>反射性能开销和优化</li><li>反射的应用场景和限制</li></ul><h4 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h4><ul><li>获取Class对象的方式：<ul><li>对象.getClass()</li><li>类名.class</li><li>Class.forName()</li></ul></li><li>类信息查询：<ul><li>名称和修饰符：getName(), getModifiers()等</li><li>父类和接口：getSuperclass(), getInterfaces()</li><li>构造器：getConstructors(), getDeclaredConstructors()</li><li>方法：getMethods(), getDeclaredMethods()</li><li>字段：getFields(), getDeclaredFields()</li></ul></li><li>成员信息：Constructor, Method, Field类</li><li>调用与访问：invoke(), get(), set()等</li><li>泛型信息：Type, ParameterizedType等</li><li>反射与数组</li></ul><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><ul><li>代理模式基础</li><li>JDK动态代理：<ul><li>InvocationHandler接口</li><li>Proxy类和newProxyInstance()方法</li><li>代理对象的创建和使用</li></ul></li><li>CGLIB动态代理：<ul><li>基于继承的代理</li><li>增强器和回调</li></ul></li><li>动态代理的应用场景：<ul><li>AOP（面向切面编程）</li><li>RPC（远程过程调用）</li><li>ORM（对象关系映射）</li></ul></li><li>代理性能比较和选择</li></ul><h4 id="注解基础"><a href="#注解基础" class="headerlink" title="注解基础"></a>注解基础</h4><ul><li>注解的概念和用途</li><li>内置注解：<ul><li>@Override：重写方法检查</li><li>@Deprecated：标记过时项</li><li>@SuppressWarnings：抑制警告</li><li>@SafeVarargs：可变参数类型安全</li><li>@FunctionalInterface：函数式接口标记</li></ul></li><li>元注解：<ul><li>@Retention：保留策略</li><li>@Target：适用目标</li><li>@Documented：文档包含</li><li>@Inherited：注解继承</li><li>@Repeatable：可重复注解（Java 8+）</li></ul></li><li>自定义注解：<ul><li>定义语法</li><li>注解元素类型</li><li>默认值</li><li>使用限制</li></ul></li><li>注解处理器：<ul><li>运行时处理：反射API</li><li>编译时处理：注解处理器API</li></ul></li><li>注解最佳实践</li></ul><h3 id="12-单元测试"><a href="#12-单元测试" class="headerlink" title="12. 单元测试"></a>12. 单元测试</h3><h4 id="JUnit使用"><a href="#JUnit使用" class="headerlink" title="JUnit使用"></a>JUnit使用</h4><ul><li>JUnit框架概述（JUnit 4&#x2F;5）</li><li>测试类和测试方法</li><li>基本注解：<ul><li>@Test：标记测试方法</li><li>@Before&#x2F;@BeforeEach：测试前准备</li><li>@After&#x2F;@AfterEach：测试后清理</li><li>@BeforeClass&#x2F;@BeforeAll：类初始化</li><li>@AfterClass&#x2F;@AfterAll：类销毁</li><li>@Ignore&#x2F;@Disabled：跳过测试</li></ul></li><li>测试生命周期</li><li>参数化测试</li><li>测试套件</li><li>超时测试</li><li>异常测试</li><li>测试执行顺序</li></ul><h4 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h4><ul><li>JUnit断言方法：<ul><li>assertEquals()：相等性断言</li><li>assertTrue()&#x2F;assertFalse()：布尔断言</li><li>assertNull()&#x2F;assertNotNull()：空值断言</li><li>assertSame()&#x2F;assertNotSame()：引用相等断言</li><li>assertThrows()：异常断言</li><li>assertAll()：组合断言（JUnit 5）</li></ul></li><li>Hamcrest匹配器：更具表达力的断言</li><li>AssertJ：流式断言API</li><li>自定义断言方法</li><li>断言消息和失败处理</li><li>软断言：收集多个失败</li><li>断言最佳实践</li></ul><h4 id="测试覆盖率"><a href="#测试覆盖率" class="headerlink" title="测试覆盖率"></a>测试覆盖率</h4><ul><li>覆盖率类型：<ul><li>行覆盖率（Line Coverage）</li><li>分支覆盖率（Branch Coverage）</li><li>路径覆盖率（Path Coverage）</li><li>方法覆盖率（Method Coverage）</li><li>类覆盖率（Class Coverage）</li></ul></li><li>覆盖率工具：<ul><li>JaCoCo</li><li>Cobertura</li><li>EclEmma</li></ul></li><li>覆盖率报告解读</li><li>覆盖率目标设定</li><li>测试质量和覆盖率的关系</li><li>提高测试覆盖率的策略</li><li>覆盖率和测试驱动开发（TDD）</li></ul><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><div class="note info no-icon flat"><h3 id="Java-基础文章导航-🌏"><a href="#Java-基础文章导航-🌏" class="headerlink" title="Java 基础文章导航 🌏"></a>Java 基础文章导航 🌏</h3><ol><li><a href="/blog/post/4g7gt549.html" title="字符编码">字符编码</a></li><li><a href="/blog/post/x4idevfe.html" title="正则表达式">正则表达式</a></li><li><a href="/blog/post/haki98t3.html" title="regex和replacement转义">regex和replacement转义</a></li><li><a href="/blog/post/j9ujeumh.html" title="集合">集合</a></li><li><a href="/blog/post/c0460286.html" title="BigInteger">BigInteger</a></li><li><a href="/blog/post/9m407u54.html" title="BigDecimal">BigDecimal</a></li><li><a href="/blog/post/6882356e.html" title="Java变量名和包名命名规范">Java变量名和包名命名规范</a></li><li><a href="/blog/post/7tcb7iuv.html" title="Stream">Stream</a></li><li><a href="/blog/post/p83a54r9.html" title="Error">Error</a></li><li><a href="/blog/post/tgpsr7if.html" title="File">File</a></li><li><a href="/blog/post/g9jeg624.html" title="Thread">Thread</a></li><li><a href="/blog/post/d82hjg08.html" title="代理">代理</a></li><li><a href="/blog/post/3859609d.html" title="反射">反射</a></li><li><a href="/blog/post/wwuiij1v.html" title="网络编程">网络编程</a></li><li><a href="/blog/post/tgpsr7if.html" title="时间类">时间类</a></li></ol></div><script src='/js/series.js'></script>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/blog/post/wwuiij1v.html"/>
      <url>/blog/post/wwuiij1v.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Java 网络编程主要是通过套接字 (Socket) 来实现的，它允许程序在网络上进行通信。Java 提供了丰富的网络编程 API，特别是 java.net 包，其中包括一些核心类，如 Socket、ServerSocket、InetAddress 等。<br>根据使用的传输协议的不同将我们将网络编程分为以下两大类：</p><ul><li>UDP (用户数据报协议)：无连接协议，适合对速度要求高但不一定需要可靠传输的应用场景。</li><li>TCP (传输控制协议)：面向连接，提供可靠的数据传输。</li></ul><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>UDP 是一种无连接协议，适合需要快速传输而不要求可靠性的应用场景。<br>在客户端使用 DatagramSocket 将 DatagramPacket 发送至指定 IP 的指定端口，在服务器端使用 DatagramSocket 监听指定端口。</p><p>UDP 服务器示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">12345</span>)) &#123;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, buffer.length);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;UDP 服务器已启动，等待数据...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                socket.receive(packet); <span class="comment">// 接收数据</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">received</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(packet.getData(), <span class="number">0</span>, packet.getLength());</span><br><span class="line">                System.out.println(<span class="string">&quot;收到数据：&quot;</span> + received);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 发送回应</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> <span class="string">&quot;服务器返回：&quot;</span> + received;</span><br><span class="line">                <span class="type">byte</span>[] responseData = response.getBytes();</span><br><span class="line">                <span class="type">DatagramPacket</span> <span class="variable">responsePacket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(responseData, responseData.length,</span><br><span class="line">                        packet.getAddress(), packet.getPort());</span><br><span class="line">                socket.send(responsePacket);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UDP 客户端示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello UDP Server!&quot;</span>;</span><br><span class="line">            <span class="type">byte</span>[] buffer = message.getBytes();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发送数据包</span></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, buffer.length, InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>), <span class="number">12345</span>);</span><br><span class="line">            socket.send(packet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 接收回应</span></span><br><span class="line">            <span class="type">byte</span>[] responseBuffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">responsePacket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(responseBuffer, responseBuffer.length);</span><br><span class="line">            socket.receive(responsePacket);</span><br><span class="line">            <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(responsePacket.getData(), <span class="number">0</span>, responsePacket.getLength());</span><br><span class="line">            System.out.println(<span class="string">&quot;从服务器收到数据：&quot;</span> + response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上示例是基于 UDP 的单播实现，使用 UDP 还可以实现组播和广播。</p><p>在服务器使用 DatagramSocket 将 DatagramPacket 发送到指定 IP 的指定端口，在客户端使用 MulticastSocket 加入组播组监听指定端口。</p><p>UDP 组播服务器示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MulticastServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello, this is a multicast message!&quot;</span>;</span><br><span class="line">            <span class="type">byte</span>[] buffer = message.getBytes();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 组播地址 (224.0.0.1 是保留的组播地址之一，可用的组播地址为 224.0.0.0 - 239.255.255.255)</span></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">group</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;224.0.0.1&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, buffer.length, group, <span class="number">12345</span>);</span><br><span class="line"></span><br><span class="line">            socket.send(packet); <span class="comment">// 发送组播消息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;组播消息已发送到组播地址：&quot;</span> + group.getHostAddress());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UDP 组播客户端示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MulticastClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建一个 MulticastSocket 用于加入组播组</span></span><br><span class="line">            <span class="type">MulticastSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MulticastSocket</span>(<span class="number">12345</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 加入组播组 (224.0.0.1)</span></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">group</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;224.0.0.1&quot;</span>);</span><br><span class="line">            socket.joinGroup(group);</span><br><span class="line">            System.out.println(<span class="string">&quot;已加入组播组：&quot;</span> + group.getHostAddress());</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, buffer.length);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 接收组播消息</span></span><br><span class="line">            socket.receive(packet);</span><br><span class="line">            <span class="type">String</span> <span class="variable">received</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(packet.getData(), <span class="number">0</span>, packet.getLength());</span><br><span class="line">            System.out.println(<span class="string">&quot;接收到的组播消息：&quot;</span> + received);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 退出组播组</span></span><br><span class="line">            socket.leaveGroup(group);</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UDP 的广播实现与单播无太大差异，发送信号端将指定 IP 更改为 255.255.255.255 即可。</p><p>UDP 广播服务器示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BroadcastServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>()) &#123;</span><br><span class="line">            socket.setBroadcast(<span class="literal">true</span>); <span class="comment">// 启用广播模式</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello, this is a broadcast message!&quot;</span>;</span><br><span class="line">            <span class="type">byte</span>[] buffer = message.getBytes();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建广播地址 255.255.255.255</span></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, buffer.length,</span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;255.255.255.255&quot;</span>), <span class="number">12345</span>);</span><br><span class="line"></span><br><span class="line">            socket.send(packet); <span class="comment">// 发送广播</span></span><br><span class="line">            System.out.println(<span class="string">&quot;广播消息已发送&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UDP 广播客户端示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BroadcastClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">12345</span>)) &#123;</span><br><span class="line">            socket.setBroadcast(<span class="literal">true</span>); <span class="comment">// 启用广播模式</span></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, buffer.length);</span><br><span class="line">            System.out.println(<span class="string">&quot;等待广播消息...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            socket.receive(packet); <span class="comment">// 接收广播消息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">received</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(packet.getData(), <span class="number">0</span>, packet.getLength());</span><br><span class="line">            System.out.println(<span class="string">&quot;接收到的广播消息：&quot;</span> + received);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>TCP 是面向连接的协议，单播通信中常用 TCP 来保证数据的可靠传输。<br>在客户端使用 Socket 连接到服务器，在服务器使用 ServerSocket 监听连接。</p><p>服务器示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">12345</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器已启动，等待客户端连接...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 接受客户端的连接</span></span><br><span class="line">                <span class="type">Socket</span> <span class="variable">clientSocket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">                System.out.println(<span class="string">&quot;客户端已连接：&quot;</span> + clientSocket.getInetAddress());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 为每个客户端连接创建一个线程处理</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClientHandler</span>(clientSocket).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClientHandler</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Socket clientSocket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClientHandler</span><span class="params">(Socket socket)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clientSocket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(clientSocket.getInputStream()));</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(clientSocket.getOutputStream(), <span class="literal">true</span>)</span><br><span class="line">        ) &#123;</span><br><span class="line">            String clientInput;</span><br><span class="line">            <span class="keyword">while</span> ((clientInput = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;收到客户端信息：&quot;</span> + clientInput);</span><br><span class="line">                out.println(<span class="string">&quot;服务器返回：&quot;</span> + clientInput); <span class="comment">// 将信息返回给客户端</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                clientSocket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">12345</span>); <span class="comment">// 连接到服务器</span></span><br><span class="line">             <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(socket.getOutputStream(), <span class="literal">true</span>);</span><br><span class="line">             <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()))</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="comment">// 向服务器发送数据</span></span><br><span class="line">            out.println(<span class="string">&quot;Hello Server!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取服务器的返回数据</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> in.readLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;从服务器收到信息：&quot;</span> + response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理并发连接"><a href="#处理并发连接" class="headerlink" title="处理并发连接"></a>处理并发连接</h2><p>上面的例子使用多线程来处理并发连接的问题，但是这个例子的实现并不好，频繁的创建和销毁线程往往是一笔巨大的开销，所以在多客户端的场景中，使用线程池来处理并发连接是很常见的做法。</p><p>使用线程池对服务器进行改造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PORT</span> <span class="operator">=</span> <span class="number">12345</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>); <span class="comment">// 创建线程池</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(PORT)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器已启动，等待客户端连接...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">clientSocket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">                pool.execute(<span class="keyword">new</span> <span class="title class_">ClientHandler</span>(clientSocket)); <span class="comment">// 将客户端请求交给线程池处理</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            pool.shutdown(); <span class="comment">// 关闭线程池</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="错误处理和异常管理"><a href="#错误处理和异常管理" class="headerlink" title="错误处理和异常管理"></a>错误处理和异常管理</h2><p>网络编程中，错误和异常处理非常重要，例如：</p><ul><li>网络不通</li><li>超时</li><li>IO 异常</li></ul><p>使用 try-catch 块捕获异常，并适时记录或处理。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/blog/post/3859609d.html"/>
      <url>/blog/post/3859609d.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Java 反射（Reflection）是 Java 语言中的一个功能强大的特性，允许程序在运行时检查或修改自身的结构（类、方法、字段等）。通过反射，开发者可以在程序运行时动态地访问类和对象的属性、调用方法，甚至修改其行为。反射主要用于框架开发、工具类库、动态代理等场景。</p><h2 id="Java-反射的常见用途："><a href="#Java-反射的常见用途：" class="headerlink" title="Java 反射的常见用途："></a>Java 反射的常见用途：</h2><ol><li><strong>在运行时获取类信息</strong>：可以获取一个类的名称、构造方法、字段、方法、父类等信息。</li><li><strong>动态创建对象</strong>：通过反射动态地创建类的实例，甚至可以调用私有构造方法。</li><li><strong>调用方法</strong>：可以在运行时调用对象的公开或私有方法。</li><li><strong>访问和修改字段</strong>：可以在运行时访问或修改对象的公开或私有字段。</li><li><strong>动态代理</strong>：使用反射机制可以实现动态代理，特别是 AOP（面向切面编程）和其他框架中的功能。</li></ol><h2 id="常用的反射类"><a href="#常用的反射类" class="headerlink" title="常用的反射类"></a>常用的反射类</h2><ul><li><code>Class&lt;?&gt;</code>：代表一个类，提供了很多用于获取类信息的方法，比如 <code>getDeclaredFields()</code>、<code>getDeclaredMethods()</code>。</li><li><code>Constructor&lt;?&gt;</code>：代表构造方法，可以通过反射创建对象。</li><li><code>Field</code>：代表类的字段，可以用来访问和修改对象的字段。</li><li><code>Method</code>：代表类的方法，可以用来调用对象的方法。</li></ul><h2 id="反射的使用"><a href="#反射的使用" class="headerlink" title="反射的使用"></a>反射的使用</h2><ol><li>获取 Class 对象：</li></ol><ul><li>通过类名：<code>Class.forName(&quot;com.example.MyClass&quot;)</code></li><li>通过对象：<code>object.getClass()</code></li><li>通过类字面量：<code>MyClass.class</code></li></ul><ol start="2"><li>获取构造方法：</li></ol><ul><li><code>Constructor&lt;?&gt;[] getConstructors()</code>：返回所有公共构造方法对象的数组</li><li><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code>：返回所有构造方法对象的数组</li><li><code>Constructor&lt;T&gt;[] getConstructor(Class&lt;?&gt;... parameterTypes)</code>：返回单个公共构造方法对象</li><li><code>Constructor&lt;?&gt;[] getDeclaredConstructors(Class&lt;?&gt;... parameterTypes)</code>：返回单个构造方法对象</li></ul><p>成员方法：</p><ul><li><code>T newInstance(Object... initargs)</code>：根据指定的构造方法创建对象</li><li><code>setAccessible(boolean flag)</code>：设置为 true，代表取消访问检查</li></ul><ol start="3"><li>获取字段：</li></ol><ul><li><code>Field[] getFields()</code>：返回所有公共成员变量对象的数组</li><li><code>Field[] getDelaredFields</code>：返回所有成员变量对象的数组</li><li><code>Field getField(String name)</code>：返回单个公共成员变量对象</li><li><code>Field getDelaredFiedl(String name)</code>：返回单个成员变量对象</li></ul><p>成员方法：</p><ul><li><code>void set(Object obj, Object value)</code>：赋值</li><li><code>Object get(Object obj)</code>：获取值</li><li><code>setAccessible(boolean flag)</code>：设置为 true，代表取消访问检查</li></ul><ol start="4"><li>获取方法：</li></ol><ul><li><code>Method[] getMethods</code>：返回所有公共成员方法对象的数组，包括继承的</li><li><code>Method[] getDelaredMethods</code>：放回成员方法对象的数组，不包括继承的</li><li><code>Method getMethod(String name, Class&lt;?&gt;... parameterTypes)</code>：返回单个公共成员方法对象</li><li><code>Method getDelaredMethod(String name, Class&lt;?&gt;... parameterTypes)</code>：返回单个成员方法对象</li></ul><p>成员方法：</p><ul><li><code>Object invoke(Object obj, Object... args)</code>：运行方法</li><li><code>setAccessible(boolean flag)</code>：设置为 true，代表取消访问检查</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReflectionExample</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;Initial Name&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. 获取Class对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = ReflectionExample.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建对象实例</span></span><br><span class="line">        <span class="type">ReflectionExample</span> <span class="variable">instance</span> <span class="operator">=</span> (ReflectionExample) clazz.getDeclaredConstructor().newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 访问私有字段</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(instance, <span class="string">&quot;Updated Name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 调用私有方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">printNameMethod</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;printName&quot;</span>);</span><br><span class="line">        printNameMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        printNameMethod.invoke(instance); <span class="comment">// 输出：Name: Updated Name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实际开发中，反射的性能相对较低，因此不推荐频繁使用。它主要用于框架开发或当需要动态操作对象时才会使用。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理</title>
      <link href="/blog/post/d82hjg08.html"/>
      <url>/blog/post/d82hjg08.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在 Java 中，代理（Proxy）模式是一种设计模式，它允许你为对象提供一个替身或占位符，以控制对该对象的访问。代理模式可以用于各种场景，比如延迟加载、访问控制、日志记录、事务处理等。</p><p>Java 中有两种常见的代理方式：</p><ul><li>静态代理</li><li>动态代理</li></ul><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>静态代理类在编译期间就已经确定，需要手动编写代理类，通常，静态代理类实现与被代理对象相同的接口，并且在代理类中可以对方法的调用进行增强处理。</p><p>在下面的例子中，ServiceProxy 是 RealService 的代理，它在调用 performAction 方法之前和之后做了一些额外的工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">performAction</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口的真实对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RealService</span> <span class="keyword">implements</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performAction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Performing action in RealService&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceProxy</span> <span class="keyword">implements</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Service realService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceProxy</span><span class="params">(Service realService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.realService = realService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performAction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Proxy before action&quot;</span>);</span><br><span class="line">        realService.performAction();  <span class="comment">// 调用真实对象的方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Proxy after action&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Service</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceProxy</span>(<span class="keyword">new</span> <span class="title class_">RealService</span>());</span><br><span class="line">        service.performAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>Java 的动态代理是在运行时生成代理类。Java 提供了两种动态代理的方式：</p><ul><li>JDK 动态代理：用于代理实现了接口的类。</li><li>CGLIB 动态代理：用于代理没有实现接口的类。</li></ul><h3 id="JDK-动态代理"><a href="#JDK-动态代理" class="headerlink" title="JDK 动态代理"></a>JDK 动态代理</h3><p>JDK 动态代理依赖于 java.lang.reflect.Proxy 类和 InvocationHandler 接口。</p><p>在这个示例中，Proxy.newProxyInstance 方法用于动态创建一个代理对象。通过 InvocationHandler 接口的 invoke 方法，可以在调用真实对象的方法之前或之后执行一些额外操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">performAction</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口的真实对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RealService</span> <span class="keyword">implements</span> <span class="title class_">Service</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performAction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Performing action in RealService&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceInvocationHandler</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Proxy before action&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);  <span class="comment">// 调用真实对象的方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Proxy after action&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Service</span> <span class="variable">realService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RealService</span>();</span><br><span class="line">        <span class="type">Service</span> <span class="variable">proxyService</span> <span class="operator">=</span> (Service) Proxy.newProxyInstance(</span><br><span class="line">                realService.getClass().getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Service.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ServiceInvocationHandler</span>(realService)</span><br><span class="line">        );</span><br><span class="line">        proxyService.performAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CGLIB-动态代理"><a href="#CGLIB-动态代理" class="headerlink" title="CGLIB 动态代理"></a>CGLIB 动态代理</h3><p>CGLIB 动态代理不要求目标类实现接口，它通过继承目标类来创建代理对象。CGLIB 常用于没有实现接口的类的代理。<br>需要注意，JDK 动态代理只能代理实现了接口的类，而 CGLIB 可以代理没有接口的类。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thread</title>
      <link href="/blog/post/g9jeg624.html"/>
      <url>/blog/post/g9jeg624.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Java 的多线程编程是一个非常强大的部分 😎，它使得我们能过在一个程序中并发的执行多个任务。合理使用多线程，可以提高 Java 应用程序的性能，尤其是在处理 I&#x2F;O 操作或计算密集型任务时。</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>以下是一些在 Java 中实现多线程的主要方式和相关概念：</p><ol><li>继承 Thread 类</li></ol><p>通过继承 Thread 类并重写 run()方法，可以创建一个新线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; - &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        thread1.start(); <span class="comment">// 启动线程1</span></span><br><span class="line">        thread2.start(); <span class="comment">// 启动线程2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法适合简单的多线程任务。<br>不推荐用于复杂项目中，因为 Java 只允许单继承，这限制了灵活性。</p><ol start="2"><li>实现 Runnable 接口</li></ol><p>实现 Runnable 接口是一种更常见的方式，适合需要实现多个线程类时的需求，它避免了 Java 单继承的限制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; - &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">myRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>()</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myRunnable);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myRunnable);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>推荐在大多数场景下使用，特别是当需要将线程与业务逻辑解耦时。<br>更灵活，适合多继承的类结构，因为可以实现多个接口。</p><ol start="3"><li>ExecutorService</li></ol><p>ExecutorService 是一个更高级的多线程管理工具，提供线程池的功能，适合需要管理大量线程的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>); <span class="comment">// 创建线程池</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            executorService.submit(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; is running&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown(); <span class="comment">// 关闭线程池</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当需要处理大量线程时，手动管理每个线程的创建、启动、关闭较为复杂。<br>ExecutorService 提供了一个线程池，可以高效地管理线程的生命周期，适合并发任务或需要复用线程的情况。</p><ol start="4"><li>Callable 和 Future</li></ol><p>Callable 接口与 Runnable 类似，但它可以返回结果或抛出异常。配合 Future 可以获取线程执行的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line">        Callable&lt;Integer&gt; task = () -&gt; &#123;</span><br><span class="line">            <span class="comment">// 返回计算结果</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        Future&lt;Integer&gt; future = executor.submit(task);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Result: &quot;</span> + future.get());</span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当需要线程返回结果时，可以使用 Callable 接口，它允许线程任务返回一个值。<br>配合 Future 对象，可以异步获取线程的执行结果。</p><h2 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h2><p>Java 线程的生命周期主要有以下几个状态：</p><ul><li>新建（NEW）：线程对象已创建，但未启动。</li><li>就绪（READY）：线程已启动，正在等待 CPU 调度。</li><li>运行（RUNNING）：线程获得 CPU，正在执行任务。</li><li>阻塞（BLOCKED）：线程因等待锁或资源被阻塞。</li><li>等待（WAITING）：线程在等待某个条件（例如等待另一个线程的通知）。</li><li>超时等待（TIMED_WAITING）：线程在等待一段时间后再进行操作，例如 Thread.sleep()。</li><li>终止（TERMINATED）：线程的任务执行完毕或由于异常终止。</li></ul><p>在 java.lang.Thread.State 枚举类中定义了以下几种状态：</p><ul><li>NEW</li><li>RUNNABLE</li><li>BLOCKED</li><li>WAITING</li><li>TIME_WAITING</li><li>TERMAINATED</li></ul><p>并没有见到 RUNNING 的状态，这是因为 RUNNABLE 状态已经足够描述线程是否可以执行，且线程调度的具体时机由操作系统控制。RUNNABLE 状态涵盖了 READY 和 RUNNING 这两种情况，将其进一步细分并无太大必要，也无法完全掌控线程在 CPU 上的具体执行情况。这种设计使得线程状态管理更加简洁，同时又能灵活应对大多数并发场景。</p><h2 id="守护线程（Daemon-Thread）"><a href="#守护线程（Daemon-Thread）" class="headerlink" title="守护线程（Daemon Thread）"></a>守护线程（Daemon Thread）</h2><p>守护线程（Daemon Thread）是一种在后台运行的线程，通常用于执行辅助性任务，如垃圾回收、日志记录等。当所有的非守护线程（用户线程）都结束时，JVM 将会退出，不管是否有守护线程仍在运行。</p><p>使用 setDaemon(true) 方法将线程设置为守护线程，必须在 start() 方法调用之前设置，否则会抛出 IllegalThreadStateException。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaemonThreadExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">daemonThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;守护线程运行中...&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        daemonThread.setDaemon(<span class="literal">true</span>);  <span class="comment">// 设置为守护线程</span></span><br><span class="line">        daemonThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：当主线程结束时，守护线程也会立即终止。</p><h2 id="礼让线程"><a href="#礼让线程" class="headerlink" title="礼让线程"></a>礼让线程</h2><p>礼让线程是指线程主动放弃 CPU 使用权，将执行机会交给其他线程。Java 中，Thread.yield() 方法用于实现这种功能。</p><p>当一个线程调用 yield() 方法时，它会尝试让出 CPU，回到就绪状态，但它不能保证当前正在运行的线程会立刻停止运行。<br>操作系统会根据调度算法选择其他处于就绪状态的线程执行。如果没有其他线程或其他线程的优先级较低，当前线程可能会再次执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YieldExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 1 - &quot;</span> + i);</span><br><span class="line">                Thread.<span class="keyword">yield</span>();  <span class="comment">// 礼让 CPU</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 2 - &quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入线程"><a href="#插入线程" class="headerlink" title="插入线程"></a>插入线程</h2><p>插入线程是指一个线程等待另一个线程执行完成后再继续执行。Java 提供了 Thread.join() 方法来实现这种功能。</p><p>当线程调用另一个线程的 join() 方法时，当前线程会进入等待状态，直到被调用的线程执行完毕为止。<br>也可以指定超时时间，使用 join(long millis) 让当前线程等待指定的时间后继续执行，不管目标线程是否已经完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JoinExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程 1 - &quot;</span> + i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);  <span class="comment">// 模拟耗时任务</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程 2 - &quot;</span> + i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);  <span class="comment">// 模拟耗时任务</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            thread1.join();  <span class="comment">// 等待 thread1 完成</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程继续执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：thread1 会先执行完成，主线程才会继续执行。<br>如果不使用 join()，则主线程与其他线程可能会并行执行。</p><h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><p>Java 线程可以通过设置优先级来建议操作系统调度器决定哪个线程应该优先运行。线程优先级是一个整数，取值范围从 1 到 10，默认优先级为 5。通过 setPriority(int newPriority) 方法可以设置线程的优先级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriorityExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">highPriorityThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;高优先级线程&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">lowPriorityThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;低优先级线程&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        highPriorityThread.setPriority(Thread.MAX_PRIORITY);  <span class="comment">// 设置高优先级</span></span><br><span class="line">        lowPriorityThread.setPriority(Thread.MIN_PRIORITY);  <span class="comment">// 设置低优先级</span></span><br><span class="line"></span><br><span class="line">        lowPriorityThread.start();</span><br><span class="line">        highPriorityThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程优先级只是给操作系统的一个建议，线程的实际调度还是由操作系统决定。因此，在不同的操作系统上，线程优先级的效果可能不同。<br>不应依赖线程优先级来确保程序的正确性，应将其视为一个优化工具。</p><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>多线程程序中一个关键问题就是线程安全，即多个线程并发访问共享资源，不管运行时环境采用何种调度方式或者这些进程将如何交替进行，并且在主调代码中不需要任何额外的同步和协作，这个类都能表现出正常的行为，那么就称这个类是线程安全的。</p><p>如何保证一个类是线程安全的，可以从以下三个特性出发，分别有以下手段：</p><ol><li>原子性（Atomicity）：单个或多个操作是要么全部执行，要么都不执行，提供了互斥访问，同一时刻只能有一个线程来对它进行操作。</li><li>可见性（Visibility）：一个线程对主内存的修改可以及时的被其他线程观察到。</li><li>有序性（Ordering）：一个线程观察其他指令执行顺序，由于指令重排序的存在，该观察结果一般杂乱无序。</li></ol><p>原子性（Atomicity）：</p><ul><li>Atomic 包<ul><li>AtomicInteger、AtomicLong、AtomicBoolean：提供了对 int、long、boolean 类型的原子操作。</li><li>AtomicReference：提供对任意对象的原子引用操作，适合于需要保证线程安全的对象引用。</li><li>AtomicStampReference：解决 CAS 的 ABA 问题。</li></ul></li><li>synchronized<ul><li>修饰代码块：对代码块上锁，锁住的是指定对象。</li><li>修饰方法：对整个方法上锁，锁住的是调用的对象。</li><li>修饰静态方法：对整个静态方法上锁，锁住的是这个类。</li></ul></li><li>锁<ul><li>synchronized：内置锁，简单易用。</li><li>ReentrantLock：可重入锁，灵活控制加锁与解锁，支持公平性、可重入性和可中断性。</li><li>ReadWriteLock：读写锁，允许多线程并发读，写操作独占锁。</li><li>StampedLock：支持乐观读锁，适合读多写少的场景。</li><li>Condition：与 ReentrantLock 搭配使用，实现复杂的等待与通知机制。</li><li>Semaphore：信号量，用于控制访问资源的线程数量。</li></ul></li></ul><p>对比：</p><ul><li>atomic 包 提供了高效的无锁机制，适合简单的状态管理和计数器，但仅适用于单一变量的原子性操作，不能处理复杂的多变量同步。</li><li>synchronized 是最简单的锁机制，适用于需要确保多个线程对共享资源的访问同步的场景。其性能在现代 JVM 中得到了优化，但在复杂应用中可能不够灵活。</li><li>Lock 提供了更灵活的锁控制，适用于需要定制锁行为或复杂的同步场景。相比 synchronized，Lock 可以提高性能，但需要开发者手动管理锁的释放，增加了使用的复杂性。</li></ul><p>可见性（Visibility）：</p><ul><li>volatile：volatile 是 Java 中提供的轻量级同步机制，确保对变量的读写操作具有可见性。使用 volatile 修饰的变量，线程对该变量的修改会立即更新到主内存，其他线程读取该变量时也会直接从主内存中获取最新的值，而不是使用线程本地缓存。</li><li>synchronized：synchronized 也可以确保可见性。在一个线程进入 synchronized 块之前，它会从主内存中获取所有共享变量的最新值；在退出 synchronized 块时，它会把对共享变量的修改写回主内存。因此，在 synchronized 块内进行的操作是对其他线程可见的。</li><li>final：当一个字段被声明为 final 时，Java 确保它在构造器中初始化完成后，其他线程能够看到这个字段的正确值。这意味着对象一旦构造完成，所有线程都能够看见 final 字段的值。</li></ul><p>有序性（Ordering）：</p><ul><li>volatile 关键字：除了保证可见性，volatile 还可以保证一定的有序性。对于 volatile 变量，JMM 保证对它的写操作会在它后面的读操作之前完成，即禁止了特定情况下的指令重排序。</li><li>synchronized 块：synchronized 不仅可以保证可见性，也可以保证有序性。在一个线程持有 synchronized 锁的期间，Java 会保证线程之间的操作按顺序执行，禁止指令重排序。</li></ul><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>死锁是指两个或多个线程互相等待对方持有的资源，导致任务无法进行。常见的死锁场景是线程 A 锁定资源 1，同时等待资源 2，而线程 B 锁定资源 2，等待资源 1。</p><p>避免死锁的方法：</p><ul><li>尽量减少锁的使用。</li><li>遵循一致的资源请求顺序，防止循环等待。</li></ul><h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><p>这三个方法是 Java 内置的线程通信机制，定义在 Object 类中，因为每个对象都可以作为锁来控制线程的同步。</p><ul><li>wait()：让当前线程等待，并释放当前对象的锁，直到其他线程调用 notify() 或 notifyAll() 使其唤醒。</li><li>notify()：唤醒在当前对象监视器上等待的一个线程。</li><li>notifyAll()：唤醒在当前对象监视器上等待的所有线程。</li></ul><p>这三者必须在同步代码块或者同步方法中使用，否则会抛出 IllegalMonitorStateException 异常。</p><p>示例：生产者-消费者模型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SharedResource</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">available</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">produce</span><span class="params">(<span class="type">int</span> value)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (available) &#123;</span><br><span class="line">            wait(); <span class="comment">// 等待消费者消费完毕</span></span><br><span class="line">        &#125;</span><br><span class="line">        data = value;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产者生产: &quot;</span> + value);</span><br><span class="line">        available = <span class="literal">true</span>;</span><br><span class="line">        notify(); <span class="comment">// 通知消费者数据已准备好</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">consume</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (!available) &#123;</span><br><span class="line">            wait(); <span class="comment">// 等待生产者生产数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者消费: &quot;</span> + data);</span><br><span class="line">        available = <span class="literal">false</span>;</span><br><span class="line">        notify(); <span class="comment">// 通知生产者可以继续生产</span></span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SharedResource resource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(SharedResource resource)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resource = resource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                resource.produce(value++);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>); <span class="comment">// 模拟生产时间</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SharedResource resource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(SharedResource resource)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resource = resource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                resource.consume();</span><br><span class="line">                Thread.sleep(<span class="number">1500</span>); <span class="comment">// 模拟消费时间</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerConsumerExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SharedResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SharedResource</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Producer</span>(resource));</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Consumer</span>(resource));</span><br><span class="line"></span><br><span class="line">        producer.start();</span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，生产者线程和消费者线程通过 wait() 和 notify() 方法进行通信。生产者在缓冲区满时等待消费者消费，消费者在缓冲区为空时等待生产者生产。</p><h2 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h2><p>JUC 是 Java 并发工具包（Java Util Concurrent）的缩写，它是 Java 5 中引入的一个强大的并发框架，旨在简化和增强 Java 应用中的并发编程。</p><ol><li>线程池</li></ol><p>JUC 提供了丰富的线程池实现，使用线程池可以避免手动管理线程的创建和销毁，提升系统性能。线程池通过 Executors 工厂类来创建，主要包括以下几种：</p><ul><li>FixedThreadPool：一个固定数量的线程池。</li><li>CachedThreadPool：一个可根据需要创建新线程的线程池，但如果线程闲置超过 60 秒则会被终止并移除。</li><li>SingleThreadExecutor：只有一个线程的线程池，确保任务按顺序执行。</li><li>ScheduledThreadPool：用于定时任务执行或周期性任务调度的线程池。</li></ul><p>自定义线程池 ThreadPoolExecutor：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="type">int</span> corePoolSize,          // 核心线程数</span></span><br><span class="line"><span class="params">    <span class="type">int</span> maximumPoolSize,       // 最大线程数</span></span><br><span class="line"><span class="params">    <span class="type">long</span> keepAliveTime,        // 空闲线程存活时间</span></span><br><span class="line"><span class="params">    TimeUnit unit,             // 空闲线程存活时间的单位</span></span><br><span class="line"><span class="params">    BlockingQueue&lt;Runnable&gt; workQueue,  // 任务队列</span></span><br><span class="line"><span class="params">    ThreadFactory threadFactory,        // 线程工厂</span></span><br><span class="line"><span class="params">    RejectedExecutionHandler handler    // 拒绝策略</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure><p>参数说明：</p><ol><li><p>corePoolSize（核心线程数）：</p><ul><li>核心线程是线程池中的基本线程数，在没有超时机制时，它们会一直存在，不会被回收，即使处于空闲状态。</li><li>当提交一个任务时，如果当前线程数小于核心线程数，即使线程池中有空闲线程，也会创建新的线程来执行任务。</li></ul></li><li><p>maximumPoolSize（最大线程数）：</p><ul><li>最大线程数是线程池能容纳的最大线程数量，当核心线程全部繁忙，且任务队列已满时，线程池会创建新的线程，直到达到 maximumPoolSize。</li></ul></li><li><p>keepAliveTime（空闲线程存活时间）：</p><ul><li>当线程数超过 corePoolSize，多余的空闲线程将会在超过 keepAliveTime 后被终止。这个值只对超过核心线程数的线程起作用。</li></ul></li><li><p>unit（时间单位）：</p><ul><li>keepAliveTime 的时间单位，如 TimeUnit.SECONDS、TimeUnit.MILLISECONDS 等。</li></ul></li><li><p>workQueue（任务队列）：<br>一个阻塞队列，用来存放等待执行的任务。常用的队列类型有：</p><ul><li>LinkedBlockingQueue：一个无界队列，可以存储任意数量的任务。</li><li>ArrayBlockingQueue：一个有界队列，任务数量超过其容量后会阻塞新的任务提交。</li><li>SynchronousQueue：每提交一个任务都需要立刻有线程执行，否则会阻塞。</li></ul></li><li><p>threadFactory（线程工厂）：</p><ul><li>线程工厂用于创建新线程，一般使用默认的 Executors.defaultThreadFactory()，但也可以自定义以便对线程命名、设置优先级等。</li></ul></li><li><p>handler（拒绝策略）：<br>当任务队列满且线程数达到最大线程数时，线程池无法处理新的任务，此时需要采取拒绝策略。ThreadPoolExecutor 提供了几种内置的拒绝策略：</p><ul><li>AbortPolicy（默认）：直接抛出 RejectedExecutionException 异常。</li><li>CallerRunsPolicy：调用线程执行任务，即提交任务的线程自己执行该任务。</li><li>DiscardPolicy：直接丢弃无法处理的任务，不抛出异常。</li><li>DiscardOldestPolicy：丢弃队列中最旧的任务，并尝试重新提交新的任务。</li></ul></li><li><p>同步工具类</p></li></ol><p>JUC 中提供了多个同步工具类来协调多个线程之间的执行顺序。</p><ul><li>CountDownLatch：允许一个或多个线程等待其他线程完成任务。常用于多个子线程完成任务后再继续主线程。</li><li>CyclicBarrier：类似于 CountDownLatch，但它允许一组线程相互等待，所有线程都到达屏障点后一起继续执行。可以在并发任务的阶段性同步时使用。</li><li>Semaphore：信号量，用来限制访问共享资源的线程数量。常用于控制并发量，比如限制对某些资源的并发访问数量。</li><li>Exchanger：用于在线程之间交换数据。两个线程到达同步点后可以交换数据。</li></ul><ol start="3"><li>并发集合</li></ol><p>JUC 提供了线程安全的集合类，用于解决并发环境下对集合进行修改时的线程安全问题。常用的并发集合有：</p><ul><li>ConcurrentHashMap：线程安全的哈希表，允许多个线程并发地访问和修改。</li><li>CopyOnWriteArrayList：适用于读多写少的场景，每次写操作都会复制整个列表。</li><li>ConcurrentLinkedQueue：高效的非阻塞并发队列，适用于多线程环境下的队列操作。</li><li>BlockingQueue：支持阻塞操作的队列，在生产者-消费者模式中非常有用。实现类有 ArrayBlockingQueue、LinkedBlockingQueue、PriorityBlockingQueue 等。</li></ul><ol start="4"><li>原子类</li></ol><p>JUC 提供了一系列的原子操作类，它们保证在多线程环境下对基本数据类型的操作是原子的，避免了显式的同步开销。这些类主要包括：</p><ul><li>AtomicInteger、AtomicLong、AtomicBoolean：对基本类型（如 int、long、boolean）的原子操作。</li><li>AtomicReference：对对象引用进行原子操作。</li><li>AtomicStampedReference：解决 CAS（Compare-And-Swap）中的 ABA 问题。</li></ul><h2 id="线程池最佳线程数"><a href="#线程池最佳线程数" class="headerlink" title="线程池最佳线程数"></a>线程池最佳线程数</h2><p>确定线程池的最佳线程数需要根据任务的特性和硬件资源来调整。</p><ol><li><p>任务类型主要分为两类：</p><ul><li>CPU 密集型任务：这种任务主要消耗 CPU 资源，如复杂的计算、数据处理等。</li><li>I&#x2F;O 密集型任务：这种任务主要依赖 I&#x2F;O 操作，如文件读写、网络请求等，CPU 在等待 I&#x2F;O 完成时通常会处于空闲状态。</li></ul></li><li><p>硬件资源<br>主要是服务器的 CPU 核心数 和 I&#x2F;O 带宽。合理配置线程数可以最大化利用这些资源。</p></li></ol><p>最佳线程数计算公式</p><ol><li>CPU 密集型任务</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">线程数 = CPU 核心数 + 1</span><br></pre></td></tr></table></figure><p>这里加 1 是为了保证即使有某个线程发生上下文切换或者等待时，仍有线程可以继续执行。</p><ol start="2"><li>I&#x2F;O 密集型任务</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">线程数 = CPU 核心数 * 期望CPU利用率 * (1 + 任务等待时间/任务计算时间)</span><br></pre></td></tr></table></figure><p>任务的等待时间与计算时间的比值越大，说明任务越依赖 I&#x2F;O，线程数就应该相应地增加。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这里只是浅尝即止的讨论java的多线程技术，在后续的java并发编程一系列中会深入研究java的并发编程技术。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流</title>
      <link href="/blog/post/qcoitct2.html"/>
      <url>/blog/post/qcoitct2.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Java I&#x2F;O 流（Input&#x2F;Output Stream）是 Java 中进行数据输入和输出的核心组件，分为字节流和字符流两大类。它们可以处理文件、内存、网络、管道等不同的 I&#x2F;O 源。</p><h2 id="IO-流"><a href="#IO-流" class="headerlink" title="IO 流"></a>IO 流</h2><p>IO 流层次结构图</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">java.io.InputStream</span><br><span class="line">    ├── FileInputStream</span><br><span class="line">    ├── BufferedInputStream</span><br><span class="line">    ├── DataInputStream</span><br><span class="line">    ├── ObjectInputStream</span><br><span class="line">    ├── ByteArrayInputStream</span><br><span class="line">    └── PipedInputStream</span><br><span class="line"></span><br><span class="line">java.io.OutputStream</span><br><span class="line">    ├── FileOutputStream</span><br><span class="line">    ├── BufferedOutputStream</span><br><span class="line">    ├── DataOutputStream</span><br><span class="line">    ├── ObjectOutputStream</span><br><span class="line">    ├── ByteArrayOutputStream</span><br><span class="line">    └── PipedOutputStream</span><br><span class="line"></span><br><span class="line">java.io.Reader</span><br><span class="line">    ├── FileReader</span><br><span class="line">    ├── BufferedReader</span><br><span class="line">    ├── InputStreamReader</span><br><span class="line">    ├── StringReader</span><br><span class="line">    └── PipedReader</span><br><span class="line"></span><br><span class="line">java.io.Writer</span><br><span class="line">    ├── FileWriter</span><br><span class="line">    ├── BufferedWriter</span><br><span class="line">    ├── OutputStreamWriter</span><br><span class="line">    ├── StringWriter</span><br><span class="line">    └── PipedWriter</span><br></pre></td></tr></table></figure><p>以上的 IO 流主要分为两个大类：</p><ol><li>字节流（Byte Streams）<br>字节流处理的是二进制数据（8 位字节），用于处理任意类型的文件，如图像、音频等。字节流的两个核心抽象类是：<ul><li>InputStream：字节输入流，用于从数据源读取字节数据。</li><li>OutputStream：字节输出流，用于向目标输出字节数据。</li></ul></li><li>字符流（Character Streams）<br>字符流处理的是文本数据（16 位 Unicode 字符），用于处理文本文件。字符流的两个核心抽象类是：<ul><li>Reader：字符输入流，用于从数据源读取字符。</li><li>Writer：字符输出流，用于向目标输出字符。</li></ul></li></ol><p>常用类：</p><ol><li>InputStream<ul><li>FileInputStream：从文件中读取字节数据。</li><li>BufferedInputStream：为输入流提供缓冲机制，减少对磁盘等资源的频繁访问。</li><li>DataInputStream：用于读取 Java 基本数据类型（如 int、float 等）。</li><li>ObjectInputStream：用于反序列化对象，从流中恢复对象。</li><li>ByteArrayInputStream：从字节数组中读取字节数据。</li><li>PipedInputStream：实现管道输入流，用于线程间通信。</li></ul></li><li>OutputStream<ul><li>FileOutputStream：向文件中写入字节数据。</li><li>BufferedOutputStream：为输出流提供缓冲机制，减少频繁的磁盘写入操作。</li><li>DataOutputStream：用于将 Java 基本数据类型写入到输出流中。</li><li>ObjectOutputStream：用于序列化对象，并将其写入输出流。</li><li>ByteArrayOutputStream：将字节数据写入字节数组中。</li><li>PipedOutputStream：实现管道输出流，用于线程间通信。</li></ul></li><li>Reader<ul><li>FileReader：从文件中读取字符数据，通常是文本文件。</li><li>BufferedReader：为输入流提供缓冲机制，提高读取效率，提供按行读取的功能（readLine()）。</li><li>InputStreamReader：将字节流转换为字符流（常用于字节流与字符流之间的桥梁，如读取带有编码的文件）。</li><li>StringReader：从字符串中读取字符数据。</li><li>PipedReader：实现管道字符输入流，用于线程间通信。</li></ul></li><li>Writer<ul><li>FileWriter：向文件中写入字符数据，通常是文本文件。</li><li>BufferedWriter：为输出流提供缓冲机制，提高写入效率。</li><li>OutputStreamWriter：将字符流转换为字节流（常用于将字符数据写入带有编码的输出流中）。</li><li>StringWriter：将字符数据写入字符串。</li><li>PipedWriter：实现管道字符输出流，用于线程间通信。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Error</title>
      <link href="/blog/post/p83a54r9.html"/>
      <url>/blog/post/p83a54r9.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在 Java 中，异常处理是一种应对程序运行过程中可能出现的错误或异常事件的机制。Java 提供了一套强大的异常处理框架，确保程序能够优雅地处理错误，而不会导致程序崩溃 😎</p><h2 id="异常类"><a href="#异常类" class="headerlink" title="异常类"></a>异常类</h2><p>异常类层次结构图</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Throwable</span><br><span class="line">    ├── java.lang.Exception</span><br><span class="line">    │       ├── java.lang.RuntimeException</span><br><span class="line">    │       │       ├── NullPointerException</span><br><span class="line">    │       │       ├── ArithmeticException</span><br><span class="line">    │       │       ├── IndexOutOfBoundsException</span><br><span class="line">    │       │       └── ...</span><br><span class="line">    │       ├── IOException</span><br><span class="line">    │       ├── SQLException</span><br><span class="line">    │       └── ...</span><br><span class="line">    └── java.lang.Error</span><br><span class="line">            ├── OutOfMemoryError</span><br><span class="line">            ├── StackOverflowError</span><br><span class="line">            ├── VirtualMachineError</span><br><span class="line">            └── ...</span><br></pre></td></tr></table></figure><h3 id="Throwable-类"><a href="#Throwable-类" class="headerlink" title="Throwable 类"></a>Throwable 类</h3><p>所有的异常类都继承自<code>Throwable</code>类，<code>Throwable</code> 有两个重要子类：</p><ul><li><code>Exception</code>：应用程序可能需要处理的可检查异常</li><li><code>Error</code>：严重错误，如内存溢出等，程序不应尝试捕捉这些问题</li></ul><p>常用方法：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public String getMessage()</td><td>放回 throwable 的详细消息字符串</td></tr><tr><td>public String toString()</td><td>返回异常对象的类型和描述信息</td></tr><tr><td>public void printStackTrace()</td><td>在标准错误流中打印异常的堆栈跟踪信息</td></tr><tr><td>public StackTraceElement[] getStackTrace()</td><td>返回表示异常堆栈跟踪的数组，每个元素都是一个 StackTraceElement 对象，包含文件名、类名、方法名和行号</td></tr><tr><td>public Throwable getCause()</td><td>返回导致当前异常的原因（另一个 Throwable 对象），即链式异常中的原始异常。</td></tr></tbody></table><h3 id="Exception-类"><a href="#Exception-类" class="headerlink" title="Exception 类"></a>Exception 类</h3><p><code>Exception</code>是程序中常见的异常类型，它代表程序中可预见的错误情况，开发者可以通过捕获异常来处理。</p><p>Exception 的两种类型：</p><ol><li>受检查异常（Checked Exception）：</li></ol><ul><li>必须在编译时处理（通过 try-catch 或 throws 关键字声明）</li><li>常见的受检查异常包括：<ul><li><code>IOException</code></li><li><code>SQLException</code></li><li><code>ClassNotFoundException</code></li></ul></li></ul><ol start="2"><li>非受检查异常（Unchecked Exception）：</li></ol><ul><li>继承自 <code>RuntimeException</code>，编译器不会强制要求处理，通常由编程错误引发。</li><li>常见的非受检查异常包括：<ul><li><code>NullPointerException</code></li><li><code>ArrayIndexOutOfBoundsException</code></li><li><code>ArithmeticException</code></li></ul></li></ul><h3 id="Error-类"><a href="#Error-类" class="headerlink" title="Error 类"></a>Error 类</h3><p>Error 类表示严重的系统错误，这些错误通常是不可恢复的，程序不应该捕获或处理这些错误。例如，内存不足（<code>OutOfMemoryError</code>）或虚拟机错误（<code>VirtualMachineError</code>）。开发者通常不用显式地处理这些异常，因为它们反映了运行时环境的不可恢复问题。</p><h2 id="异常处理的语法"><a href="#异常处理的语法" class="headerlink" title="异常处理的语法"></a>异常处理的语法</h2><p>使用 <code>try-catch-finally</code> 结构来处理异常，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 可能会抛出异常的代码</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (异常类型<span class="number">1</span> e) &#123;</span><br><span class="line">    <span class="comment">// 处理异常</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (异常类型<span class="number">2</span> e) &#123;</span><br><span class="line">    <span class="comment">// 处理异常</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 可选的finally块，始终执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常的抛出"><a href="#异常的抛出" class="headerlink" title="异常的抛出"></a>异常的抛出</h2><ul><li><code>throw</code>：可以在方法中显式抛出异常并结束这个方法</li><li><code>throws</code>：用于声明方法可能抛出的异常，告诉调用者可能会遇到的异常，如果在方法体中抛出了受检查异常则必须在方法名处声明，非受检查异常则不必须</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;&#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        getMax(arr);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;空指针异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(<span class="string">&quot;数组长度为零&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; max) &#123;</span><br><span class="line">            max = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常的链式抛出"><a href="#异常的链式抛出" class="headerlink" title="异常的链式抛出"></a>异常的链式抛出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChainExceptionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method1();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace(); <span class="comment">// 打印堆栈跟踪</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;除零错误&quot;</span>, e); <span class="comment">// 链式异常</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Exception: 除零错误</span><br><span class="line">at ChainExceptionExample.method1(ChainExceptionExample.java:<span class="number">11</span>)</span><br><span class="line">at ChainExceptionExample.main(ChainExceptionExample.java:<span class="number">5</span>)</span><br><span class="line">Caused by: java.lang.ArithmeticException: / by zero</span><br><span class="line">at ChainExceptionExample.method1(ChainExceptionExample.java:<span class="number">9</span>)</span><br><span class="line">... <span class="number">1</span> more</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>File</title>
      <link href="/blog/post/tgpsr7if.html"/>
      <url>/blog/post/tgpsr7if.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>File</code> 类是 Java 中用于表示文件和目录路径名的类，位于 <code>java.io</code> 包中。它提供了对文件和目录的操作方法，但并不代表实际的文件内容读写。<code>File</code> 类的主要功能是检查文件的存在、创建文件或目录、删除文件、获取文件信息等。</p><h2 id="常用的-File-类方法"><a href="#常用的-File-类方法" class="headerlink" title="常用的 File 类方法"></a>常用的 <code>File</code> 类方法</h2><ol><li><p><strong>创建文件或目录</strong></p><ul><li><code>boolean createNewFile()</code>：创建一个新的文件，如果文件已存在，则返回 <code>false</code>。</li><li><code>boolean mkdir()</code>：创建一个目录。</li><li><code>boolean mkdirs()</code>：创建多个目录（包括必要的但不存在的父目录）。</li></ul></li><li><p><strong>删除文件或目录</strong></p><ul><li><code>boolean delete()</code>：删除文件或目录。如果是目录，必须是空的。</li></ul></li><li><p><strong>检查文件&#x2F;目录信息</strong></p><ul><li><code>boolean exists()</code>：检查文件或目录是否存在。</li><li><code>boolean isDirectory()</code>：判断该路径是否是目录。</li><li><code>boolean isFile()</code>：判断该路径是否是文件。</li><li><code>long length()</code>：返回文件的长度（以字节为单位），不能用于目录。</li><li><code>String getName()</code>：获取文件或目录的名称。</li><li><code>String getPath()</code>：获取文件或目录的路径。</li><li><code>String getAbsolutePath()</code>：获取文件或目录的绝对路径。</li><li><code>String getParent()</code>：获取父目录的路径。</li></ul></li><li><p><strong>读取文件列表</strong></p><ul><li><code>String[] list()</code>：列出目录中的文件和目录名。</li><li><code>String[] list(FilenameFilter filter)</code>：根据文件名过滤器返回列表。</li><li><code>File[] listFiles()</code>：列出目录中的文件和目录，以 <code>File</code> 对象数组的形式返回。</li><li><code>File[] listFiles(FileFilter filter)</code>：根据文件过滤器返回列表。</li><li><code>File[] listFiles(FilenameFilter filter)</code>：根据文件名过滤器返回列表。</li></ul></li><li><p><strong>文件重命名</strong></p><ul><li><code>boolean renameTo(File dest)</code>：重命名文件或目录。</li></ul></li><li><p><strong>文件权限</strong></p><ul><li><code>boolean canRead()</code>：判断是否可读。</li><li><code>boolean canWrite()</code>：判断是否可写。</li><li><code>boolean canExecute()</code>：判断是否可执行。</li></ul></li></ol><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;example.txt&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.createNewFile()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件已创建: &quot;</span> + file.getName());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件已存在。&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生错误。&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取文件信息</span></span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件名: &quot;</span> + file.getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;绝对路径: &quot;</span> + file.getAbsolutePath());</span><br><span class="line">            System.out.println(<span class="string">&quot;可写: &quot;</span> + file.canWrite());</span><br><span class="line">            System.out.println(<span class="string">&quot;可读: &quot;</span> + file.canRead());</span><br><span class="line">            System.out.println(<span class="string">&quot;文件大小: &quot;</span> + file.length() + <span class="string">&quot; 字节&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件不存在。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除文件</span></span><br><span class="line">        <span class="keyword">if</span> (file.delete()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件已删除: &quot;</span> + file.getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;删除文件失败。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FilenameFilter"><a href="#FilenameFilter" class="headerlink" title="FilenameFilter"></a>FilenameFilter</h2><p><code>FilenameFilter</code> 是一个用于过滤目录中文件名的接口，通常与 <code>File</code> 类的 <code>list()</code> 或 <code>listFiles()</code> 方法配合使用。它的过滤条件基于文件的名称。</p><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><ul><li><code>boolean accept(File dir, String name)</code>：这个方法用来定义过滤的逻辑。<code>dir</code> 表示当前的目录，<code>name</code> 是当前文件的名称。如果返回 <code>true</code>，该文件将包含在过滤结果中。</li></ul><h3 id="示例代码（使用-FilenameFilter）"><a href="#示例代码（使用-FilenameFilter）" class="headerlink" title="示例代码（使用 FilenameFilter）"></a>示例代码（使用 <code>FilenameFilter</code>）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FilenameFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilenameFilterExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;example_directory&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建FilenameFilter来过滤扩展名为&quot;.txt&quot;的文件</span></span><br><span class="line">        <span class="type">FilenameFilter</span> <span class="variable">txtFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilenameFilter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File dir, String name)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> name.endsWith(<span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取目录下的所有.txt文件</span></span><br><span class="line">        String[] files = dir.list(txtFilter);</span><br><span class="line">        <span class="keyword">if</span> (files != <span class="literal">null</span> &amp;&amp; files.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String file : files) &#123;</span><br><span class="line">                System.out.println(file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有找到.txt文件。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FileFilter"><a href="#FileFilter" class="headerlink" title="FileFilter"></a>FileFilter</h2><p><code>FileFilter</code> 是一个用于过滤 <code>File</code> 对象的接口，通常与 <code>File</code> 类的 <code>listFiles()</code> 方法配合使用。与 <code>FilenameFilter</code> 不同，它直接过滤 <code>File</code> 对象，而不是仅基于文件名。</p><h3 id="方法：-1"><a href="#方法：-1" class="headerlink" title="方法："></a>方法：</h3><ul><li><code>boolean accept(File pathname)</code>：这个方法用来定义过滤的逻辑。<code>pathname</code> 是当前的 <code>File</code> 对象。如果返回 <code>true</code>，该文件将包含在过滤结果中。</li></ul><h3 id="示例代码（使用-FileFilter）"><a href="#示例代码（使用-FileFilter）" class="headerlink" title="示例代码（使用 FileFilter）"></a>示例代码（使用 <code>FileFilter</code>）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileFilterExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;example_directory&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建FileFilter来过滤扩展名为&quot;.txt&quot;的文件</span></span><br><span class="line">        <span class="type">FileFilter</span> <span class="variable">txtFileFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileFilter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File file)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> file.isFile() &amp;&amp; file.getName().endsWith(<span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取目录下的所有.txt文件</span></span><br><span class="line">        File[] files = dir.listFiles(txtFileFilter);</span><br><span class="line">        <span class="keyword">if</span> (files != <span class="literal">null</span> &amp;&amp; files.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">                System.out.println(file.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有找到.txt文件。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lambda表达式</title>
      <link href="/blog/post/4829566o.html"/>
      <url>/blog/post/4829566o.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在JDK8中，Java引入了一个重要特性，主要用于简化代码，尤其是在处理函数式编程时🤔</p><h2 id="函数式接口（Functional-Interface）"><a href="#函数式接口（Functional-Interface）" class="headerlink" title="函数式接口（Functional Interface）"></a>函数式接口（Functional Interface）</h2><p>Java的<code>lambda</code>表达式必须依赖函数式接口，一个函数式接口只能有一个抽象方法,使用<code>@FunctionalInterface</code>注解来标记一个接口为函数式接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyFunctionalInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">defaultMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a default method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a static method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><p>当在使用一些方法，方法要求传入一个函数式接口的实现类对象时，便可以使用lambda表达式去简写这个对象，假设现在有一个需求：</p><blockquote><p>给定一个名单列表，使用Stream流来筛选剩下名字开头为A的，并将名字转换成大写输出</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>, <span class="string">&quot;David&quot;</span>);</span><br><span class="line"></span><br><span class="line">names.stream()</span><br><span class="line">     .filter(name -&gt; name.startsWith(<span class="string">&quot;A&quot;</span>))  <span class="comment">// 过滤名字以 &quot;A&quot; 开头的元素</span></span><br><span class="line">     .map(String::toUpperCase)              <span class="comment">// 转换为大写</span></span><br><span class="line">     .forEach(System.out::println);         <span class="comment">// 打印结果</span></span><br></pre></td></tr></table></figure><p>lambda表达式可以有三种不同的形式：</p><ul><li>无参数，无返回值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">() -&gt; System.out.println(<span class="string">&quot;Hello, World&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>有参数，无返回值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="type">int</span> x, <span class="type">int</span> y) -&gt; System.out.println(x + y);</span><br></pre></td></tr></table></figure></li><li>有参数，有返回值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="type">int</span> x, <span class="type">int</span> y) -&gt; &#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure></li></ul><p>简写：</p><ol><li>如果只有一个参数，可以省略小括号  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str -&gt; System.out.println(str);</span><br></pre></td></tr></table></figure></li><li>如果表达式体只有一个语句，可以省略大括号和<code>return</code>关键字  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(x, y) -&gt; x + y; <span class="comment">// 等价于 (x, y) -&gt; &#123; return x + y; &#125;</span></span><br></pre></td></tr></table></figure></li><li>在使用 lambda 表达式时，编译器会根据上下文自动推断参数的类型，所以可以省略参数类型  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comparatpr&lt;Integer&gt; cpr = (a, b) -&gt; a.compareTo(b);</span><br></pre></td></tr></table></figure></li></ol><h2 id="方法引用（Method-References）"><a href="#方法引用（Method-References）" class="headerlink" title="方法引用（Method References）"></a>方法引用（Method References）</h2><p>方法引用是lambda表达式的简化形式，它直接引用现有的方法</p><ol><li>引用静态方法<br>  语法：类名::方法名  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;Integer&gt; print = System.out::println;</span><br><span class="line">print.accept(<span class="number">123</span>);</span><br></pre></td></tr></table></figure></li><li>引用其他类成员方法<br>  语法：对象::方法  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">Supplier&lt;Integer&gt; length = str::length;</span><br><span class="line">System.out.println(length.get());</span><br></pre></td></tr></table></figure></li><li>引用本类成员方法<br>  语法：this::方法</li><li>引用父类成员方法<br>  语法：super::方法</li><li>引用构造方法<br>  语法：类名::new  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;List&lt;String&gt;&gt; listSupplier = ArrayList::<span class="keyword">new</span>;</span><br><span class="line">List&lt;String&gt; list = listSupplier.get();</span><br></pre></td></tr></table></figure></li></ol><h2 id="lambda表达式的局部变量捕获"><a href="#lambda表达式的局部变量捕获" class="headerlink" title="lambda表达式的局部变量捕获"></a>lambda表达式的局部变量捕获</h2><p>在lambda表达式中，可以访问局部变量，但是这些变量必须是隐式<code>final</code>的，也就是说不能够在lambda表达式外修改它们</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">Consumer&lt;Integer&gt; consumer = x -&gt; System.out.println(x + num);</span><br><span class="line"><span class="comment">// num = 11;  // 这样会报错，因为 `num` 必须保持不变</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream</title>
      <link href="/blog/post/7tcb7iuv.html"/>
      <url>/blog/post/7tcb7iuv.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>当我们在对<code>数组</code>、<code>collection</code>等集合中的元素进行操作的时候一般会使用迭代的方式去逐个处理，为了简化代码，加快开发速度，Java 在 JDK8 版本添加<code>Stream</code>流操作，用来以“做什么而非怎么做”的方式处理集合。</p><p>例如，现在有一个需求：</p><blockquote><p>从给定句子中返回单词长度大于 5 的单词列表，并按长度倒序排列，最多返回 3 个</p></blockquote><p>在 JDK7 及以前的版本，我们可以通过以下方式进行实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">sortGetTop3LongWords</span><span class="params">(String sentence)</span> &#123;</span><br><span class="line">    <span class="comment">// 分割句子，得到单词列表</span></span><br><span class="line">    String[] words = sentence.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    List&lt;String&gt; wordList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 迭代判断单词长度，先过滤出长度按要求的单词</span></span><br><span class="line">    <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">        <span class="keyword">if</span> (word.length() &gt; <span class="number">5</span>)</span><br><span class="line">            wordList.add(word);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 按长度倒叙排列长度符合要求的单词</span></span><br><span class="line">    wordList.sort(((o1, o2) -&gt; o2.length() - o1.length()));</span><br><span class="line">    <span class="comment">// 判读List集合的长度，如果大于3截取前三个数据的子List返回</span></span><br><span class="line">    <span class="keyword">if</span> (wordList.size() &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        wordList = wordList.subList(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> wordList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 JDK8 及以后的版本，我们可以借助 Stream 流，写出更加优雅的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">sortGetTop3LongWordsByStream</span><span class="params">(String sentence)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(sentence.split(<span class="string">&quot; &quot;</span>)) <span class="comment">// 分割</span></span><br><span class="line">            .filter(word -&gt; word.length() &gt; <span class="number">5</span>)  <span class="comment">// 过滤</span></span><br><span class="line">            .sorted(((o1, o2) -&gt; o2.length() - o1.length())) <span class="comment">// 排序</span></span><br><span class="line">            .limit(<span class="number">3</span>) <span class="comment">// 限制</span></span><br><span class="line">            .collect(Collectors.toList()); <span class="comment">// 转List</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简直是太优雅力 😎</p><h2 id="Stream-流操作"><a href="#Stream-流操作" class="headerlink" title="Stream 流操作"></a>Stream 流操作</h2><p>概括的讲，Stream 流操作可以分为 3 种类型：</p><ul><li>Stream 的创建操作</li><li>Stream 的中间操作</li><li>Stream 的终止操作</li></ul><h3 id="创建操作"><a href="#创建操作" class="headerlink" title="创建操作"></a>创建操作</h3><table><thead><tr><th>数据来源</th><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>单列集合</td><td>default Stream<E> stream()</td><td>Collection 中的默认方法</td></tr><tr><td>单列集合</td><td>default Stream<E> parallelStream()</td><td>返回一个可以并行执行的 Stream 流对象</td></tr><tr><td>双列集合</td><td>无</td><td>无法直接创建 Stream 流，可以通过 keySet，entrySet 等方法间接创建</td></tr><tr><td>数组</td><td>static <T> Stream<T> stream(T[] array)</td><td>Arrays 中的静态方法</td></tr><tr><td>零散数据</td><td>static<T> Stream<T> of(T… values)</td><td>Stream 中的静态方法</td></tr></tbody></table><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><table><thead><tr><th>方法名</th><th>含义</th></tr></thead><tbody><tr><td>Stream<T> filter(Predicate&lt;? super T&gt; predicate)</td><td>用于通过设置条件过滤出元素</td></tr><tr><td>Stream<T> limit(long maxSize)</td><td>保留前 n 个元素</td></tr><tr><td>Stream<T> skip(long n)</td><td>去除前 n 个元素</td></tr><tr><td>Stream<T> sorted(Comparator&lt;? super T&gt; comparator)</td><td>对流进行排序</td></tr><tr><td>Stream<T> distinct()</td><td>元素去重（依赖 hashCode 和 equals 方法）</td></tr><tr><td>static <T> Stream<T> concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</td><td>合并两个流</td></tr><tr><td><R> Stream<R> map(Function&lt;? super T, ? extends R&gt; mapper)</td><td>转换流中的元素类型</td></tr></tbody></table><h3 id="终止操作"><a href="#终止操作" class="headerlink" title="终止操作"></a>终止操作</h3><table><thead><tr><th>方法名</th><th>含义</th></tr></thead><tbody><tr><td>void forEach(Consumer&lt;? super T&gt; action)</td><td>遍历</td></tr><tr><td>long count()</td><td>统计</td></tr><tr><td>Object[] toArray()</td><td>将流中的元素转换为 Object 类型数组</td></tr><tr><td><A> A[] toArray(IntFunction&lt;A[]&gt; generator)</td><td>将流中的元素转换为指定类型的数组</td></tr><tr><td>&lt;R, A&gt; R collect(Collector&lt;? super T, A, R&gt; collector)</td><td>将流中的元素转换为指定类型的数组</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java变量名和包名命名规范</title>
      <link href="/blog/post/6882356e.html"/>
      <url>/blog/post/6882356e.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java-总体命名规范"><a href="#Java-总体命名规范" class="headerlink" title="Java 总体命名规范"></a>Java 总体命名规范</h2><ul><li>项目名全部要小写</li><li>包名全部小写</li><li>类名首字母大写，其余组成词首字母大写（即驼峰命名）</li><li>变量名，方法名首字母小写，如果名称由多个单词组成，除了首字母外的每个单词的首字母都大写</li><li>常量名全部大写</li><li>所有的命名规则必须按照以下规则：</li><li>名称只能由字母、数字、下划线、$符号组成.</li><li>不能以数字开头.</li><li>名称不能使用Java中的关键字.</li><li>坚决不允许出现中文及拼音命名</li></ul><h2 id="Java-包命名规范"><a href="#Java-包命名规范" class="headerlink" title="Java 包命名规范"></a>Java 包命名规范</h2><p>为了保障每个Java Package命名的唯一性，在Java编程规范中要求开发人员在自己定义的包名前加上唯一的前缀。由于互联网上的域名称是不会重复的,所以多数开发人员采用自己公司在互联网上的域名称作为自己程序包的唯一前缀。命名规范有大致一下几种：</p><h3 id="团体"><a href="#团体" class="headerlink" title="团体"></a>团体</h3><ul><li>com：公司项目,copyright由项目发起的公司所有.<br>包名：com.公司名.项目名.模块名.……</li><li>team：团队项目,指由团队发起,并由该团队开发的项目,copyright属于该团队所有.<br>包名：team.团队名.项目名.模块名.……</li></ul><h3 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h3><p>个人的英语单词有individual、personal、private、one-man,进一步对以上四个单词词意进行分析并在保证了唯一性,继而使用每个单词的前4个字母作为前缀,与com也做了区分.</p><ul><li>indi：个体项目,指个人发起,但非自己独自完成的项目,可公开或私有项目,copyright主要属于发起者.<br>包名：indi.发起者名.项目名.模块名.……</li><li>pers：个人项目,指个人发起,独自完成,可分享的项目,copyright主要属于个人.<br>包名：pers.个人名.项目名.模块名.……</li><li>priv：私有项目,指个人发起,独自完成,非公开的私人使用的项目,copyright属于个人.<br>包名：priv.个人名.项目名.模块名.……</li><li>onem：与indi相同，推荐使用indi.</li></ul><p>转自<a href="https://blog.csdn.net/weixin_44793245/article/details/120838917">此文章</a></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端开发基础（一）- 简介</title>
      <link href="/blog/post/z3823524.html"/>
      <url>/blog/post/z3823524.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><h3 id="后端开发导航-🌏"><a href="#后端开发导航-🌏" class="headerlink" title="后端开发导航 🌏"></a>后端开发导航 🌏</h3><ol><li><a href="/blog/post/z3823524.html" title="后端开发基础（一）- 简介">后端开发基础（一）- 简介</a></li><li><a href="/blog/post/u9rubdog.html" title="后端开发基础（二）- Java基础">后端开发基础（二）- Java基础</a></li><li><a href="/blog/post/34f041e5.html" title="后端开发基础（三）- maven">后端开发基础（三）- maven</a></li><li><a href="/blog/post/h12hgndk.html" title="后端开发基础（四）- SQL">后端开发基础（四）- SQL</a></li></ol></div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于什么是后端，可见<a href="https://lanal.site/blog/post/m514k094.html">前端技术与后端技术之间的区别</a>🤔</p><h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ol><li>计算机网络基础知识<ul><li>HTTP&#x2F;HTTPS 协议</li><li>TCP&#x2F;IP</li><li>DNS</li><li>网络安全基础</li><li>API 设计与规范</li></ul></li><li>编程语言<ul><li>JavaScript&#x2F;Node.js</li><li>Python</li><li>Java</li><li>C#&#x2F;.NET</li><li>Go&#x2F;Rust 等</li></ul></li><li>数据库基础<ul><li>关系型数据库 (MySQL, PostgreSQL)</li><li>SQL 查询语言</li><li>数据库设计</li><li>索引与性能优化</li><li>事务与ACID特性</li></ul></li><li>API开发<ul><li>RESTful API</li><li>GraphQL</li><li>API认证与授权</li><li>状态码与错误处理</li><li>API文档</li></ul></li></ol><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><ol start="5"><li>Git 版本控制<ul><li>基本操作</li><li>分支管理</li><li>协作工作流</li></ul></li><li>GitHub 等仓库托管服务<ul><li>创建和管理代码仓库</li><li>Pull Request</li><li>Issues 管理</li></ul></li><li>开发环境配置<ul><li>IDE与编辑器</li><li>命令行工具</li><li>调试技巧</li></ul></li><li>包管理工具<ul><li>npm&#x2F;yarn (Node.js)</li><li>pip (Python)</li><li>Maven&#x2F;Gradle (Java)</li><li>NuGet (.NET)</li></ul></li></ol><h3 id="后端进阶"><a href="#后端进阶" class="headerlink" title="后端进阶"></a>后端进阶</h3><ol start="9"><li>缓存策略<ul><li>服务器端缓存</li><li>CDN缓存</li><li>数据库缓存</li><li>Redis&#x2F;Memcached</li></ul></li><li>身份验证与授权<ul><li>Session&#x2F;Cookie管理</li><li>JWT (JSON Web Tokens)</li><li>OAuth2.0&#x2F;OpenID Connect</li><li>单点登录 (SSO)</li></ul></li><li>消息队列与异步处理<ul><li>RabbitMQ</li><li>Kafka</li><li>事件驱动架构</li><li>任务调度</li></ul></li><li>NoSQL数据库<ul><li>MongoDB</li><li>Cassandra</li><li>Redis</li><li>文档型&#x2F;键值&#x2F;列族&#x2F;图数据库特性</li></ul></li></ol><h3 id="现代后端技术"><a href="#现代后端技术" class="headerlink" title="现代后端技术"></a>现代后端技术</h3><ol start="13"><li>测试与质量保证<ul><li>单元测试</li><li>集成测试</li><li>端到端测试</li><li>TDD&#x2F;BDD</li><li>性能测试</li></ul></li><li>Web服务器与应用服务器<ul><li>Nginx&#x2F;Apache</li><li>反向代理与负载均衡</li><li>应用服务器配置</li><li>静态资源优化</li></ul></li><li>CI&#x2F;CD与DevOps<ul><li>持续集成</li><li>持续部署</li><li>自动化测试</li><li>监控与日志</li><li>基础设施即代码 (IaC)</li></ul></li><li>容器与虚拟化<ul><li>Docker基础</li><li>Docker Compose</li><li>Kubernetes基础</li><li>容器编排</li></ul></li><li>微服务架构<ul><li>服务拆分原则</li><li>服务发现</li><li>API网关</li><li>微服务通信</li><li>分布式系统挑战</li></ul></li><li>搜索引擎<ul><li>Elasticsearch</li><li>全文检索</li><li>搜索优化</li><li>数据索引与查询</li></ul></li></ol><h3 id="专业素养"><a href="#专业素养" class="headerlink" title="专业素养"></a>专业素养</h3><ol start="19"><li>安全最佳实践<ul><li>OWASP Top 10</li><li>注入攻击防护</li><li>加密与哈希</li><li>安全审计</li><li>数据保护与合规</li></ul></li><li>系统设计原则<ul><li>设计模式</li><li>SOLID原则</li><li>DRY&#x2F;KISS&#x2F;YAGNI</li><li>代码重构</li><li>架构模式</li></ul></li><li>大规模应用<ul><li>水平&#x2F;垂直扩展</li><li>分库分表</li><li>分布式事务</li><li>CAP定理与最终一致性</li><li>高可用设计</li></ul></li><li>监控与可观测性<ul><li>日志管理</li><li>APM (应用性能监控)</li><li>健康检查</li><li>告警系统</li><li>性能分析</li></ul></li></ol><p>详细可见<a href="https://roadmap.sh/backend">Developer Roadmaps</a></p><script src='/js/series.js'></script>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端技术与后端技术之间的区别</title>
      <link href="/blog/post/m514k094.html"/>
      <url>/blog/post/m514k094.html</url>
      
        <content type="html"><![CDATA[<h2 id="前端和后端是什么"><a href="#前端和后端是什么" class="headerlink" title="前端和后端是什么"></a>前端和后端是什么</h2><blockquote><p><strong>前端</strong>（英语：<strong>front-end</strong>）和<strong>后端</strong>（英语：<strong>back-end</strong>）是描述进程开始和结束的通用词汇。前端作用于采集输入信息，后端进行处理。计算机程序的界面样式，视觉呈现属于前端。</p></blockquote><p>引用自<a href="https://zh.wikipedia.org/wiki/%E5%89%8D%E7%AB%AF%E5%92%8C%E5%90%8E%E7%AB%AF">维基百科</a></p><h2 id="前端的工作原理"><a href="#前端的工作原理" class="headerlink" title="前端的工作原理"></a>前端的工作原理</h2><blockquote><p>前端一词是指用户可以直接与之交互的图形用户界面（GUI），例如导航菜单、设计元素、按钮、图像和图表。采用技术术语，用户看到的带有多个 UI 组件的页面或屏幕称为文档对象模型（DOM）。<br>三种主要的计算机语言会影响用户与前端的交互方式：</p><ul><li>HTML 定义前端结构和不同的 DOM 元素</li><li>层叠样式表（CSS）定义 Web 应用程序的样式，包括布局、字体、颜色和视觉样式</li><li>JavaScript 通过操作 DOM 增加一层动态功能</li></ul><p>JavaScript 可以触发页面上的更改并显示新信息。这意味着前端可以处理基本的用户交互（或请求），例如显示日历或检查用户是否输入有效的电子邮件地址。前端将更复杂的请求传递给后端。</p></blockquote><p>引用自<a href="https://aws.amazon.com/cn/compare/the-difference-between-frontend-and-backend/">AWS</a></p><h2 id="后端的工作原理"><a href="#后端的工作原理" class="headerlink" title="后端的工作原理"></a>后端的工作原理</h2><blockquote><p>应用程序的后端有时称为服务器端，用于管理 Web 应用程序的整体功能。当用户与前端交互时，此交互会以 HTTP 格式向后端发送请求。后端处理请求并返回响应。</p><p>后端处理请求时，它通常会与以下组件进行交互：</p><ul><li>用于检索或修改相关数据的数据库服务器</li><li>执行用户所请求任务子集的微服务</li><li>用于收集额外信息或执行其他功能的第三方 API</li></ul><p>后端使用多种通信协议和技术来完成请求。此外，后端还能同时处理数千个不同的请求。后端结合并发和并行技术，例如在多个服务器上分配请求、缓存和数据复制。</p></blockquote><p><img src="https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2020/08/12/happy-path8.png"></p><p>引用自<a href="https://aws.amazon.com/cn/compare/the-difference-between-frontend-and-backend/">AWS</a></p><h2 id="前后端区别摘要"><a href="#前后端区别摘要" class="headerlink" title="前后端区别摘要"></a>前后端区别摘要</h2><table><thead><tr><th></th><th>前端</th><th>后端</th></tr></thead><tbody><tr><td>技术</td><td>前端使用 HTML、CSS、JavaScript 和前端框架。</td><td>后端使用 Java、Python、Ruby、API 和数据库管理系统等编程语言。</td></tr><tr><td>并发</td><td>每位用户都有自己的应用程序副本，因此前端不必处理并发问题。</td><td>后端使用多种策略同时处理成千上万的用户请求。</td></tr><tr><td>缓存</td><td>浏览器或客户端应用程序缓存应用程序中的文件并使用它们来提高性能。</td><td>后端系统在不同的服务器或 CDN 中缓存文件。</td></tr><tr><td>安全性</td><td>主要由用户负责前端开发中的安全性。前端开发人员主要关注用户输入验证和用户身份验证工作流程。</td><td>后端开发中的安全性更加全面，可以保护数据库、后端服务和应用程序本身。使用加密、安全身份验证系统和安全编码实践实现此安全性。</td></tr><tr><td>开发目标</td><td>前端开发侧重于创建功能齐全、响应迅速且设计良好的用户界面。</td><td>后端开发涉及创建支持前端开发的可靠架构。</td></tr><tr><td>开发技能</td><td>前端开发人员知悉 HTML、CSS 和 JavaScript。他们可以使用前端框架并创建具有视觉吸引力的页面。他们解决用户在与应用程序交互时面临的痛点。</td><td>后端开发人员具有编码和数据库管理技能。他们还了解代码安全性以及如何使用应用程序开发工具、平台和框架。</td></tr></tbody></table><h2 id="前后端主要区别"><a href="#前后端主要区别" class="headerlink" title="前后端主要区别"></a>前后端主要区别</h2><p>前端和后端是宽泛的术语，在逻辑上对任何应用程序的不同技术和软件层进行分组。前端侧重于用户可以看到的方面。相反，后端是使应用程序正常运行的一切方面。</p><p>可以将前端视为汽车的外部，将后端视为汽车内部的所有机械。只有内部机械正常运作，设计精良的汽车才能以最佳状态运行。但是，外观设计的某些方面也有助于提高汽车速度和性能。同样，应用程序的前端和后端必须经过紧密的设计才能获得最佳结果。</p><p>接下来，我们讨论前端和后端之间的其他关键区别。</p><p><img src="https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2022/06/15/Microservices-backend-with-the-micro-frontends.jpg"></p><h3 id="开发目标"><a href="#开发目标" class="headerlink" title="开发目标"></a>开发目标</h3><p>全栈开发旨在创建响应迅速、高效和功能齐备的应用程序。前端和后端开发人员在创建最终应用程序方面有不同的目标。</p><p>前端开发人员的目标是开发积极的用户体验，优化应用程序的可访问性和性能，以及创建响应式设计。他们的主要开发目标是确保前端易于交互、设计精良且在不同的平台和设备上完全响应。</p><p>后端开发人员构建并维护应用程序的服务器端操作。他们的主要开发目标是创建可靠的架构，以准确、高效地执行应用程序功能。它们旨在满足用户需求，同时符合所有安全和成本考虑事项。</p><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p>前端开发涉及网站面向用户的方面。这些技术包括 JavaScript、CSS 和 HTML 等计算机语言。前端软件开发还使用前端框架来提高生产效率。</p><p>后端开发使用 Ruby、Java 和 Python 等编程语言来编写服务器端逻辑。后端开发人员还使用数据库、存储技术和 API 技术，以便应用程序和系统相互通信。</p><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>并发是指应用程序能够同时运行多个任务。在前端，每位用户在其浏览器或移动应用程序中有着自己的应用程序副本。这意味着前端开发不存在并发问题。</p><p>另一方面，后端可能必须同时处理数千个请求。后端开发人员使用多种策略：</p><ul><li>多线程，用于管理任务的 CPU 处理</li><li>异步编程，例如回调和承诺</li><li>事件驱动的编程，其中后端侦听多个事件并同时运行相应的事件处理程序</li><li>锁定和同步技术，可让多个用户同时访问同一个资源，而不会出现不一致情况</li></ul><p>在分布式计算方法中，开发人员可以将后端任务分配给多个节点，以便后端同时管理数据密集型工作负载。</p><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>缓存会临时存储应用程序文件的副本，这样下次需要时可以更轻松地检索它们。可以使用缓存来缩短应用程序的加载时间和提高性能。</p><p>在前端，浏览器或客户端应用程序会在用户首次访问时缓存标头图像等数据。下次他们访问相同的内容时，前端会加载缓存的文件以提高性能。</p><p>后端开发使用缓存来减少应用程序服务器上的负载。在后端缓存中存储的内容取决于应用程序本身。缓存的内容包括静态页面、数据库查询结果、API 响应、会话数据、图像和视频。</p><p>一种策略是将文件存储在内容分发网络（CDN）上，该网络充当前端和后端之间的中介。每当用户在前端发出请求时，CDN 都会检查数据是否可用并直接响应。</p><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>前端安全侧重于面向用户的组件。其中包括输入表单、客户端脚本以及身份验证等安全工作流程中的用户体验。</p><p>常见的前端开发安全策略包括输入验证、禁用允许用户在文本框中输入代码的设置以及多重身份验证工作流程。用户负责多个前端安全方面，例如保护其密码或设备安全。</p><p>后端安全侧重于存储和传输中的数据安全。后端管理身份验证、访问控制和会话安全的各个方面。它涵盖了所有后端服务，包括连接的数据库、API 和服务器端编程语言。</p><p>核心后端安全实践包括安全编码、在传输前后加密敏感数据以及安全授权和身份验证系统。</p><h3 id="开发人员技能"><a href="#开发人员技能" class="headerlink" title="开发人员技能"></a>开发人员技能</h3><p>前端开发人员了解客户体验并满足用户需求。他们的主要技能包括熟练掌握 JavaScript、CSS 和 HTML，以及在创建具有视觉吸引力的用户流程方面的设计知识。前端开发人员还掌握多个前端框架，并知道如何进行性能优化。</p><p>后端开发人员对应用程序功能进行编码，使应用程序更安全、没有错误切更加快速。后端开发人员精通多种编程语言，如 Python、Ruby、Java 和 PHP。他们了解像 Django、Ruby on Rails 和 Laravel 这样集成前端和后端的应用程序开发框架。后端开发人员还知悉如何管理和设计关系与非关系数据库。</p><p>全栈开发人员拥有前端和后端开发方面的技能。</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发 </tag>
            
            <tag> 前端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发基础（三）- css</title>
      <link href="/blog/post/xy8v73x3.html"/>
      <url>/blog/post/xy8v73x3.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><h3 id="前端开发导航-🌏"><a href="#前端开发导航-🌏" class="headerlink" title="前端开发导航 🌏"></a>前端开发导航 🌏</h3><ol><li><a href="/blog/post/x766a8l8.html" title="前端开发基础（一）- 学习路线">前端开发基础（一）- 学习路线</a></li><li><a href="/blog/post/w2d41vf2.html" title="前端开发基础（二）- html">前端开发基础（二）- html</a></li><li><a href="/blog/post/477194v7.html" title="前端开发基础（四）- typescript">前端开发基础（四）- typescript</a></li><li><a href="/blog/post/xy8v73x3.html" title="前端开发基础（三）- css">前端开发基础（三）- css</a></li><li><a href="/blog/post/8668713v.html" title="前端开发基础（三）- javascript">前端开发基础（三）- javascript</a></li></ol></div><h2 id="CSS-简介"><a href="#CSS-简介" class="headerlink" title="CSS 简介"></a>CSS 简介</h2><p>CSS 代表层叠样式表（Cascading Style Sheets），是一种用来为结构化文档（如 HTML 文档或 XML 应用）添加样式（字体、间距和颜色等）的计算机语言。</p><h2 id="CSS-基本结构"><a href="#CSS-基本结构" class="headerlink" title="CSS 基本结构"></a>CSS 基本结构</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">selector &#123;</span><br><span class="line">  property: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>selector：选择器，用于指定要应用样式的 HTML 元素</li><li>property：属性，定义要设置的样式类型</li><li>value：属性值，指定该属性要应用的具体样式</li></ul><h2 id="CSS-的插入方式"><a href="#CSS-的插入方式" class="headerlink" title="CSS 的插入方式"></a>CSS 的插入方式</h2><ol><li>内联样式：直接在 HTML 元素的 style 属性中编写样式</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: blue;&quot;</span>&gt;</span>Hello,World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>内部样式表：将样式写在 HTML 文档的<code>&lt;style&gt;</code>标签中，通常放在<code>&lt;head&gt;</code>部分中</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>外部样式表：将 CSS 代码写在单独的<code>.css</code>文件中，通过<code>&lt;link&gt;</code>标签引入到 HTML 中</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="推荐的-CSS-学习资源"><a href="#推荐的-CSS-学习资源" class="headerlink" title="推荐的 CSS 学习资源"></a>推荐的 CSS 学习资源</h2><p>课程推荐：</p><p><a href="https://www.w3schools.com/css/default.asp">W3Schools:🛫</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">MDN Web Docs:🛫</a></p><p>项目实践：<br><a href="https://www.freecodecamp.org/learn/">FreeCodeCamp:🛫</a></p><p>❗❗❗ 学习重点 🤔：</p><ol><li><p>选择器（Selectors）</p><ul><li><p><strong>基础选择器</strong>：</p><ul><li>通用选择器（<code>*</code>）：选择所有元素，如 <code>* &#123; margin: 0; &#125;</code></li><li>元素选择器（<code>element</code>）：选择特定 HTML 标签，如 <code>p &#123; font-size: 16px; &#125;</code></li><li>类选择器（<code>.classname</code>）：选择特定类名的元素，如 <code>.btn &#123; padding: 10px; &#125;</code></li><li>ID 选择器（<code>#id</code>）：选择特定 ID 的元素，如 <code>#header &#123; position: fixed; &#125;</code></li></ul></li><li><p><strong>组合选择器</strong>：</p><ul><li>后代选择器（<code>element element</code>）：选择所有后代元素，如 <code>div p &#123; color: blue; &#125;</code></li><li>子选择器（<code>element &gt; element</code>）：仅选择直接子元素，如 <code>ul &gt; li &#123; list-style: none; &#125;</code></li><li>相邻兄弟选择器（<code>element + element</code>）：选择紧接在另一元素后的元素，如 <code>h2 + p &#123; font-weight: bold; &#125;</code></li><li>通用兄弟选择器（<code>element ~ element</code>）：选择同一父元素下的后续兄弟元素，如 <code>h2 ~ p &#123; margin-left: 20px; &#125;</code></li></ul></li><li><p><strong>属性选择器</strong>：</p><ul><li>存在属性选择器（<code>[attribute]</code>）：如 <code>input[required] &#123; border-color: red; &#125;</code></li><li>指定值的属性选择器（<code>[attribute=value]</code>）：如 <code>input[type=&quot;submit&quot;] &#123; background: green; &#125;</code></li><li>部分匹配：开头（<code>[attribute^=&quot;value&quot;]</code>）、结尾（<code>[attribute$=&quot;value&quot;]</code>）、包含（<code>[attribute*=&quot;value&quot;]</code>）</li><li>其他匹配：以空格分隔的值（<code>[attribute~=&quot;value&quot;]</code>）、以连字符分隔的值（<code>[attribute|=&quot;value&quot;]</code>）</li></ul></li><li><p><strong>伪类选择器</strong>：</p><ul><li>状态伪类：<code>:hover</code>、<code>:focus</code>、<code>:active</code>、<code>:visited</code>、<code>:disabled</code></li><li>结构伪类：<code>:first-child</code>、<code>:last-child</code>、<code>:nth-child(n)</code>、<code>:nth-of-type(n)</code>、<code>:empty</code></li><li>表单伪类：<code>:checked</code>、<code>:required</code>、<code>:valid</code>、<code>:invalid</code></li><li>其他伪类：<code>:not()</code>、<code>:is()</code>、<code>:has()</code>（新特性）</li></ul></li><li><p><strong>伪元素选择器</strong>：</p><ul><li><code>::before</code>、<code>::after</code>：创建额外的内容</li><li><code>::first-letter</code>、<code>::first-line</code>：选择首字母和首行</li><li><code>::selection</code>：选择用户选中的文本部分</li><li><code>::marker</code>：修改列表项标记样式</li></ul></li><li><p><strong>选择器优先级计算规则</strong>：</p><ul><li>!important &gt; 内联样式 &gt; ID 选择器 &gt; 类&#x2F;伪类&#x2F;属性选择器 &gt; 元素&#x2F;伪元素选择器 &gt; 通用选择器</li><li>具体计算：(内联, ID 数量, 类&#x2F;伪类&#x2F;属性数量, 元素&#x2F;伪元素数量)</li></ul></li></ul><p><strong>实践技巧</strong>：</p><ul><li>使用更具体的选择器避免过度使用 !important</li><li>利用 CSS 变量和属性选择器减少重复代码</li><li>选择器嵌套不宜超过 3 层，避免性能问题</li><li>使用:is()和:where()简化选择器组</li></ul></li><li><p>盒模型（Box Model）</p><ul><li><p><strong>标准盒模型详解</strong>：</p><ul><li>内容区域（content）：元素的实际内容，宽高由 width&#x2F;height 控制</li><li>内边距（padding）：内容与边框之间的空间，可按上右下左分别设置</li><li>边框（border）：包括宽度、样式和颜色三个属性</li><li>外边距（margin）：元素与周围元素的间距，可为负值</li></ul></li><li><p><strong>盒模型类型</strong>：</p><ul><li>标准盒模型（content-box）：width&#x2F;height 仅包括内容区域</li><li>替代盒模型（border-box）：width&#x2F;height 包括内容区域、padding 和 border</li></ul></li><li><p><strong>盒模型相关属性</strong>：</p><ul><li><code>box-sizing</code>：控制盒模型类型</li><li><code>width</code>&#x2F;<code>height</code>：设置内容区域的宽高</li><li><code>min-width</code>&#x2F;<code>max-width</code>：限制宽度的最小&#x2F;最大值</li><li><code>padding</code>、<code>border</code>、<code>margin</code>：盒模型的三个主要组成部分</li><li><code>box-shadow</code>：添加阴影效果</li><li><code>border-radius</code>：圆角边框</li></ul></li><li><p><strong>外边距合并（Margin Collapse）</strong>：</p><ul><li>垂直相邻的外边距会合并，取较大值</li><li>父子元素的外边距也可能合并</li><li>解决方法：设置 padding&#x2F;border、使用 overflow:hidden、创建 BFC 等</li></ul></li><li><p><strong>内边距百分比特性</strong>：</p><ul><li>内边距的百分比值是基于父元素的宽度计算的，甚至对于 top&#x2F;bottom 也是如此</li></ul></li></ul><p><strong>实践技巧</strong>：</p><ul><li>在全局设置 <code>box-sizing: border-box</code> 使布局更直观</li><li>使用负 margin 实现特殊布局效果</li><li>利用 margin: auto 实现水平居中</li><li>理解并合理利用外边距合并特性</li></ul></li><li><p>布局（Layout）</p><ul><li><p><strong>传统布局技术</strong>：</p><ul><li>浮动（<code>float</code>）：使元素左右浮动，允许文本和内联元素环绕</li><li>清除浮动（<code>clear</code>）：防止元素被浮动元素影响，常用值：left、right、both</li><li>定位（<code>position</code>）：<ul><li><code>static</code>：默认值，元素处于正常文档流</li><li><code>relative</code>：相对于自身正常位置偏移</li><li><code>absolute</code>：相对于最近的已定位祖先元素定位</li><li><code>fixed</code>：相对于视口定位，滚动时保持位置</li><li><code>sticky</code>：根据滚动位置在 relative 和 fixed 之间切换</li></ul></li></ul></li><li><p><strong>Flexbox 布局详解</strong>：</p><ul><li>容器属性：<ul><li><code>display: flex</code>：启用弹性布局</li><li><code>flex-direction</code>：设置主轴方向（row、column 等）</li><li><code>justify-content</code>：主轴对齐方式</li><li><code>align-items</code>：交叉轴对齐方式</li><li><code>flex-wrap</code>：控制项目是否换行</li><li><code>gap</code>：设置项目间距</li></ul></li><li>项目属性：<ul><li><code>flex-grow</code>：增长系数</li><li><code>flex-shrink</code>：收缩系数</li><li><code>flex-basis</code>：基础尺寸</li><li><code>flex</code>：上述三属性的简写</li><li><code>align-self</code>：单个项目的对齐方式</li><li><code>order</code>：项目排列顺序</li></ul></li></ul></li><li><p><strong>Grid 布局详解</strong>：</p><ul><li>容器属性：<ul><li><code>display: grid</code>：启用网格布局</li><li><code>grid-template-columns/rows</code>：定义列&#x2F;行大小</li><li><code>grid-template-areas</code>：命名网格区域</li><li><code>grid-gap</code>：网格间距</li><li><code>grid-auto-flow</code>：自动放置算法</li><li><code>justify/align-content</code>：整体内容对齐方式</li><li><code>justify/align-items</code>：单元格内容对齐方式</li></ul></li><li>项目属性：<ul><li><code>grid-column/row-start/end</code>：指定项目位置</li><li><code>grid-area</code>：指定项目所属区域</li><li><code>justify/align-self</code>：单个项目对齐方式</li></ul></li></ul></li><li><p><strong>特殊布局技术</strong>：</p><ul><li>多列布局（Multi-column Layout）：使用<code>column-count</code>、<code>column-width</code>等</li><li>表格布局（Table Layout）：使用<code>display: table</code>相关属性</li><li>子网格（Subgrid）：让嵌套网格使用父网格的轨道</li><li>容器查询（Container Queries）：基于容器大小而非视口大小设置样式</li></ul></li></ul><p><strong>实践技巧</strong>：</p><ul><li>掌握 CSS Grid <code>fr</code> 单位和 <code>minmax()</code> 函数</li><li>使用 Grid 区域（area）命名实现语义化布局</li><li>Flexbox 适合一维布局，Grid 适合二维布局</li><li>结合 <code>clamp()</code> 函数创建流体响应式布局</li></ul></li><li><p>响应式设计与媒体查询（Responsive Design &amp; Media Queries）</p><ul><li><p><strong>媒体查询语法与用法</strong>：</p><ul><li>基本语法：<code>@media media-type and (media-feature) &#123; /* CSS rules */ &#125;</code></li><li>媒体类型：<code>screen</code>、<code>print</code>、<code>speech</code>、<code>all</code></li><li>媒体特性：<ul><li>视口相关：<code>width</code>、<code>height</code>、<code>min/max-width</code>、<code>min/max-height</code>、<code>aspect-ratio</code></li><li>设备相关：<code>orientation</code>、<code>resolution</code>、<code>hover</code>、<code>pointer</code></li><li>环境相关：<code>prefers-color-scheme</code>、<code>prefers-reduced-motion</code></li></ul></li><li>逻辑操作符：<code>and</code>、<code>not</code>、<code>only</code>、<code>,</code>（或）</li></ul></li><li><p><strong>常见断点设置</strong>：</p><ul><li>移动优先：从小屏幕开始设计，使用 <code>min-width</code> 媒体查询</li><li>桌面优先：从大屏幕开始设计，使用 <code>max-width</code> 媒体查询</li><li>常见断点：<ul><li>手机：&lt; 576px</li><li>平板：576px - 992px</li><li>桌面：&gt; 992px</li><li>超大屏幕：&gt; 1200px</li></ul></li></ul></li><li><p><strong>相对单位系统</strong>：</p><ul><li>相对字体单位：<ul><li><code>em</code>：相对于父元素字体大小</li><li><code>rem</code>：相对于根元素字体大小</li><li><code>ch</code>：相当于”0”字符的宽度</li></ul></li><li>视口相对单位：<ul><li><code>vw</code>&#x2F;<code>vh</code>：视口宽度&#x2F;高度的 1%</li><li><code>vmin</code>&#x2F;<code>vmax</code>：视口宽度和高度中的较小&#x2F;较大值的 1%</li><li><code>dvw</code>&#x2F;<code>dvh</code>：动态视口单位，考虑动态 UI 元素（如移动端地址栏）</li></ul></li><li>容器查询单位（新特性）：<ul><li><code>cqw</code>&#x2F;<code>cqh</code>：容器宽度&#x2F;高度的 1%</li></ul></li></ul></li><li><p><strong>响应式布局策略</strong>：</p><ul><li>弹性网格（Fluid Grid）：使用百分比或 fr 单位</li><li>弹性图片（Fluid Images）：<code>max-width: 100%; height: auto;</code></li><li>响应式排版：使用视口单位和 clamp()函数</li><li>内容优先级：在小屏幕上隐藏次要内容</li></ul></li><li><p><strong>响应式设计模式</strong>：</p><ul><li>流式布局（Mostly Fluid）：多列布局在小屏幕上堆叠</li><li>列下沉（Column Drop）：随着屏幕变窄列逐渐下沉</li><li>布局位移（Layout Shifter）：根据屏幕大小重新排列内容</li><li>画布外导航（Off Canvas）：较小屏幕上将导航放在画布外</li><li>内容优先（Content-first）：根据内容重要性决定显示顺序</li></ul></li></ul><p><strong>实践技巧</strong>：</p><ul><li>使用 CSS 函数实现流体排版：<code>clamp(最小值, 首选值, 最大值)</code></li><li>设计系统时使用响应式单位系统而非固定像素值</li><li>测试多种设备和分辨率，包括平板和触屏设备</li><li>考虑横屏和竖屏模式的布局差异</li></ul></li><li><p>CSS 层叠与继承（Cascading &amp; Inheritance）</p><ul><li><p><strong>层叠（Cascading）详解</strong>：</p><ul><li>确定优先级的因素：<ol><li>重要性（Importance）：<code>!important</code> 声明</li><li>来源（Origin）：用户样式 &gt; 作者样式 &gt; 浏览器样式</li><li>特异性（Specificity）：ID &gt; 类&#x2F;属性&#x2F;伪类 &gt; 元素&#x2F;伪元素</li><li>源码顺序（Source Order）：后定义覆盖先定义</li></ol></li><li>特异性计算公式：(内联样式, ID 数量, 类&#x2F;属性&#x2F;伪类数量, 元素&#x2F;伪元素数量)</li><li>特异性实例：<ul><li><code>#nav .list li a:hover</code> &#x3D; (0,1,2,2)</li><li><code>body div ul li a[href]</code> &#x3D; (0,0,1,5)</li></ul></li></ul></li><li><p><strong>继承（Inheritance）详解</strong>：</p><ul><li>可继承属性：<ul><li>文本属性：<code>color</code>, <code>font-family</code>, <code>font-size</code>, <code>line-height</code> 等</li><li>列表属性：<code>list-style</code>, <code>list-style-type</code> 等</li><li>表格边框属性：<code>border-collapse</code>, <code>border-spacing</code> 等</li></ul></li><li>不可继承属性：<ul><li>盒模型属性：<code>width</code>, <code>height</code>, <code>margin</code>, <code>padding</code>, <code>border</code> 等</li><li>定位属性：<code>position</code>, <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code> 等</li><li>背景属性：<code>background</code>, <code>background-color</code> 等</li></ul></li><li>控制继承的属性值：<ul><li><code>inherit</code>：强制继承父元素的值</li><li><code>initial</code>：重置为属性的初始值</li><li><code>unset</code>：重置为自然值（可继承属性为 inherit，不可继承属性为 initial）</li><li><code>revert</code>：重置为浏览器默认样式</li></ul></li></ul></li><li><p><strong>层叠上下文（Stacking Context）</strong>：</p><ul><li>创建层叠上下文的条件：<ul><li>根元素（<code>&lt;html&gt;</code>）</li><li><code>position</code> 值为 <code>absolute</code> 或 <code>relative</code> 且 <code>z-index</code> 不为 <code>auto</code></li><li><code>position</code> 值为 <code>fixed</code> 或 <code>sticky</code></li><li>flex&#x2F;grid 容器的子元素且 <code>z-index</code> 不为 <code>auto</code></li><li><code>opacity</code> 值小于 1</li><li><code>transform</code>, <code>filter</code>, <code>backdrop-filter</code> 不为 <code>none</code></li></ul></li><li>层叠顺序（从底到顶）：<ol><li>背景和边框</li><li>负 <code>z-index</code></li><li>块级盒子</li><li>浮动盒子</li><li>内联盒子</li><li><code>z-index: 0</code></li><li>正 <code>z-index</code></li></ol></li></ul></li><li><p><strong>层叠层（Cascade Layers，新特性）</strong>：</p><ul><li>使用 <code>@layer</code> 规则创建和使用层叠层</li><li>可以控制整个样式表的优先级顺序</li><li>例如：<code>@layer base, components, utilities;</code></li></ul></li></ul><p><strong>实践技巧</strong>：</p><ul><li>避免过度使用 <code>!important</code>，可能导致维护困难</li><li>使用类选择器而非 ID 选择器提高可重用性</li><li>利用 CSS 变量和继承减少重复代码</li><li>理解层叠上下文解决 z-index 问题</li></ul></li><li><p>动画与过渡（Animations &amp; Transitions）</p><ul><li><p><strong>过渡（Transitions）详解</strong>：</p><ul><li>基本属性：<ul><li><code>transition-property</code>：指定要过渡的 CSS 属性</li><li><code>transition-duration</code>：过渡持续时间</li><li><code>transition-timing-function</code>：过渡速度曲线</li><li><code>transition-delay</code>：过渡延迟时间</li><li><code>transition</code>：简写属性</li></ul></li><li>常用速度曲线：<ul><li><code>ease</code>：默认，慢-快-慢</li><li><code>linear</code>：匀速</li><li><code>ease-in</code>：慢-快</li><li><code>ease-out</code>：快-慢</li><li><code>ease-in-out</code>：慢-快-慢，但比 ease 更剧烈</li><li><code>cubic-bezier(n,n,n,n)</code>：自定义贝塞尔曲线</li><li><code>steps(n, jump-type)</code>：阶跃函数</li></ul></li><li>可过渡的属性：颜色、尺寸、位置、透明度等，不包括<code>display</code>属性</li></ul></li><li><p><strong>动画（Animations）详解</strong>：</p><ul><li>关键帧规则：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> animationName &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="comment">/* styles */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="comment">/* styles */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="comment">/* styles */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>动画属性：<ul><li><code>animation-name</code>：指定关键帧名称</li><li><code>animation-duration</code>：一个周期持续时间</li><li><code>animation-timing-function</code>：速度曲线</li><li><code>animation-delay</code>：开始延迟</li><li><code>animation-iteration-count</code>：播放次数（可用<code>infinite</code>）</li><li><code>animation-direction</code>：方向（normal、reverse、alternate、alternate-reverse）</li><li><code>animation-fill-mode</code>：动画前后样式（none、forwards、backwards、both）</li><li><code>animation-play-state</code>：运行状态（running、paused）</li><li><code>animation</code>：简写属性</li></ul></li></ul></li><li><p><strong>高级动画技术</strong>：</p><ul><li>帧动画：使用<code>steps()</code>函数创建逐帧动画</li><li>视差效果：多层元素以不同速度移动</li><li>路径动画：沿 SVG 路径移动元素</li><li>3D 变换：使用<code>perspective</code>和<code>transform-style: preserve-3d</code></li><li>Web Animations API：使用 JavaScript 控制复杂动画</li></ul></li><li><p><strong>性能优化</strong>：</p><ul><li>优先使用<code>transform</code>和<code>opacity</code>属性</li><li>使用<code>will-change</code>属性提示浏览器（谨慎使用）</li><li>避免同时动画过多元素</li><li>使用<code>requestAnimationFrame</code>替代 setTimeout&#x2F;setInterval</li><li>使用硬件加速（transform: translateZ(0)或 will-change: transform）</li></ul></li></ul><p><strong>实践技巧</strong>：</p><ul><li>使用 CSS 变量动态控制动画参数</li><li>结合媒体查询提供 reduced-motion 选项</li><li>使用 animation-play-state 控制动画暂停&#x2F;播放</li><li>避免触发页面重排的属性动画</li></ul></li><li><p>常用 CSS 属性</p><ul><li><p><strong>文本与排版</strong>：</p><ul><li><code>font-family</code>：字体系列，如 <code>Arial, sans-serif</code></li><li><code>font-size</code>：字体大小，可用 <code>px</code>, <code>em</code>, <code>rem</code> 等单位</li><li><code>font-weight</code>：字体粗细，如 <code>normal</code>, <code>bold</code>, <code>700</code></li><li><code>font-style</code>：字体样式，如 <code>normal</code>, <code>italic</code></li><li><code>line-height</code>：行高，可用无单位数值（乘以字体大小）</li><li><code>text-align</code>：文本对齐，如 <code>left</code>, <code>right</code>, <code>center</code>, <code>justify</code></li><li><code>text-decoration</code>：文本装饰，如 <code>none</code>, <code>underline</code></li><li><code>text-transform</code>：文本转换，如 <code>uppercase</code>, <code>lowercase</code></li><li><code>letter-spacing</code>&#x2F;<code>word-spacing</code>：字符&#x2F;单词间距</li><li><code>white-space</code>：空白处理，如 <code>normal</code>, <code>nowrap</code>, <code>pre</code></li><li><code>overflow-wrap</code>&#x2F;<code>word-break</code>：控制文本如何换行</li></ul></li><li><p><strong>背景与边框</strong>：</p><ul><li><code>background-color</code>：背景颜色</li><li><code>background-image</code>：背景图像，如 <code>url(image.jpg)</code>, <code>linear-gradient()</code></li><li><code>background-position</code>：背景位置</li><li><code>background-size</code>：背景尺寸，如 <code>cover</code>, <code>contain</code></li><li><code>background-repeat</code>：背景重复方式</li><li><code>background-attachment</code>：背景固定方式，如 <code>scroll</code>, <code>fixed</code></li><li><code>background</code>：简写属性</li><li><code>border-width</code>&#x2F;<code>-style</code>&#x2F;<code>-color</code>：边框宽度&#x2F;样式&#x2F;颜色</li><li><code>border-radius</code>：圆角边框</li><li><code>box-shadow</code>：盒阴影</li><li><code>outline</code>：轮廓，不占空间</li></ul></li><li><p><strong>显示与可见性</strong>：</p><ul><li><code>display</code>：显示类型<ul><li>块级：<code>block</code>, <code>flex</code>, <code>grid</code></li><li>内联：<code>inline</code>, <code>inline-block</code>, <code>inline-flex</code></li><li>表格：<code>table</code>, <code>table-cell</code></li><li>其他：<code>none</code>, <code>contents</code></li></ul></li><li><code>visibility</code>：可见性，如 <code>visible</code>, <code>hidden</code>（占位）</li><li><code>opacity</code>：不透明度，0-1</li><li><code>z-index</code>：堆叠顺序</li><li><code>overflow</code>：内容溢出处理，如 <code>visible</code>, <code>hidden</code>, <code>scroll</code>, <code>auto</code></li><li><code>clip-path</code>：裁剪元素可见区域</li></ul></li><li><p><strong>定位与尺寸</strong>：</p><ul><li><code>position</code>：定位方式</li><li><code>top</code>&#x2F;<code>right</code>&#x2F;<code>bottom</code>&#x2F;<code>left</code>：定位偏移</li><li><code>width</code>&#x2F;<code>height</code>：元素宽高</li><li><code>min-width</code>&#x2F;<code>max-width</code>：最小&#x2F;最大宽度</li><li><code>min-height</code>&#x2F;<code>max-height</code>：最小&#x2F;最大高度</li><li><code>aspect-ratio</code>：宽高比（新特性）</li><li><code>object-fit</code>：替换元素如何填充容器</li><li><code>resize</code>：允许用户调整元素大小</li></ul></li></ul><p><strong>实践技巧</strong>：</p><ul><li>使用 CSS 函数如<code>min()</code>, <code>max()</code>, <code>clamp()</code>控制尺寸</li><li>善用<code>calc()</code>函数进行动态计算</li><li>理解和灵活运用<code>display</code>属性的不同值</li><li>掌握背景属性的组合使用创建复杂效果</li></ul></li><li><p>CSS 变量（Custom Properties）</p><ul><li><p><strong>基础用法</strong>：</p><ul><li>声明变量：<code>--variable-name: value;</code></li><li>使用变量：<code>var(--variable-name, fallback-value)</code></li><li>全局变量：定义在<code>:root&#123;&#125;</code>选择器中</li><li>局部变量：定义在特定选择器中</li></ul></li><li><p><strong>变量继承与作用域</strong>：</p><ul><li>CSS 变量遵循 DOM 树继承</li><li>子元素可以重新定义父元素的变量</li><li>媒体查询中可重新定义变量值</li><li>伪类状态可改变变量（如<code>:hover</code>）</li></ul></li><li><p><strong>动态性与响应式</strong>：</p><ul><li>结合媒体查询实现响应式设计</li><li>使用 JavaScript 动态修改：<code>element.style.setProperty(&#39;--var&#39;, value)</code></li><li>基于用户交互改变变量（主题切换）</li><li>使用<code>calc()</code>结合变量创建动态值</li></ul></li><li><p><strong>高级用法</strong>：</p><ul><li>变量组合：一个变量引用另一个变量</li><li>条件变量：利用回退值实现条件逻辑</li><li>变量在<code>@keyframes</code>中的应用</li><li>CSS Houdini：自定义属性类型和转换</li></ul></li></ul><p><strong>实践技巧</strong>：</p><ul><li>创建设计令牌（Design Tokens）系统</li><li>实现亮&#x2F;暗主题切换</li><li>结合媒体查询实现响应式变量</li><li>使用 DevTools 调试和修改 CSS 变量</li></ul></li><li><p>性能优化</p><ul><li><p><strong>选择器优化</strong>：</p><ul><li>避免深层嵌套选择器（不超过 3 层）</li><li>降低选择器特异性，便于覆盖</li><li>减少通用选择器（<code>*</code>）的使用</li><li>避免过度使用后代选择器（空格）</li><li>优先使用类选择器而非属性选择器</li></ul></li><li><p><strong>渲染性能</strong>：</p><ul><li>重排（Reflow）：改变元素位置和大小触发<ul><li>高成本操作，尽量避免</li><li>触发属性：width&#x2F;height, padding, margin, display, position 等</li></ul></li><li>重绘（Repaint）：改变元素外观触发<ul><li>成本低于重排</li><li>触发属性：color, background, visibility, box-shadow 等</li></ul></li><li>合成（Composite Only）：最佳性能<ul><li>只使用 transform 和 opacity 实现动画</li><li>使用 will-change 或 transform: translateZ(0)提示浏览器</li></ul></li></ul></li><li><p><strong>CSS 文件优化</strong>：</p><ul><li>压缩 CSS 文件（移除空白和注释）</li><li>合并多个 CSS 文件减少 HTTP 请求</li><li>使用简写属性（如 padding 代替四个方向）</li><li>减少@import 使用（会阻塞渲染）</li><li>移除未使用的 CSS（PurgeCSS, UnCSS）</li></ul></li><li><p><strong>关键渲染路径优化</strong>：</p><ul><li>提取关键 CSS 内联到<head>中</li><li>非关键 CSS 使用异步加载</li><li>媒体查询分离移动端和桌面端样式</li><li>使用 preload, prefetch 预加载资源</li></ul></li><li><p><strong>图像和字体优化</strong>：</p><ul><li>使用适当图像格式（WebP, SVG）</li><li>响应式图像（srcset, picture 元素）</li><li>图像延迟加载（lazy loading）</li><li>使用 font-display 控制字体加载行为</li><li>使用系统字体减少加载</li></ul></li></ul><p><strong>实践技巧</strong>：</p><ul><li>使用 Performance 面板和 Lighthouse 测量性能</li><li>优先考虑移动设备性能</li><li>模拟低速网络测试加载性能</li><li>使用 CSS 分层加载策略（FOUC 和 FOIT）</li></ul></li><li><p>CSS 新特性</p><ul><li><p><strong>逻辑属性与值</strong>：</p><ul><li>替代物理方向的属性：<ul><li><code>margin-inline</code>&#x2F;<code>-block</code>代替 left&#x2F;right&#x2F;top&#x2F;bottom</li><li><code>padding-inline</code>&#x2F;<code>-block</code>同上</li><li><code>border-inline</code>&#x2F;<code>-block</code>同上</li><li><code>inset-inline</code>&#x2F;<code>-block</code>用于定位</li></ul></li><li>逻辑值：<ul><li><code>float: inline-start/inline-end</code></li><li><code>text-align: start/end</code></li></ul></li><li>书写模式支持：<code>writing-mode</code>, <code>direction</code></li></ul></li><li><p><strong>容器查询</strong>：</p><ul><li>基于容器尺寸而非视口的响应式设计</li><li>语法：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@container</span> (<span class="attribute">min-width</span>: <span class="number">400px</span>) &#123;</span><br><span class="line">  <span class="comment">/* 样式规则 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>容器设置：<code>container-type: size;</code></li><li>命名容器：<code>container-name: sidebar;</code></li><li>容器查询单位：<code>cqw</code>, <code>cqh</code>, <code>cqi</code>, <code>cqb</code></li></ul></li><li><p><strong>CSS 嵌套</strong>：</p><ul><li>原生支持选择器嵌套（类似 Sass）：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  &amp; <span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>颜色函数与空间</strong>：</p><ul><li>新颜色空间：<code>lab()</code>, <code>lch()</code>, <code>oklch()</code></li><li>相对颜色：<code>color-mix()</code>, <code>color-contrast()</code></li><li>颜色调整：<code>color-adjust()</code></li><li>视觉对比支持：宽色域与 P3 色域</li></ul></li><li><p><strong>滚动捕捉与动画</strong>：</p><ul><li>滚动捕捉：<code>scroll-snap-type</code>, <code>scroll-snap-align</code></li><li>滚动行为：<code>scroll-behavior: smooth</code></li><li>滚动进度动画：<code>scroll-timeline</code>, <code>view-timeline</code></li><li>滚动链接：<code>overscroll-behavior</code></li></ul></li><li><p><strong>CSS Houdini API</strong>：</p><ul><li>Paint API：自定义绘制</li><li>Layout API：自定义布局</li><li>Animation API：自定义动画</li><li>Typed OM：类型化对象模型</li></ul></li><li><p><strong>可访问性增强</strong>：</p><ul><li>强制颜色：<code>forced-colors</code> 媒体查询</li><li>减少动画：<code>prefers-reduced-motion</code></li><li>高对比度：<code>prefers-contrast</code></li><li>透明度调整：<code>accent-color</code></li></ul></li></ul><p><strong>实践技巧</strong>：</p><ul><li>使用 Caniuse 和 MDN 检查浏览器支持情况</li><li>采用渐进增强策略，提供回退方案</li><li>使用<code>@supports</code>检测特性支持</li><li>关注 Web 平台状态了解即将到来的特性</li></ul></li></ol><script src='/js/series.js'></script>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发基础（二）- html</title>
      <link href="/blog/post/w2d41vf2.html"/>
      <url>/blog/post/w2d41vf2.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><h3 id="前端开发导航-🌏"><a href="#前端开发导航-🌏" class="headerlink" title="前端开发导航 🌏"></a>前端开发导航 🌏</h3><ol><li><a href="/blog/post/x766a8l8.html" title="前端开发基础（一）- 学习路线">前端开发基础（一）- 学习路线</a></li><li><a href="/blog/post/w2d41vf2.html" title="前端开发基础（二）- html">前端开发基础（二）- html</a></li><li><a href="/blog/post/477194v7.html" title="前端开发基础（四）- typescript">前端开发基础（四）- typescript</a></li><li><a href="/blog/post/xy8v73x3.html" title="前端开发基础（三）- css">前端开发基础（三）- css</a></li><li><a href="/blog/post/8668713v.html" title="前端开发基础（三）- javascript">前端开发基础（三）- javascript</a></li></ol></div><h2 id="HTML-简介"><a href="#HTML-简介" class="headerlink" title="HTML 简介"></a>HTML 简介</h2><p>HTML 代表超文本标记语言（Hyper Text Markup Language），是用于创建网页的标准标记语言。它描述了网页的结构，定义了各种元素及其内容。HTML 使用标签（tags）来标记网页内容，每个标签通常由尖括号包围，例如<code>&lt;tags&gt;</code>。</p><h2 id="HTML-基础结构"><a href="#HTML-基础结构" class="headerlink" title="HTML 基础结构"></a>HTML 基础结构</h2><p>一个简单的 HTML 文件通常包含以下基本结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>示例网页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎来到我的网页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;!DOCTYPE html&gt;</code>: 声明文档类型为 HTML5。</li><li><code>&lt;html&gt;</code>: HTML 文档的根元素。</li><li><code>&lt;head&gt;</code>: 包含有关文档的信息（例如标题和元数据）。</li><li><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>: 定义文档的字符编码。</li><li><code>&lt;title&gt;</code>: 网页标题，在浏览器标签中显示。</li><li><code>&lt;body&gt;</code>: 包含网页的可见内容。</li></ul><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><p>标题标签用于定义不同级别的标题，从 <code>&lt;h1&gt;</code>（最高级别）到 <code>&lt;h6&gt;</code>（最低级别）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h3><p>段落标签用于定义文本段落。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h3><p>链接标签用于创建超链接。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.example.com&quot;</span>&gt;</span>点击这里访问示例网站<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h3><p>图像标签用于在网页上插入图片。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><p>有序列表和无序列表用于组织项目列表。</p><p>无序列表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有序列表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><p>表格标签用于创建表格。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>28<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>32<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><p>表单标签用于创建用户输入表单。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/submit&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>姓名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="推荐的-HTML-学习资源"><a href="#推荐的-HTML-学习资源" class="headerlink" title="推荐的 HTML 学习资源"></a>推荐的 HTML 学习资源</h2><p>课程推荐：</p><p><a href="https://www.w3schools.com/html/default.asp">W3Schools:🛫</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML">MDN Web Docs:🛫</a></p><p>项目实践：<br><a href="https://www.freecodecamp.org/learn/">FreeCodeCamp:🛫</a></p><p>❗❗❗学习重点🤔：</p><ol><li><p>理解 HTML 文档结构</p><ul><li><strong>DOCTYPE 声明</strong>: 确保你的 HTML 文件以 <code>&lt;!DOCTYPE html&gt;</code> 开头，这表明该文档是 HTML5 标准。<ul><li>历史上有不同版本的 DOCTYPE，但现代开发几乎都使用 HTML5 的简化声明</li><li>缺少正确的 DOCTYPE 可能导致浏览器进入”怪异模式”，影响页面渲染</li></ul></li><li><strong>HTML 文档的基本结构</strong>: 理解 <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, 和 <code>&lt;body&gt;</code> 标签的作用和用途。<ul><li><code>&lt;html&gt;</code> 元素应包含 <code>lang</code> 属性，如 <code>&lt;html lang=&quot;zh-CN&quot;&gt;</code>，有助于辅助技术和搜索引擎</li><li><code>&lt;head&gt;</code> 包含元数据，不会直接显示在页面上</li><li><code>&lt;body&gt;</code> 包含所有可见内容，是用户交互的主要区域</li></ul></li></ul></li><li><p>学习常用标签</p><ul><li><strong>标题标签 (<code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code>)</strong>: 用于定义标题的层次结构。<ul><li>每个页面应只有一个 <code>&lt;h1&gt;</code> 标签，代表页面的主要主题</li><li>标题应形成合理的层级关系，不要跳过级别（如从 h1 直接到 h3）</li><li>标题对搜索引擎优化和可访问性至关重要</li></ul></li><li><strong>段落标签 (<code>&lt;p&gt;</code>)</strong>: 用于定义段落。<ul><li>浏览器会自动在段落前后添加一定的间距</li><li>避免使用空段落创建空间，应使用 CSS 处理间距</li></ul></li><li><strong>链接标签 (<code>&lt;a&gt;</code>)</strong>: 用于创建超链接，理解 <code>href</code> 属性的使用。<ul><li>外部链接应考虑添加 <code>target=&quot;_blank&quot;</code> 和 <code>rel=&quot;noopener noreferrer&quot;</code> 属性</li><li>使用描述性的链接文本，而非”点击这里”等不明确表述</li><li>锚点链接可用于页面内导航，如 <code>&lt;a href=&quot;#section1&quot;&gt;跳转到第一部分&lt;/a&gt;</code></li></ul></li><li><strong>图像标签 (<code>&lt;img&gt;</code>)</strong>: 用于插入图片，理解 <code>src</code> 和 <code>alt</code> 属性的使用。<ul><li>总是提供有意义的 <code>alt</code> 属性描述图像内容</li><li>使用 <code>width</code> 和 <code>height</code> 属性可以避免布局偏移</li><li>考虑使用响应式图片技术，如 <code>srcset</code> 和 <code>sizes</code> 属性或 <code>&lt;picture&gt;</code> 元素</li></ul></li><li><strong>列表标签 (<code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code>, <code>&lt;li&gt;</code>)</strong>: 用于创建有序和无序列表。<ul><li>嵌套列表可以创建层级结构</li><li><code>&lt;dl&gt;</code>, <code>&lt;dt&gt;</code>, <code>&lt;dd&gt;</code> 可用于创建描述列表</li><li>列表是导航菜单的理想选择</li></ul></li><li><strong>表格标签 (<code>&lt;table&gt;</code>, <code>&lt;tr&gt;</code>, <code>&lt;th&gt;</code>, <code>&lt;td&gt;</code>)</strong>: 用于创建表格。<ul><li>使用 <code>&lt;thead&gt;</code>, <code>&lt;tbody&gt;</code>, <code>&lt;tfoot&gt;</code> 组织表格结构</li><li>使用 <code>&lt;caption&gt;</code> 为表格添加标题</li><li>使用 <code>colspan</code> 和 <code>rowspan</code> 属性合并单元格</li></ul></li><li><strong>表单标签 (<code>&lt;form&gt;</code>, <code>&lt;input&gt;</code>, <code>&lt;label&gt;</code>, <code>&lt;textarea&gt;</code>, <code>&lt;button&gt;</code>)</strong>: 用于创建用户输入表单。<ul><li>每个输入控件应有相关联的 <code>&lt;label&gt;</code>，通过 <code>for</code> 属性关联</li><li>使用适当的输入类型，如 <code>email</code>, <code>tel</code>, <code>date</code> 等</li><li>使用 <code>required</code> 属性标记必填字段</li><li>添加适当的 <code>placeholder</code> 提示信息</li></ul></li></ul></li><li><p>理解 HTML 属性</p><ul><li><strong>全局属性</strong>: 了解可用于所有 HTML 元素的属性<ul><li><code>class</code>: 为元素分配一个或多个类名，用于 CSS 样式和 JavaScript 选择</li><li><code>id</code>: 为元素分配唯一标识符，每个页面中的 ID 应该是唯一的</li><li><code>data-*</code>: 自定义数据属性，用于存储私有自定义数据</li><li><code>style</code>: 内联 CSS 样式（通常不推荐大量使用）</li></ul></li><li><strong>特定元素属性</strong>: 了解特定元素的独有属性<ul><li>如 <code>&lt;a&gt;</code> 的 <code>href</code>，<code>&lt;img&gt;</code> 的 <code>src</code> 和 <code>alt</code></li><li>表单元素的 <code>name</code>，<code>value</code>，<code>placeholder</code> 等</li><li><strong>布尔属性</strong>: 了解某些属性不需要值</li><li>如 <code>disabled</code>, <code>checked</code>, <code>required</code> 等</li><li>HTML5 允许简写，如 <code>&lt;input required&gt;</code> 而非 <code>&lt;input required=&quot;required&quot;&gt;</code></li></ul></li></ul></li><li><p>学习 HTML5 新元素和语义化标签</p><ul><li><strong>文档结构元素</strong>:<ul><li><code>&lt;header&gt;</code>: 页面或区段的头部</li><li><code>&lt;footer&gt;</code>: 页面或区段的底部</li><li><code>&lt;main&gt;</code>: 文档的主要内容，每个页面应只有一个</li><li><code>&lt;nav&gt;</code>: 导航链接区域</li><li><code>&lt;article&gt;</code>: 独立的、完整的内容块，如博客文章</li><li><code>&lt;section&gt;</code>: 主题相关的内容分组</li><li><code>&lt;aside&gt;</code>: 与主内容相关但可分离的内容，如侧边栏</li></ul></li><li><strong>媒体元素</strong>:<ul><li><code>&lt;audio&gt;</code>: 音频播放器，支持 <code>controls</code>, <code>autoplay</code>, <code>loop</code> 等属性</li><li><code>&lt;video&gt;</code>: 视频播放器，支持多种控制选项</li><li><code>&lt;source&gt;</code>: 为媒体元素提供多种格式选择</li><li><code>&lt;track&gt;</code>: 为媒体元素添加字幕和描述</li></ul></li><li><strong>交互元素</strong>:<ul><li><code>&lt;details&gt;</code> 和 <code>&lt;summary&gt;</code>: 创建可展开&#x2F;折叠的内容区域</li><li><code>&lt;dialog&gt;</code>: 创建对话框或弹出窗口</li><li><code>&lt;progress&gt;</code>: 显示任务完成进度</li><li><code>&lt;meter&gt;</code>: 显示已知范围内的数值</li></ul></li></ul></li><li><p>理解块级元素和内联元素</p><ul><li><strong>块级元素特点</strong>:<ul><li>默认占据父元素的全部宽度</li><li>在垂直方向上一个接一个排列</li><li>可以包含其他块级元素和内联元素</li><li>常见块级元素: <code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;h1&gt;</code>-<code>&lt;h6&gt;</code>, <code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code>, <code>&lt;li&gt;</code>, <code>&lt;table&gt;</code>, <code>&lt;form&gt;</code></li></ul></li><li><strong>内联元素特点</strong>:<ul><li>只占据必要的宽度</li><li>在水平方向上并排排列</li><li>通常不能包含块级元素</li><li>常见内联元素: <code>&lt;span&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;img&gt;</code>, <code>&lt;strong&gt;</code>, <code>&lt;em&gt;</code>, <code>&lt;code&gt;</code>, <code>&lt;time&gt;</code></li></ul></li><li><strong>转换显示类型</strong>:<ul><li>通过 CSS 的 <code>display</code> 属性可以改变元素的默认行为</li><li><code>display: inline-block</code> 结合了两种类型的特点</li><li>HTML5 引入了更多的布局模式，如 <code>flex</code> 和 <code>grid</code></li></ul></li></ul></li><li><p>理解表单及其控件</p><ul><li><strong>表单基础</strong>:<ul><li><code>&lt;form&gt;</code> 的 <code>action</code> 属性定义表单数据的提交地址</li><li><code>method</code> 属性定义提交方法，常用的有 <code>GET</code> 和 <code>POST</code></li><li><code>enctype</code> 属性定义数据编码方式，上传文件需设置为 <code>multipart/form-data</code></li></ul></li><li><strong>文本输入</strong>:<ul><li><code>&lt;input type=&quot;text&quot;&gt;</code>: 单行文本输入</li><li><code>&lt;textarea&gt;</code>: 多行文本输入，使用 <code>rows</code> 和 <code>cols</code> 设置大小</li><li><code>&lt;input type=&quot;password&quot;&gt;</code>: 密码输入，字符会被遮蔽</li></ul></li><li><strong>选择控件</strong>:<ul><li><code>&lt;input type=&quot;checkbox&quot;&gt;</code>: 复选框，可多选</li><li><code>&lt;input type=&quot;radio&quot;&gt;</code>: 单选按钮，同一组中只能选一个</li><li><code>&lt;select&gt;</code> 和 <code>&lt;option&gt;</code>: 下拉选择框</li><li><code>&lt;datalist&gt;</code>: 提供输入建议列表</li></ul></li><li><strong>专用输入类型</strong>:<ul><li><code>&lt;input type=&quot;email&quot;&gt;</code>: 电子邮件输入</li><li><code>&lt;input type=&quot;tel&quot;&gt;</code>: 电话号码输入</li><li><code>&lt;input type=&quot;number&quot;&gt;</code>: 数字输入</li><li><code>&lt;input type=&quot;date&quot;&gt;</code>, <code>&lt;input type=&quot;time&quot;&gt;</code>: 日期和时间选择器</li><li><code>&lt;input type=&quot;color&quot;&gt;</code>: 颜色选择器</li><li><code>&lt;input type=&quot;file&quot;&gt;</code>: 文件上传</li></ul></li><li><strong>提交控件</strong>:<ul><li><code>&lt;input type=&quot;submit&quot;&gt;</code>: 提交表单的按钮</li><li><code>&lt;input type=&quot;reset&quot;&gt;</code>: 重置表单的按钮</li><li><code>&lt;button&gt;</code>: 更灵活的按钮元素，可包含 HTML 内容</li></ul></li></ul></li><li><p>学习如何使用注释</p><ul><li><strong>注释基础</strong>:<ul><li>HTML 注释格式为 <code>&lt;!-- 注释内容 --&gt;</code></li><li>注释不会显示在页面上，但可在源代码中查看</li></ul></li><li><strong>注释用途</strong>:<ul><li>解释复杂代码的功能和目的</li><li>临时禁用部分代码进行测试</li><li>标记代码的开始和结束，特别是在复杂结构中</li><li>记录修改历史、作者信息等</li></ul></li><li><strong>注释最佳实践</strong>:<ul><li>保持注释简洁明了</li><li>定期更新注释以反映代码变化</li><li>避免在注释中包含敏感信息</li><li>使用一致的注释风格，便于团队协作</li></ul></li></ul></li><li><p>学习网页的基本布局</p><ul><li><strong>传统布局方法</strong>:<ul><li>使用 <code>&lt;div&gt;</code> 和 CSS 定位创建布局</li><li>使用 CSS 浮动 (<code>float</code>) 创建多列布局</li><li>使用 CSS 定位 (<code>position</code>) 控制元素位置</li></ul></li><li><strong>现代布局技术</strong>:<ul><li>弹性盒布局 (Flexbox): 一维布局模型，适合行或列的布局<ul><li>主轴与交叉轴概念</li><li>使用 <code>justify-content</code>, <code>align-items</code> 等属性控制对齐</li></ul></li><li>网格布局 (Grid): 二维布局模型，适合复杂的网格系统<ul><li>使用 <code>grid-template-columns</code>, <code>grid-template-rows</code> 定义网格结构</li><li>使用 <code>grid-area</code> 放置元素</li></ul></li></ul></li><li><strong>响应式布局</strong>:<ul><li>结合媒体查询 (<code>@media</code>) 调整不同屏幕尺寸的布局</li><li>使用相对单位 (<code>%</code>, <code>em</code>, <code>rem</code>, <code>vw</code>, <code>vh</code>) 而非固定像素</li><li>采用移动优先设计思路</li></ul></li></ul></li><li><p>理解 HTML 实体</p><ul><li><strong>常用 HTML 实体</strong>:<ul><li><code>&amp;lt;</code> 和 <code>&amp;gt;</code>: 小于号 (&lt;) 和大于号 (&gt;)</li><li><code>&amp;amp;</code>: 与符号 (&amp;)</li><li><code>&amp;quot;</code>: 双引号 (“)</li><li><code>&amp;apos;</code>: 单引号 (‘)</li><li><code>&amp;nbsp;</code>: 不间断空格，防止自动换行</li><li><code>&amp;copy;</code>: 版权符号 (©)</li><li><code>&amp;reg;</code>: 注册商标符号 (®)</li><li><code>&amp;trade;</code>: 商标符号 (™)</li></ul></li><li><strong>使用场景</strong>:<ul><li>在 HTML 代码中显示特殊字符</li><li>防止代码被错误解析（如 &lt; 和 &gt; 被误认为标签）</li><li>插入不容易直接输入的符号</li></ul></li><li><strong>实体编码</strong>:<ul><li>使用十进制编码: <code>&amp;#数字;</code></li><li>使用十六进制编码: <code>&amp;#x十六进制数;</code></li><li>如中文汉字”中”: <code>&amp;#20013;</code> 或 <code>&amp;#x4e2d;</code></li></ul></li></ul></li><li><p>学习 HTML 的可访问性</p><ul><li><strong>基本原则</strong>:<ul><li>可感知: 所有信息应能被所有用户感知</li><li>可操作: 界面组件和导航必须可操作</li><li>可理解: 信息和界面操作必须可理解</li><li>健壮: 内容必须足够健壮，能被不同用户代理解释</li></ul></li><li><strong>实践技巧</strong>:<ul><li>使用语义化标签，如 <code>&lt;nav&gt;</code>, <code>&lt;header&gt;</code>, <code>&lt;main&gt;</code> 等</li><li>为所有图像提供有意义的 <code>alt</code> 文本</li><li>使用适当的颜色对比度，确保文本可读性</li><li>确保键盘导航可用，所有交互元素都可通过键盘访问</li><li>为表单元素提供明确的标签和说明</li></ul></li><li><strong>ARIA 角色和属性</strong>:<ul><li>了解 ARIA (Accessible Rich Internet Applications) 规范</li><li>使用 <code>role</code> 属性定义元素的角色，如 <code>role=&quot;navigation&quot;</code></li><li>使用 <code>aria-label</code>, <code>aria-labelledby</code> 提供无障碍标签</li><li>使用 <code>aria-hidden=&quot;true&quot;</code> 隐藏装饰性元素</li><li>使用 <code>aria-expanded</code>, <code>aria-controls</code> 等管理动态内容</li></ul></li></ul></li><li><p>掌握 HTML 验证和调试</p><ul><li><strong>代码验证</strong>:<ul><li>使用 W3C 标记验证服务 (validator.w3.org) 检查 HTML 有效性</li><li>使用集成开发环境 (IDE) 的实时验证功能</li><li>定期验证，保持代码质量</li></ul></li><li><strong>浏览器开发者工具</strong>:<ul><li>使用元素检查器查看和修改 DOM 结构</li><li>使用控制台查看错误和警告信息</li><li>使用网络面板分析资源加载情况</li><li>使用设备模拟器测试响应式设计</li></ul></li><li><strong>常见问题排查</strong>:<ul><li>标签未正确闭合</li><li>属性值未使用引号</li><li>ID 重复使用</li><li>嵌套错误（如块元素嵌套在某些内联元素内）</li><li>特殊字符未使用 HTML 实体</li></ul></li></ul></li><li><p>理解 Meta 标签和 SEO 基础</p><ul><li><strong>核心 Meta 标签</strong>:<ul><li><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>: 定义字符编码</li><li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code>: 响应式设计必要标签</li><li><code>&lt;meta name=&quot;description&quot; content=&quot;...&quot;&gt;</code>: 页面描述，显示在搜索结果中</li><li><code>&lt;meta name=&quot;keywords&quot; content=&quot;...&quot;&gt;</code>: 关键词（现代搜索引擎已较少依赖）</li><li><code>&lt;meta name=&quot;author&quot; content=&quot;...&quot;&gt;</code>: 作者信息</li><li><code>&lt;meta name=&quot;robots&quot; content=&quot;index, follow&quot;&gt;</code>: 指导搜索引擎爬虫行为</li></ul></li><li><strong>社交媒体优化</strong>:<ul><li>Open Graph 标签: <code>&lt;meta property=&quot;og:title&quot; content=&quot;...&quot;&gt;</code>，用于 Facebook 等平台</li><li>Twitter Cards: <code>&lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot;&gt;</code>，用于 Twitter 平台</li></ul></li><li><strong>SEO 最佳实践</strong>:<ul><li>使用描述性的标题标签 <code>&lt;title&gt;</code></li><li>合理使用标题标签 (<code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code>)，遵循层次结构</li><li>使用语义化标签增强内容结构</li><li>优化图像，添加适当的 <code>alt</code> 文本</li><li>确保链接使用描述性文本</li><li>创建 XML 站点地图和 robots.txt 文件</li></ul></li></ul></li><li><p>学习响应式设计基础</p><ul><li><strong>视口设置</strong>:<ul><li>使用 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code> 确保移动设备正确显示</li><li>理解 <code>initial-scale</code>, <code>minimum-scale</code>, <code>maximum-scale</code> 和 <code>user-scalable</code> 属性</li></ul></li><li><strong>响应式图像</strong>:<ul><li>使用 <code>srcset</code> 属性提供不同分辨率的图像</li><li>使用 <code>&lt;picture&gt;</code> 元素和 <code>&lt;source&gt;</code> 为不同设备提供不同格式或尺寸的图像</li><li>使用 CSS 控制图像的最大宽度: <code>max-width: 100%; height: auto;</code></li></ul></li><li><strong>结合 CSS 媒体查询</strong>:<ul><li>了解断点设置和常见的屏幕尺寸</li><li>使用 <code>@media</code> 查询针对不同设备应用不同样式</li><li>采用移动优先或桌面优先的设计策略</li></ul></li><li><strong>响应式表格</strong>:<ul><li>在小屏幕上使用水平滚动或改变表格显示方式</li><li>考虑在移动设备上将表格转换为列表或卡片形式</li></ul></li></ul></li><li><p>掌握 HTML 与其他技术的集成</p><ul><li><strong>HTML 与 CSS</strong>:<ul><li>使用外部样式表: <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt;</code></li><li>了解内部样式表: <code>&lt;style&gt;</code> 元素</li><li>了解内联样式: <code>style</code> 属性（尽量避免过度使用）</li><li>使用 CSS 类和 ID 选择器定位元素</li></ul></li><li><strong>HTML 与 JavaScript</strong>:<ul><li>引入外部脚本: <code>&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;</code></li><li>了解内部脚本: <code>&lt;script&gt;</code> 元素</li><li>使用 <code>defer</code> 和 <code>async</code> 属性优化脚本加载</li><li>DOM 操作基础: 选择元素、修改内容、添加事件监听器</li></ul></li><li><strong>嵌入第三方内容</strong>:<ul><li>使用 <code>&lt;iframe&gt;</code> 嵌入外部页面（注意安全风险）</li><li>嵌入地图: Google Maps, Baidu Maps 等</li><li>嵌入社交媒体内容: Twitter 推文, YouTube 视频等</li><li>嵌入数据可视化和图表</li></ul></li><li><strong>API 集成基础</strong>:<ul><li>了解如何使用 HTML 表单向 API 发送数据</li><li>理解 AJAX 和 Fetch API 的基本工作原理</li><li>服务器发送事件 (Server-Sent Events) 基础</li></ul></li></ul></li><li><p>了解 HTML 最佳实践</p><ul><li><strong>代码风格和格式</strong>:<ul><li>使用一致的缩进（通常是 2 或 4 个空格）</li><li>使用小写标签和属性名</li><li>属性值使用双引号</li><li>避免不必要的空格和空行</li></ul></li><li><strong>文件组织</strong>:<ul><li>适当的文件命名规范，如使用小写和连字符（例如：about-us.html）</li><li>创建有意义的目录结构（如 css&#x2F;, js&#x2F;, images&#x2F; 等）</li><li>保持路径引用的一致性（相对路径或绝对路径）</li></ul></li><li><strong>代码复用</strong>:<ul><li>创建可重用的 HTML 模板或组件</li><li>使用服务器端包含 (SSI) 或模板引擎</li><li>考虑使用前端框架（如 React, Vue, Angular）管理复杂页面</li></ul></li><li><strong>性能优化</strong>:<ul><li>最小化 HTTP 请求数</li><li>压缩 HTML、CSS 和 JavaScript 文件</li><li>延迟加载非关键资源</li><li>使用 <code>preload</code>, <code>prefetch</code>, <code>preconnect</code> 等资源提示</li></ul></li><li><strong>文档维护</strong>:<ul><li>添加有意义的注释</li><li>定期更新过时内容</li><li>遵循版本控制最佳实践</li><li>创建简明的开发文档</li></ul></li></ul></li></ol><script src='/js/series.js'></script>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发基础（四）- typescript</title>
      <link href="/blog/post/477194v7.html"/>
      <url>/blog/post/477194v7.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><h3 id="前端开发导航-🌏"><a href="#前端开发导航-🌏" class="headerlink" title="前端开发导航 🌏"></a>前端开发导航 🌏</h3><ol><li><a href="/blog/post/x766a8l8.html" title="前端开发基础（一）- 学习路线">前端开发基础（一）- 学习路线</a></li><li><a href="/blog/post/w2d41vf2.html" title="前端开发基础（二）- html">前端开发基础（二）- html</a></li><li><a href="/blog/post/477194v7.html" title="前端开发基础（四）- typescript">前端开发基础（四）- typescript</a></li><li><a href="/blog/post/xy8v73x3.html" title="前端开发基础（三）- css">前端开发基础（三）- css</a></li><li><a href="/blog/post/8668713v.html" title="前端开发基础（三）- javascript">前端开发基础（三）- javascript</a></li></ol></div><h2 id="TypeScript-简介"><a href="#TypeScript-简介" class="headerlink" title="TypeScript 简介"></a>TypeScript 简介</h2><p>TypeScript 是 JavaScript 的超集，添加了静态类型定义和其他高级特性。它由微软开发和维护，旨在提高大型应用程序的开发效率和代码质量。TypeScript 代码最终会被编译成纯 JavaScript，因此可以在任何支持 JavaScript 的平台上运行。</p><h2 id="TypeScript-基本结构"><a href="#TypeScript-基本结构" class="headerlink" title="TypeScript 基本结构"></a>TypeScript 基本结构</h2><p>一个简单的 TypeScript 文件示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义类型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">isActive</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greetUser</span>(<span class="params"><span class="attr">user</span>: <span class="title class_">User</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`你好，<span class="subst">$&#123;user.name&#125;</span>！你今年 <span class="subst">$&#123;user.age&#125;</span> 岁了。`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建符合类型的对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">newUser</span>: <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">  <span class="attr">isActive</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greetUser</span>(newUser));</span><br></pre></td></tr></table></figure><h2 id="TypeScript-的编译过程"><a href="#TypeScript-的编译过程" class="headerlink" title="TypeScript 的编译过程"></a>TypeScript 的编译过程</h2><p>TypeScript 代码需要编译成 JavaScript 才能运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 TypeScript</span></span><br><span class="line">npm install -g typescript</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译 TypeScript 文件</span></span><br><span class="line">tsc main.ts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行编译后的 JavaScript</span></span><br><span class="line">node main.js</span><br></pre></td></tr></table></figure><h2 id="推荐的-TypeScript-学习资源"><a href="#推荐的-TypeScript-学习资源" class="headerlink" title="推荐的 TypeScript 学习资源"></a>推荐的 TypeScript 学习资源</h2><p>课程推荐：</p><p><a href="https://www.typescriptlang.org/zh/docs/">TypeScript 官方文档:🛫</a><br><a href="https://www.w3schools.com/typescript/index.php">W3Schools:🛫</a></p><p>在线练习：<br><a href="https://www.typescriptlang.org/play">TypeScript Playground:🛫</a></p><p>❗❗❗ 学习重点 🤔：</p><ol><li><p>基本类型系统</p><ul><li><p><strong>原始类型</strong>：</p><ul><li><code>number</code>：所有数值类型，包括整数和浮点数</li><li><code>string</code>：文本字符串类型</li><li><code>boolean</code>：真&#x2F;假值（true&#x2F;false）</li><li><code>null</code> 和 <code>undefined</code>：表示空值或未定义</li><li><code>symbol</code>：唯一且不可变的值，常用作对象属性的键</li><li><code>bigint</code>：表示任意精度的整数</li></ul></li><li><p><strong>复杂类型</strong>：</p><ul><li><code>object</code>：表示所有非原始类型</li><li><code>Array&lt;T&gt;</code> 或 <code>T[]</code>：数组类型，如 <code>number[]</code> 或 <code>Array&lt;string&gt;</code></li><li><code>tuple</code>：固定长度的数组，每个位置可以有不同类型，如 <code>[string, number]</code></li><li><code>enum</code>：枚举类型，为一组数值赋予有名字的常量</li></ul></li><li><p><strong>特殊类型</strong>：</p><ul><li><code>any</code>：任意类型，跳过类型检查（应谨慎使用）</li><li><code>unknown</code>：未知类型，比 any 更安全，需要类型检查后才能使用</li><li><code>void</code>：通常用于表示函数没有返回值</li><li><code>never</code>：表示永远不会发生的值的类型</li></ul></li><li><p><strong>类型注解与推断</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型注解</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型推断</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">25</span>; <span class="comment">// 自动推断为 number 类型</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>接口与类型别名</p><ul><li><p><strong>接口定义</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">sayHello</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>可选与只读属性</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">id</span>: <span class="built_in">string</span>; <span class="comment">// 只读属性</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  description?: <span class="built_in">string</span>; <span class="comment">// 可选属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>类型别名</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">ID</span> = <span class="built_in">string</span> | <span class="built_in">number</span>; <span class="comment">// 联合类型</span></span><br></pre></td></tr></table></figure></li><li><p><strong>接口与类型别名的区别</strong>：</p><ul><li>接口可以被扩展和实现，适用于描述对象形状</li><li>类型别名更适合复杂类型组合，如联合类型、交叉类型等</li><li>接口可以合并声明，类型别名不能</li></ul></li></ul></li><li><p>函数类型</p><ul><li><p><strong>函数类型定义</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数类型注解</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数类型表达式</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">calculate</span>: <span class="function">(<span class="params"><span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口定义函数类型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MathFunc</span> &#123;</span><br><span class="line">  (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>可选参数与默认值</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, greeting?: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;greeting || <span class="string">&quot;你好&quot;</span>&#125;</span>, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span> = <span class="number">1</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>剩余参数</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...<span class="attr">numbers</span>: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, n</span>) =&gt;</span> total + n, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>函数重载</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重载签名</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">process</span>(<span class="params"><span class="attr">x</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">process</span>(<span class="params"><span class="attr">x</span>: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">process</span>(<span class="params"><span class="attr">x</span>: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="built_in">number</span> | <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x.<span class="title function_">repeat</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>类与面向对象编程</p><ul><li><p><strong>类的基本结构</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方法</span></span><br><span class="line">  <span class="title function_">greet</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`你好，我是 <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>访问修饰符</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>; <span class="comment">// 公共，默认</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">salary</span>: <span class="built_in">number</span>; <span class="comment">// 私有，仅在类内可访问</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="attr">department</span>: <span class="built_in">string</span>; <span class="comment">// 受保护，在类内和子类可访问</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">id</span>: <span class="built_in">number</span>; <span class="comment">// 只读属性</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="attr">name</span>: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="attr">salary</span>: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">    <span class="attr">department</span>: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="attr">id</span>: <span class="built_in">number</span></span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">salary</span> = salary;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">department</span> = department;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = id;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>继承与实现接口</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Employee</span> &#123;</span><br><span class="line">  <span class="attr">reports</span>: <span class="title class_">Employee</span>[];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="attr">name</span>: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="attr">salary</span>: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">    <span class="attr">department</span>: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="attr">id</span>: <span class="built_in">number</span></span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name, salary, department, id);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reports</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Printable</span> &#123;</span><br><span class="line">  <span class="title function_">print</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Document</span> <span class="keyword">implements</span> <span class="title class_">Printable</span> &#123;</span><br><span class="line">  <span class="title function_">print</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打印文档&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>静态成员与抽象类</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态成员</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MathUtils</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="attr">PI</span>: <span class="built_in">number</span> = <span class="number">3.14159</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">calculateCircleArea</span>(<span class="attr">radius</span>: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">PI</span> * radius * radius;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">calculateArea</span>(): <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">display</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`面积是: <span class="subst">$&#123;<span class="variable language_">this</span>.calculateArea()&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Shape</span> &#123;</span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">radius</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">radius</span> = radius;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">calculateArea</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="variable language_">this</span>.<span class="property">radius</span> * <span class="variable language_">this</span>.<span class="property">radius</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>高级类型</p><ul><li><p><strong>联合类型与交叉类型</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 联合类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">ID</span> = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printID</span>(<span class="params"><span class="attr">id</span>: ID</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`ID: <span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交叉类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Employee</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Manager</span> = &#123;</span><br><span class="line">  <span class="attr">department</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">reports</span>: <span class="title class_">Employee</span>[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ManagerWithEmployeeInfo</span> = <span class="title class_">Employee</span> &amp; <span class="title class_">Manager</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>类型断言</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 尖括号语法（不在JSX中使用）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">any</span> = <span class="string">&quot;这是一个字符串&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// as 语法</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">someValue2</span>: <span class="built_in">any</span> = <span class="string">&quot;这是另一个字符串&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength2</span>: <span class="built_in">number</span> = (someValue2 <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>类型保护</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// typeof 类型保护</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">process</span>(<span class="params"><span class="attr">value</span>: <span class="built_in">string</span> | <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value.<span class="title function_">toUpperCase</span>(); <span class="comment">// 这里 value 被视为 string</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.<span class="title function_">toFixed</span>(<span class="number">2</span>); <span class="comment">// 这里 value 被视为 number</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// instanceof 类型保护</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;汪汪!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">  <span class="title function_">meow</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;喵喵!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeSound</span>(<span class="params"><span class="attr">animal</span>: <span class="title class_">Dog</span> | <span class="title class_">Cat</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> <span class="title class_">Dog</span>) &#123;</span><br><span class="line">    animal.<span class="title function_">bark</span>(); <span class="comment">// 这里 animal 被视为 Dog</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    animal.<span class="title function_">meow</span>(); <span class="comment">// 这里 animal 被视为 Cat</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>字面量类型和可辨识联合</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字面量类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Direction</span> = <span class="string">&quot;north&quot;</span> | <span class="string">&quot;south&quot;</span> | <span class="string">&quot;east&quot;</span> | <span class="string">&quot;west&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可辨识联合</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="string">&quot;circle&quot;</span>;</span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Square</span> &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="string">&quot;square&quot;</span>;</span><br><span class="line">  <span class="attr">sideLength</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Shape</span> = <span class="title class_">Circle</span> | <span class="title class_">Square</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculateArea</span>(<span class="params"><span class="attr">shape</span>: <span class="title class_">Shape</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (shape.<span class="property">kind</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;circle&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * shape.<span class="property">radius</span> ** <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;square&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> shape.<span class="property">sideLength</span> ** <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>泛型编程</p><ul><li><p><strong>泛型基础</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型函数</span></span><br><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">let</span> output1 = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;myString&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> output2 = <span class="title function_">identity</span>(<span class="number">42</span>); <span class="comment">// 类型推断为 number</span></span><br></pre></td></tr></table></figure></li><li><p><strong>泛型接口与类</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">GenericBox</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">value</span>: T;</span><br><span class="line">  <span class="title function_">getValue</span>(): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">GenericBox</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">value</span>: T;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">value</span>: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getValue</span>(): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>泛型约束</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用接口约束泛型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">HasLength</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> getLength&lt;T <span class="keyword">extends</span> <span class="title class_">HasLength</span>&gt;(<span class="attr">arg</span>: T): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="title function_">getLength</span>(<span class="string">&quot;string&quot;</span>); <span class="comment">// 可以，字符串有length属性</span></span><br><span class="line"><span class="title function_">getLength</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// 可以，数组有length属性</span></span><br><span class="line"><span class="comment">// getLength(123);       // 错误，数字没有length属性</span></span><br></pre></td></tr></table></figure></li><li><p><strong>泛型工具类型</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内置工具类型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将所有属性设为可选</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialPerson</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Person</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将所有属性设为必需</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequiredPerson</span> = <span class="title class_">Required</span>&lt;<span class="title class_">Person</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将所有属性设为只读</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ReadonlyPerson</span> = <span class="title class_">Readonly</span>&lt;<span class="title class_">Person</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取特定属性</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NameOnly</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Person</span>, <span class="string">&quot;name&quot;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排除特定属性</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonWithoutAge</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Person</span>, <span class="string">&quot;age&quot;</span>&gt;;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>模块与命名空间</p><ul><li><p><strong>ES 模块</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"><span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params"><span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; add, subtract &#125; <span class="keyword">from</span> <span class="string">&quot;./math&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">subtract</span>(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li><li><p><strong>命名空间</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名空间（较旧的方式，现代项目推荐使用ES模块）</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Validation</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">StringValidator</span> &#123;</span><br><span class="line">    <span class="title function_">isValid</span>(<span class="attr">s</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">RegexValidator</span> <span class="keyword">implements</span> <span class="title class_">StringValidator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">regex</span>: <span class="title class_">RegExp</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">regex</span>: <span class="title class_">RegExp</span></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">regex</span> = regex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">isValid</span>(<span class="attr">s</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">regex</span>.<span class="title function_">test</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">let</span> emailValidator = <span class="keyword">new</span> <span class="title class_">Validation</span>.<span class="title class_">RegexValidator</span>(</span><br><span class="line">  <span class="regexp">/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]&#123;2,&#125;$/</span></span><br><span class="line">);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(emailValidator.<span class="title function_">isValid</span>(<span class="string">&quot;test@example.com&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p><strong>模块解析策略</strong>：</p><ul><li>Node.js&#x2F;CommonJS 解析</li><li>Classic 解析</li><li>路径映射配置 (tsconfig.json 中的 paths 和 baseUrl)</li></ul></li></ul></li><li><p>声明文件与类型定义</p><ul><li><p><strong><code>.d.ts</code> 文件</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局变量声明</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="attr">VERSION</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局函数声明</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"><span class="attr">url</span>: <span class="built_in">string</span></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局命名空间</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> <span class="title class_">MyLib</span> &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">makeGreeting</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">version</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>第三方库类型声明</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装第三方库类型定义</span></span><br><span class="line">npm install --save-dev @types/lodash</span><br></pre></td></tr></table></figure></li><li><p><strong>模块扩展</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为现有模块添加新功能</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;express&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">Request</span> &#123;</span><br><span class="line">    user?: &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">      <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>编写声明文件的最佳实践</strong>：</p><ul><li>保持类型定义精确</li><li>提供尽可能多的类型信息</li><li>使用 <code>readonly</code> 表示不可变属性</li><li>考虑类型库的可维护性</li></ul></li></ul></li><li><p>TypeScript 编译配置</p><ul><li><p><strong>tsconfig.json 文件</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es6&quot;</span><span class="punctuation">,</span> <span class="comment">// 编译目标 ES 版本</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span> <span class="comment">// 模块系统</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 启用所有严格类型检查选项</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 启用 ES 模块互操作性</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 跳过声明文件的类型检查</span></span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 强制文件名大小写一致</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist&quot;</span><span class="punctuation">,</span> <span class="comment">// 输出目录</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span> <span class="comment">// 源码目录</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/**/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 包含的文件</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules&quot;</span><span class="punctuation">]</span> <span class="comment">// 排除的文件</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>编译选项详解</strong>：</p><ul><li><code>noImplicitAny</code>：不允许隐式的 any 类型</li><li><code>strictNullChecks</code>：启用严格的 null 检查</li><li><code>noImplicitThis</code>：不允许 this 的类型为 any</li><li><code>alwaysStrict</code>：以严格模式解析并为每个源文件生成 “use strict”</li><li><code>sourceMap</code>：生成相应的 .map 文件</li><li><code>declaration</code>：生成相应的 .d.ts 文件</li></ul></li><li><p><strong>项目引用</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;references&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span> <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../common&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>构建工具集成</strong>：</p><ul><li>webpack 与 ts-loader</li><li>Babel 与 @babel&#x2F;preset-typescript</li><li>esbuild 等现代构建工具</li></ul></li></ul></li><li><p>TypeScript 与框架集成</p><ul><li><p><strong>React 与 TypeScript</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数组件</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">GreetingProps</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  count?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Greeting</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">GreetingProps</span>&gt; = <span class="function">(<span class="params">&#123; name, count = <span class="number">1</span> &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Hello, &#123;name&#125;! You&#x27;ve visited &#123;count&#125; times.</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 hooks</span></span><br><span class="line"><span class="keyword">const</span> [state, setState] = <span class="title class_">React</span>.<span class="property">useState</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>Vue 与 TypeScript</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      count.<span class="property">value</span>++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count,</span><br><span class="line">      increment,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>Svelte 与 TypeScript</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  export let message: string;</span><br><span class="line">  let count: number = 0;</span><br><span class="line"></span><br><span class="line">  function increment(): void &#123;</span><br><span class="line">    count += 1;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;&#123;message&#125;&lt;/h1&gt;</span><br><span class="line">&lt;button on:click=&#123;increment&#125;&gt;Clicked &#123;count&#125; times&lt;/button&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>Node.js 与 TypeScript</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> express <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params"><span class="attr">req</span>: express.<span class="title class_">Request</span>, <span class="attr">res</span>: express.<span class="title class_">Response</span></span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;Hello from TypeScript!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server running at http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>高级 TypeScript 技巧</p><ul><li><p><strong>条件类型</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsString</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">string</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A = <span class="title class_">IsString</span>&lt;<span class="built_in">string</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> B = <span class="title class_">IsString</span>&lt;<span class="built_in">number</span>&gt;; <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><strong>映射类型</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Properties</span> = <span class="string">&quot;name&quot;</span> | <span class="string">&quot;age&quot;</span> | <span class="string">&quot;address&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> <span class="title class_">Properties</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="comment">// type User = &#123;</span></span><br><span class="line"><span class="comment">//   name: string;</span></span><br><span class="line"><span class="comment">//   age: string;</span></span><br><span class="line"><span class="comment">//   address: string;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>递归类型</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归类型定义嵌套数组</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NestedArray</span>&lt;T&gt; = <span class="title class_">Array</span>&lt;T | <span class="title class_">NestedArray</span>&lt;T&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">nested</span>: <span class="title class_">NestedArray</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]];</span><br></pre></td></tr></table></figure></li><li><p><strong>模板字面量类型</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">EventName</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="string">`<span class="subst">$&#123;T&#125;</span>Changed`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Events</span> = <span class="title class_">EventName</span>&lt;<span class="string">&quot;name&quot;</span> | <span class="string">&quot;title&quot;</span>&gt;; <span class="comment">// &#x27;nameChanged&#x27; | &#x27;titleChanged&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>infer 关键字</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ReturnType</span>&lt;T&gt; = T <span class="title function_">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]) =&gt; infer R ? R : <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AddReturn</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> add&gt;; <span class="comment">// number</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>TypeScript 与设计模式</p><ul><li><p><strong>单例模式</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="attr">instance</span>: <span class="title class_">Singleton</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">getInstance</span>(): <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Singleton</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">      <span class="title class_">Singleton</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Singleton</span>.<span class="property">instance</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">someMethod</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;方法已被调用&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> instance1 = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>();</span><br><span class="line"><span class="keyword">const</span> instance2 = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1 === instance2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><strong>工厂模式</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">  <span class="title function_">operation</span>(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProduct1</span> <span class="keyword">implements</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">  <span class="title function_">operation</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ConcreteProduct1&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProduct2</span> <span class="keyword">implements</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">  <span class="title function_">operation</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ConcreteProduct2&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">  <span class="title function_">createProduct</span>(<span class="attr">type</span>: <span class="built_in">string</span>): <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">type</span> === <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcreteProduct1</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcreteProduct2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>装饰器模式</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要在 tsconfig.json 中启用 experimentalDecorators</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="attr">target</span>: <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">  <span class="attr">propertyKey</span>: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  <span class="attr">descriptor</span>: <span class="title class_">PropertyDescriptor</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> originalMethod = descriptor.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">  descriptor.<span class="property">value</span> = <span class="keyword">function</span> (<span class="params">...<span class="attr">args</span>: <span class="built_in">any</span>[]</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Calling <span class="subst">$&#123;propertyKey&#125;</span> with:`</span>, args);</span><br><span class="line">    <span class="keyword">const</span> result = originalMethod.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Result:`</span>, result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">  <span class="meta">@log</span></span><br><span class="line">  <span class="title function_">add</span>(<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> calc = <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">calc.<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// Calling add with: [1, 2]</span></span><br><span class="line"><span class="comment">// Result: 3</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><script src='/js/series.js'></script>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发基础（一）- 学习路线</title>
      <link href="/blog/post/x766a8l8.html"/>
      <url>/blog/post/x766a8l8.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><h3 id="前端开发导航-🌏"><a href="#前端开发导航-🌏" class="headerlink" title="前端开发导航 🌏"></a>前端开发导航 🌏</h3><ol><li><a href="/blog/post/x766a8l8.html" title="前端开发基础（一）- 学习路线">前端开发基础（一）- 学习路线</a></li><li><a href="/blog/post/w2d41vf2.html" title="前端开发基础（二）- html">前端开发基础（二）- html</a></li><li><a href="/blog/post/477194v7.html" title="前端开发基础（四）- typescript">前端开发基础（四）- typescript</a></li><li><a href="/blog/post/xy8v73x3.html" title="前端开发基础（三）- css">前端开发基础（三）- css</a></li><li><a href="/blog/post/8668713v.html" title="前端开发基础（三）- javascript">前端开发基础（三）- javascript</a></li></ol></div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于什么是前端，可见<a href="https://lanal.site/blog/post/m514k094.html">前端技术与后端技术之间的区别</a>🤔</p><h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ol><li>计算机网络基础知识<ul><li>HTTP&#x2F;HTTPS 协议</li><li>DNS 解析</li><li>浏览器工作原理</li><li>CDN 内容分发网络</li></ul></li><li>HTML 基础知识<ul><li>语义化标签</li><li>HTML5 新特性</li><li>表单和验证</li><li>SEO 基础</li></ul></li><li>CSS 基础知识<ul><li>盒模型</li><li>选择器和特异性</li><li>Flexbox 布局</li><li>Grid 布局</li><li>响应式设计和媒体查询</li><li>CSS 动画和过渡</li></ul></li><li>JavaScript 基础知识<ul><li>变量、数据类型和运算符</li><li>函数和作用域</li><li>DOM 操作</li><li>事件处理</li><li>Promise 和异步编程</li><li>ES6+ 新特性</li></ul></li></ol><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><ol start="5"><li>Git 版本控制<ul><li>基本操作</li><li>分支管理</li><li>协作工作流</li></ul></li><li>GitHub 等仓库托管服务<ul><li>创建和管理代码仓库</li><li>Pull Request</li><li>Issues 管理</li></ul></li><li>浏览器开发者工具<ul><li>元素检查</li><li>网络监控</li><li>性能分析</li><li>调试技巧</li></ul></li><li>npm&#x2F;yarn 等包管理器<ul><li>依赖管理</li><li>脚本运行</li><li>版本控制</li></ul></li></ol><h3 id="前端进阶"><a href="#前端进阶" class="headerlink" title="前端进阶"></a>前端进阶</h3><ol start="9"><li>CSS 预处理器和框架<ul><li>Sass&#x2F;SCSS&#x2F;Less</li><li>Tailwind CSS&#x2F;Bootstrap</li><li>CSS 模块化</li></ul></li><li>构建工具和模块化<ul><li>Webpack&#x2F;Vite</li><li>Babel</li><li>ESLint&#x2F;Prettier</li></ul></li><li>React，Vue.js 等前端框架<ul><li>组件化开发</li><li>虚拟 DOM</li><li>生命周期</li><li>状态管理(Redux&#x2F;Vuex&#x2F;Pinia)</li><li>路由管理</li></ul></li><li>TypeScript 类型检查器<ul><li>类型定义</li><li>接口和类型别名</li><li>泛型</li><li>高级类型</li></ul></li></ol><h3 id="现代前端技术"><a href="#现代前端技术" class="headerlink" title="现代前端技术"></a>现代前端技术</h3><ol start="13"><li>前端测试<ul><li>单元测试(Jest&#x2F;Vitest)</li><li>组件测试(React Testing Library&#x2F;Vue Test Utils)</li><li>端到端测试(Cypress&#x2F;Playwright)</li></ul></li><li>SSR 服务端渲染<ul><li>Next.js(React)</li><li>Nuxt.js(Vue)</li><li>性能优化</li></ul></li><li>SSG 静态网站生成器<ul><li>Gatsby</li><li>VuePress&#x2F;VitePress</li><li>Astro</li></ul></li><li>Web 性能优化<ul><li>资源加载优化</li><li>代码分割</li><li>懒加载</li><li>缓存策略</li><li>性能指标(Web Vitals)</li></ul></li><li>跨平台开发<ul><li>React Native</li><li>Electron</li><li>小程序开发</li></ul></li><li>PWA 渐进式 Web 应用<ul><li>Service Worker</li><li>Web App Manifest</li><li>离线存储</li></ul></li></ol><h3 id="专业素养"><a href="#专业素养" class="headerlink" title="专业素养"></a>专业素养</h3><ol start="19"><li>网络安全基础知识<ul><li>XSS&#x2F;CSRF 防护</li><li>内容安全策略(CSP)</li><li>HTTPS 原理</li></ul></li><li>Web 无障碍(A11y)<ul><li>ARIA 角色和属性</li><li>键盘导航</li><li>屏幕阅读器适配</li></ul></li><li>国际化(i18n)和本地化(l10n)<ul><li>文本翻译</li><li>日期、货币格式化</li><li>RTL 布局支持</li></ul></li><li>CI&#x2F;CD 和部署<ul><li>自动化构建</li><li>持续集成&#x2F;持续部署</li><li>云服务部署(Vercel&#x2F;Netlify&#x2F;AWS)</li></ul></li></ol><p>详细可见<a href="https://roadmap.sh/frontend">Developer Roadmaps</a></p><script src='/js/series.js'></script>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于按值调用和按引用调用</title>
      <link href="/blog/post/681w71ia.html"/>
      <url>/blog/post/681w71ia.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在计算机科学中有一个术语<code>按···调用（call by）</code>用来表示各种编程语言中方法参数的行为。<br>常见的调用方式有以下两种：</p><ul><li>按值调用（call by value）</li><li>按引用调用（call by reference）</li></ul><h2 id="按值调用"><a href="#按值调用" class="headerlink" title="按值调用"></a>按值调用</h2><p>按值调用表示方法接受的是调用者提供的值，对于这种调用方式方法得到是所用参数值的一份<mark class="hl-label red">副本</mark> ，以下是两种编程语言的实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> test&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    test::<span class="built_in">swap</span>(a, b);</span><br><span class="line">    std::cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>10 20</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="type">A</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>(<span class="number">20</span>);</span><br><span class="line">        swap(a, b);</span><br><span class="line">        System.out.println(a.getValue());</span><br><span class="line">        System.out.println(b.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(A a, A b)</span>&#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">temp</span> <span class="operator">=</span> a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>10<br>20</p></blockquote><h2 id="按引用调用"><a href="#按引用调用" class="headerlink" title="按引用调用"></a>按引用调用</h2><p>按引用调用表示方法接受的是调用者提供的变量的位置（location），对于这种调用方式方法可以直接修改所用的参数的值，在c++中可以实现这种操作，但Java中并不可以，Java中的方法调用总是按值调用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> test&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    test::<span class="built_in">swap</span>(a, b);</span><br><span class="line">    std::cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>20 10</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigDecimal</title>
      <link href="/blog/post/9m407u54.html"/>
      <url>/blog/post/9m407u54.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Java</code>中提供了对于大实数运算的相关类<code>BigDecimal</code>，对于那些无法用二进制数精确运算的数可以使用<code>BigDecimal</code>来进行精确运算，<code>BigDecimal</code>的底层存储的是一个 byte 数组，对应<code>String</code>中的每一位，比如：<br>-132.131432<br>⬇<br>[45, 49, 51, 50, 46, 49, 51, 49, 52, 51, 50]<br>⬇<br>[‘-‘, ‘1’, ‘3’, ‘2’, ‘.’, ‘1’, ‘3’, ‘1’, ‘4’, ‘3’, ‘2’]</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>BigDecimal(String val)</td><td>用字符串构造一个大实数</td></tr><tr><td>static BigDecimal valueOf(double val)</td><td>返回数值为 val 的大实数，对于 double 范围内数字推荐用此方法，底层有优化</td></tr><tr><td>BigDecimal add(BigDecimal val)</td><td>返回大实数之和</td></tr><tr><td>BigDecimal subtract(BigDecimal val)</td><td>返回大实数之差</td></tr><tr><td>BigDecimal multiply(BigDecimal val)</td><td>返回大实数之积</td></tr><tr><td>BigDecimal divide(BigDecimal val)</td><td>返回大实数之商，商为无限小数会报错</td></tr><tr><td>BigDecimal divide(BigDcimal val,int scale,RoundingMode roundingMode)</td><td>返回大实数之商，保留小数点后几位，并按指定舍入模式舍入</td></tr><tr><td>int compareTo(BigDecimal val)</td><td>如果相等返回 0，大于返回正数，小于返回负数</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> BigDecimal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigInteger</title>
      <link href="/blog/post/c0460286.html"/>
      <url>/blog/post/c0460286.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Java</code>中提供了对于大整数运算的相关类<code>BigInteger</code>，<code>BigInteger</code>的底层会将符号位和绝对值分别存储，绝对值会被分割为几份长度为 32 位的二进制值并存到一个 int 数组当中，比如：<br>27670116110564327424<br>⬇<br>[1, 10000000000000000000000000000000, 00000000000000000000000000000000]<br>⬇<br>[1, -2147483648, 0]</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>BigInteger(int num,Random rnd)</td><td>获取随机大整数，取值范围$[0,2^{num}-1]$</td></tr><tr><td>BigInteger(String val)</td><td>用字符串构造一个大整数</td></tr><tr><td>BigIntege(String val,int radix)</td><td>用字符串构造指定进制的大整数</td></tr><tr><td>static BigInteger valueOf(long val)</td><td>返回数值为 val 的大整数，对于 long 范围内数字推荐用此方法，是因为当生成的 val 在$[-16,16]$会有优化</td></tr><tr><td>BigInteger add(BigInteger val)</td><td>返回大整数之和</td></tr><tr><td>BigInteger subtract(BigInteger val)</td><td>返回大整数之差</td></tr><tr><td>BigInteger multiply(BigInteger val)</td><td>返回大整数之积</td></tr><tr><td>BigInteger divide(BigInteger val)</td><td>返回大整数之商</td></tr><tr><td>BigInteger mod(BigInteger val)</td><td>返回大整数之余</td></tr><tr><td>BigInteger[] divideAndRemainder(BigInteger val)</td><td>获取商和余数</td></tr><tr><td>BigInteger sqrt()</td><td>返回大整数的平方根</td></tr><tr><td>BigInteger pow(int exponent)</td><td>获取大整数的次幂</td></tr><tr><td>BigInteger max&#x2F;min(BigInteger val)</td><td>返回最大&#x2F;最小值</td></tr><tr><td>int compareTo(BigInteger val)</td><td>如果相等返回 0，大于返回正数，小于返回负数</td></tr><tr><td>boolean equals(Object x)</td><td>比较是否相同</td></tr><tr><td>int intValue(BigInteger val)</td><td>转为 int 类型，超出范围数据有误</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> BigInteger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合</title>
      <link href="/blog/post/j9ujeumh.html"/>
      <url>/blog/post/j9ujeumh.html</url>
      
        <content type="html"><![CDATA[<h2 id="集合的分类"><a href="#集合的分类" class="headerlink" title="集合的分类"></a>集合的分类</h2><p>集合可以分类为以下两大种：</p><ul><li><strong>单列集合</strong></li><li><strong>双列集合</strong></li></ul><p>Java 中的集合框架的继承和实现体系大致如下：</p><ul><li><mark class="hl-label red">Collection</mark> <ul><li><mark class="hl-label red">List</mark> <ul><li><mark class="hl-label blue">ArrayList</mark> </li><li><mark class="hl-label blue">LinkedList</mark> </li><li><mark class="hl-label blue">Vector</mark> </li></ul></li><li><mark class="hl-label red">Set</mark> <ul><li><mark class="hl-label blue">HashSet</mark> <ul><li><mark class="hl-label blue">LinkedHashSet</mark> </li></ul></li><li><mark class="hl-label blue">TreeSet</mark> </li></ul></li></ul></li><li><mark class="hl-label red">Map</mark> <ul><li><mark class="hl-label blue">HashMap</mark> <ul><li><mark class="hl-label blue">LinkedHashMap</mark> </li></ul></li><li><mark class="hl-label blue">Hashtable</mark> <ul><li><mark class="hl-label blue">Properties</mark> </li></ul></li><li><mark class="hl-label blue">TreeMap</mark> </li></ul></li></ul><mark class="hl-label red">红色标签</mark>  为接口（Interface），<mark class="hl-label blue">蓝色标签</mark>  为实现类（Implementation）<p>以上结构仅展示一些经常会用到的实现类和接口，并不是完整的结构，下图才是完整的结构：<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/ab/Java.util.Collection_hierarchy.svg/1920px-Java.util.Collection_hierarchy.svg.png"><br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Java.util.Map_hierarchy.svg/2560px-Java.util.Map_hierarchy.svg.png"><br>引用自<a href="https://en.wikipedia.org/wiki/Java_collections_framework">Wikipedia 的 Java collections framework</a></p><h2 id="Collection（单列集合）"><a href="#Collection（单列集合）" class="headerlink" title="Collection（单列集合）"></a>Collection（单列集合）</h2><p>Collection 是单列集合的顶层接口，以下为常用方法：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>boolean add(E e)</td><td>把给定的对象添加到当前集合当中</td></tr><tr><td>void clear()</td><td>清空集合中所有元素</td></tr><tr><td>boolean remove(E e)</td><td>把给定的元素在当前集合中删除</td></tr><tr><td>boolean contains(Object o)</td><td>判断当前集合中是否包含给定对象</td></tr><tr><td>boolean isEmpty()</td><td>判断当前集合是否为空</td></tr><tr><td>int size()</td><td>返回集合中的元素个数</td></tr></tbody></table><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>List 集合中的元素有序，可重复，且有索引，因此多了很多索引操作的方法：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>void add(int index, E element)</td><td>在集合中的指定位置插入给定元素</td></tr><tr><td>E remove(int index)</td><td>删除指定索引处的元素，返回被删除的元素</td></tr><tr><td>E set(int index, E element)</td><td>修改指定索引处的元素，返回被修改的元素</td></tr><tr><td>E get(int index)</td><td>返回指定索引处的元素</td></tr></tbody></table><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>ArrayList 的底层是一个数组，在扩容时有特殊机制</p><p>ArrayList 底层原理</p><ol><li>利用空参构造创建集合时，在底层会创建一个默认长度为 0 的数组</li><li>当往集合中添加元素时，底层会创建一个新的长度为 10 的数组</li><li>当存满时继续添加元素，会触发集合的扩容，此时有两种情况：<ol><li>添加单个元素或添加的多个元素个数和原来的元素个数之和小于原来长度的 1.5 倍，集合会扩容至原来的 1.5 倍</li><li>添加的元素过多，会直接扩容至原来的元素个数加添加的元素个数</li></ol></li></ol><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><p>LinkedList 的底层是靠链表实现的</p><p>LinkedList 特有方法</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>void addFirst(E e)</td><td>在列表的开头插入给定元素</td></tr><tr><td>void addLast(E e)</td><td>在列表的结尾插入给定元素</td></tr><tr><td>E getFirst()</td><td>返回列表开头的元素</td></tr><tr><td>E getLast()</td><td>返回列表结尾的元素</td></tr><tr><td>E removeFirst</td><td>删除列表开头的元素</td></tr><tr><td>E removeLast</td><td>删除列表结尾的元素</td></tr></tbody></table><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set 集合中的元素无序，不重复，且没有索引，和 Collection 的 API 基本一致</p><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><p>HashSet 的底层是一个 HashMap，所以使用的数据结构 HashMap 是一样<br>当向 HashSet 添加元素时，实际上是在往 HashMap 添加一个 key &#x3D; 此元素，value &#x3D; 虚拟 Object 对象的键值对<br><code>这个虚拟Object对象没有实际含义，可以看作value为空，只是因为HashMap的底层实现要求value不可为null</code></p><div class="note warning no-icon flat"><p>在使用 HashSet 存储自定义对象时，必须重写 hashCode()和 equals()方法</p></div><h5 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h5><p>LinkedHashSet 与 HashSet 相比较多了可以保证数据的存储和取出的顺序时一样的</p><p>LinkedHashSet 底层是一个 LinkedHashMap，所以底层原理是一样的<br>当向 LinkedHashSet 添加元素时，实际上是在往 LinkedHashMap 添加一个 key &#x3D; 此元素，value &#x3D; 虚拟 Object 对象的键值对</p><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>TreeSet 是可以排序的，默认按照从小到大的顺序排序</p><p>TreeSet 底层是一个 TreeMap，所以底层原理是一样的，都是基于红黑树来实现的<br>当向 TreeSet 添加元素时，实际上是在往 TreeSet 添加一个 key &#x3D; 此元素，value &#x3D; 虚拟 Object 对象的键值对</p><div class="note warning no-icon flat"><p>TreeSet 中的元素若为自定义对象，需要实现 Comparable 接口或者在构造时传入 Comparator 的实现类对象</p></div><h2 id="Map（双列集合）"><a href="#Map（双列集合）" class="headerlink" title="Map（双列集合）"></a>Map（双列集合）</h2><p>Map 也叫映射，是一种可以将键和值对应起来的结构，</p><p>Map 是双列集合的顶层接口，以下是一些常用的方法：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>V put(K key, V value)</td><td>添加或覆盖元素，若是添加则返回 null，若是覆盖则返回被覆盖的 value</td></tr><tr><td>V remove(Object key)</td><td>根据键删除键值对元素</td></tr><tr><td>V get(Object key)</td><td>根据键获取值</td></tr><tr><td>V repalce(K key, V value)</td><td>根据键将值替换成新的值，并将旧的值进行返回</td></tr><tr><td>boolean repalce(K key, V oldValue, V newValue)</td><td>根据键值对将值替换成新的值，存在此键值对则替换且返回 true，否则返回 false</td></tr><tr><td>void clear()</td><td>移除所有的键值对元素</td></tr><tr><td>boolean containsKey(Object key)</td><td>判断集合是否包含指定的键</td></tr><tr><td>boolean containsValue(Object value)</td><td>判断集合是否包含指定的值</td></tr><tr><td>boolean isEmpty()</td><td>判断集合是否为空</td></tr><tr><td>int size()</td><td>返回集合的长度，即键值对个数</td></tr><tr><td>Set<K> keySet()</td><td>返回键的 Set 集合</td></tr><tr><td>Set&lt;Map.Entry&lt;K, V&gt;&gt;entrySet()</td><td>返回键值对对象的 Set 集合</td></tr></tbody></table><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>HashMap 中存储的元素是无序，不重复，且无索引的</p><p>HashMap 映射的底层在 JDK8 前后是不一样的<br>在 JDK8 以前：数组+链表（哈希表）<br>在 JDK8 及其以后：数组+链表+红黑树</p><p>HashMap 底层原理：</p><ol><li>创建一个默认长度 16，默认加载因子为 0.75（Load Factor）的数组，数组名 table<br><code>加载因子是用来控制哈希表扩容时机的，当表中存储的元素大于16*0.75时，哈希表扩充到原来的两倍</code></li><li>根据键值对的键（key）的哈希值跟数组的长度计算出应存入的位置<br><code>index = (table.length - 1) &amp; 键的哈希值，此哈希值是调用键的hashCode()获取的</code></li><li>判断当前位置是否为 null，如果是 null 直接存入</li><li>如果位置不为 null，表示已有元素，则调用 equals 方法比较键的属性值</li><li>一样：不存；不一样：存入数组，形成链表<br>JDK8 以前：新元素存入数组，老元素挂在新元素下面<br>JDK8 以后：新元素直接挂在老元素下面</li><li>当链表的长度大于 8 且数组的长度大于等于 64 时，链表会转换成红黑树</li></ol><div class="note warning no-icon flat"><p>若在使用 HashMap 存储的键是自定义对象时，必须重写 hashCode()和 equals()方法<br>若在使用 HashMap 存储的值是自定义对象时，不需要重写 hashCode()和 equals()方法</p></div><h4 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h4><p>LinkedHashMap 中存储的元素是有序，不重复且无索引的</p><p>LinkedHashMap 与 HashMap 相比，多了可以保证数据的存储和取出的顺序时一样的</p><p>HashMap 的底层在原有 HashMap 的基础上增加了双链表机制，每个添加的元素都记录了上一个添加的元素的地址值和下一个要添加的元素的地址值<br>在遍历时会从第一个添加的元素开始遍历</p><h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h3><h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p>TreeMap 中存储的元素是可排序，不重复，且无索引的<br><code>可排序是指能对键进行排序操作</code><br>TreeMap 是可以排序的，默认按照从小到大的顺序排序，底层是基于红黑树来实现的</p><div class="note warning no-icon flat"><p>TreeMap 中的元素的键若为自定义对象，需要实现 Comparable 接口或者在构造时传入 Comparator 的实现类对象<br>TreeMap 中的元素的值若为自定义对象，不需要实现 Comparable 接口或者在构造时传入 Comparator 的实现类对象</p></div><h2 id="集合的遍历"><a href="#集合的遍历" class="headerlink" title="集合的遍历"></a>集合的遍历</h2><p>collection 集合的遍历有以下三种方式：</p><ul><li>迭代器遍历</li><li>增强 for 遍历</li><li>lambda 表达式遍历</li></ul><p>list 集合的遍历有以下五种方式：</p><ul><li>迭代器遍历</li><li>列表迭代器遍历</li><li>增强 for 遍历</li><li>lambda 表达式遍历</li><li>普通 for 循环遍历（依赖索引）</li></ul><p>set 集合的遍历方式和 collection 集合的遍历方式一样：</p><ul><li>迭代器遍历</li><li>增强 for 遍历</li><li>lambda 表达式遍历</li></ul><p>map 映射的遍历方式有以下三种方式：</p><ul><li>根据键遍历</li><li>根据键值对遍历</li><li>lambda 表达式遍历</li></ul><h3 id="迭代器遍历"><a href="#迭代器遍历" class="headerlink" title="迭代器遍历"></a>迭代器遍历</h3><p>使用集合中的<code>iterator()</code>方法获取迭代器，以下是迭代器对象常用方法：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>boolean hasNext()</td><td>判断当前位置是否有元素，有返回 true，无则返回 false</td></tr><tr><td>E next()</td><td>获取当前位置的元素，并将迭代器对象移向下一个元素</td></tr><tr><td>void remove()</td><td>删除上一次调用 next()返回的对象</td></tr></tbody></table><p>使用 Iterator 正向遍历 ArrayList：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;🐂🍺&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;牛啤&quot;</span>;</span><br><span class="line">        Collection&lt;String&gt; coll1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        coll1.add(s1);</span><br><span class="line">        coll1.add(s2);</span><br><span class="line">        coll1.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        coll1.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; iterator1 = coll1.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> iterator1.next();</span><br><span class="line">            <span class="keyword">if</span> (s.equals(<span class="string">&quot;bbb&quot;</span>)) iterator1.remove();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(coll1.size());</span><br><span class="line">        System.out.println(coll1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>🐂🍺<br>牛啤<br>aaa<br>bbb<br>3<br>[🐂🍺, 牛啤, aaa]</p></blockquote><p>使用 Iterator 正向遍历 LinkedList：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;🐂🍺&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;牛啤&quot;</span>;</span><br><span class="line">        Collection&lt;String&gt; coll2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        coll2.add(s1);</span><br><span class="line">        coll2.add(s2);</span><br><span class="line">        coll2.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        coll2.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; iterator2 = coll2.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator2.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> iterator2.next();</span><br><span class="line">            <span class="keyword">if</span> (s.equals(<span class="string">&quot;aaa&quot;</span>)) iterator2.remove();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(coll2.size());</span><br><span class="line">        System.out.println(coll2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>🐂🍺<br>牛啤<br>aaa<br>bbb<br>3<br>[🐂🍺, 牛啤, bbb]</p></blockquote><p>在使用迭代器遍历时，禁止使用集合的 remove 方法，会导致<code>ConcurrentModificationException</code>报错</p><h3 id="列表迭代器遍历"><a href="#列表迭代器遍历" class="headerlink" title="列表迭代器遍历"></a>列表迭代器遍历</h3><p>List 集合中特有的迭代器，用方法<code>listIterator()</code>来获取指向 0 索引的迭代器，使用<code>listIterator(int index)</code>可以得到指向指定索引的迭代器，<code>ListIterator</code>是<code>Iterator</code>的子接口，所以包含父类中的方法，以下是常用方法：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>void add(E e)</td><td>在指向处插入元素</td></tr><tr><td>boolean hasNext()</td><td>判断当前位置是否有元素，有返回 true，无则返回 false</td></tr><tr><td>E next()</td><td>获取当前位置的元素，并将迭代器对象移向下一个元素</td></tr><tr><td>int nextIndex()</td><td>返回当前位置的索引</td></tr><tr><td>boolean hasPrevious()</td><td>判断上一个位置是否有元素，有返回 true，无则返回 false</td></tr><tr><td>E previous()</td><td>获取上一个位置的元素，并将迭代器对象移向上一个元素</td></tr><tr><td>int previousIndex</td><td>返回上一个位置的索引</td></tr><tr><td>void remove()</td><td>删除上一次调用 previous()或 next()返回的元素</td></tr><tr><td>void set(E e)</td><td>修改上一次调用 previous()或 next()返回的元素</td></tr></tbody></table><p>使用 ListIterator 反向遍历 ArrayList：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;🐂🍺&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;牛啤&quot;</span>;</span><br><span class="line">        List&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list1.add(s1);</span><br><span class="line">        list1.add(s2);</span><br><span class="line">        list1.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        list1.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        ListIterator&lt;String&gt; listIterator1 = list1.listIterator(list1.size());</span><br><span class="line">        <span class="keyword">while</span> (listIterator1.hasPrevious()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> listIterator1.previous();</span><br><span class="line">            <span class="keyword">if</span> (s.equals(<span class="string">&quot;bbb&quot;</span>)) listIterator1.remove();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list1.size());</span><br><span class="line">        System.out.println(list1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>bbb<br>aaa<br>牛啤<br>🐂🍺<br>3<br>[🐂🍺, 牛啤, aaa]</p></blockquote><p>使用 ListIterator 反向遍历 LinkedList：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;🐂🍺&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;牛啤&quot;</span>;</span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        list2.add(s1);</span><br><span class="line">        list2.add(s2);</span><br><span class="line">        list2.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        ListIterator&lt;String&gt; listIterator2 = list2.listIterator(list2.size());</span><br><span class="line">        <span class="keyword">while</span> (listIterator2.hasPrevious()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> listIterator2.previous();</span><br><span class="line">            <span class="keyword">if</span> (s.equals(<span class="string">&quot;aaa&quot;</span>)) listIterator2.remove();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list2.size());</span><br><span class="line">        System.out.println(list2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>bbb<br>aaa<br>牛啤<br>🐂🍺<br>3<br>[🐂🍺, 牛啤, bbb]</p></blockquote><h3 id="增强-for-遍历"><a href="#增强-for-遍历" class="headerlink" title="增强 for 遍历"></a>增强 for 遍历</h3><p>增强 for 遍历的底层其实就是迭代器遍历，与迭代器遍历相比在使用时可以简化书写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String s : coll) &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lambda-表达式遍历"><a href="#lambda-表达式遍历" class="headerlink" title="lambda 表达式遍历"></a>lambda 表达式遍历</h3><p>使用 forEach 方法来遍历集合<br>void forEach(Consumer&lt;? super E&gt; action)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">coll.forEach(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>accept 方法中填写遍历中要做的事</p><p>由于 Consumer 接口是一个函数式接口，所以可以将匿名内部类改写为 lambda 表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coll.forEach((System.out::println));</span><br></pre></td></tr></table></figure><h3 id="根据键遍历"><a href="#根据键遍历" class="headerlink" title="根据键遍历"></a>根据键遍历</h3><p>调用 Map 对象的 keySet()，得到键的 Set 集合，接着根据键的值在 Map 中获取对应的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        System.out.println(hm.put(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>));  <span class="comment">//null</span></span><br><span class="line">        System.out.println(hm.put(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;bcd&quot;</span>));<span class="comment">//null</span></span><br><span class="line">        System.out.println(hm.put(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;adb&quot;</span>));<span class="comment">//null</span></span><br><span class="line">        System.out.println(hm.put(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;a&quot;</span>));<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keys = hm.keySet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> hm.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot; = &quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//a = b</span></span><br><span class="line">        <span class="comment">//b = bcd</span></span><br><span class="line">        <span class="comment">//c = adb</span></span><br><span class="line">        <span class="comment">//abc = a</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="根据键值对遍历"><a href="#根据键值对遍历" class="headerlink" title="根据键值对遍历"></a>根据键值对遍历</h3><p>调用 Map 对象的 entrySet()，得到键值对对象的 Set 集合，接着调用 entry 对象的 getKey()和 getValue()方法获取对应的键和值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        System.out.println(hm.put(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>));  <span class="comment">//null</span></span><br><span class="line">        System.out.println(hm.put(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;bcd&quot;</span>));<span class="comment">//null</span></span><br><span class="line">        System.out.println(hm.put(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;adb&quot;</span>));<span class="comment">//null</span></span><br><span class="line">        System.out.println(hm.put(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;a&quot;</span>));<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = hm.entrySet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entries) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">&quot; = &quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//a = b</span></span><br><span class="line">        <span class="comment">//b = bcd</span></span><br><span class="line">        <span class="comment">//c = adb</span></span><br><span class="line">        <span class="comment">//abc = a</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不可变集合"><a href="#不可变集合" class="headerlink" title="不可变集合"></a>不可变集合</h2><p>在 List、Set、Map 接口中，都有一个静态方法 of()，可以获取一个不可变的集合</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>static <E> List<E> of(E… elements)</td><td>创建指定元素的 List 集合</td></tr><tr><td>static <E> Set<E> of(E… elements)</td><td>创建指定元素的 Set 集合</td></tr><tr><td>static &lt;K, V&gt; Map&lt;K, V&gt; of(K k, V v)</td><td>创建指定键和值的 Map 集合</td></tr><tr><td>static &lt;K, V&gt; Map&lt;K, V&gt; ofEntries(Entry&lt;? extend K, ? extend V&gt;… entries)</td><td>创建指定键值对的 Map 集合</td></tr><tr><td>static &lt;K, V&gt; Map&lt;K, V&gt; copyOf(Map&lt;? extends K, ? extends V&gt; map)</td><td>创建指定 Map 的不可变集合副本</td></tr></tbody></table><p>当进行添加，删除，修改的操作时会抛出<code>UnsupportedOperationException</code>异常</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>regex和replacement转义</title>
      <link href="/blog/post/haki98t3.html"/>
      <url>/blog/post/haki98t3.html</url>
      
        <content type="html"><![CDATA[<h2 id="replacement-转义"><a href="#replacement-转义" class="headerlink" title="replacement 转义"></a>replacement 转义</h2><p>在使用 replaceAll 方法时，遇到 replacement 中含有’$’和’&#39;的情况会发生报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;Java8,Java11,Java17,Java21&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">        System.out.println(content.replaceAll(regex, <span class="string">&quot;$&quot;</span>));</span><br><span class="line">        System.out.println(content.replaceAll(regex, <span class="string">&quot;\\&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;Java8,Java11,Java17,Java21&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">        System.out.println(content.replaceAll(regex, <span class="string">&quot;\\$&quot;</span>));</span><br><span class="line">        System.out.println(content.replaceAll(regex, <span class="string">&quot;\\\\&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>$8,$11,$17,$21<br>\8,\11,\17,\21</p></blockquote><p>当不知道 replacement 中时候含有’$’和’&#39;时，可以使用<code>Matcher</code>类中的<code>quoteReplacement</code>来解决问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;Java8,Java11,Java17,Java21&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">        System.out.println(content.replaceAll(regex, Matcher.quoteReplacement(<span class="string">&quot;$&quot;</span>)));</span><br><span class="line">        System.out.println(content.replaceAll(regex, Matcher.quoteReplacement(<span class="string">&quot;\\&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>$8,$11,$17,$21<br>\8,\11,\17,\21</p></blockquote><h2 id="regex-转义"><a href="#regex-转义" class="headerlink" title="regex 转义"></a>regex 转义</h2><p>和 replacement 的情况类似，可以使用<code>Pattern</code>类中<code>quote</code>来解决问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;$8,$11,$17,$21&quot;</span>;</span><br><span class="line">        System.out.println(content.replaceAll(Pattern.quote(<span class="string">&quot;$&quot;</span>), <span class="string">&quot;Java&quot;</span>));</span><br><span class="line">        System.out.println(content.replaceAll(Pattern.quote(<span class="string">&quot;$&quot;</span>), Matcher.quoteReplacement(<span class="string">&quot;\\&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Java8,Java11,Java17,Java21<br>\8,\11,\17,\21</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/blog/post/x4idevfe.html"/>
      <url>/blog/post/x4idevfe.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>正则表达式是一种强大的工具 😎，用于描述和匹配字符串的特定模式，可用于各种编程语言和文本处理工具中，如 Java，Python，JavaScript 等。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>正则表达式由元字符组成，下表包含了元字符的完整列表以及它们在正则表达式上下文中的行为：</p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>\</td><td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\\‘ 匹配 “\“ 而 “\(“ 则匹配 “(“。</td></tr><tr><td>^</td><td>匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td>$</td><td>匹配输入字符串的结束位置。如果设置了 RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td>*</td><td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。 * 等价于{0,}。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。</td></tr><tr><td>{n}</td><td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td>{n,}</td><td>n 是一个非负整数。至少匹配 n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*‘。</td></tr><tr><td>{n,m}</td><td>m 和 n 均为非负整数，其中 n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td>?</td><td>当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。<mark class="hl-label red">非贪婪模式</mark> 尽可能少的匹配所搜索的字符串，而默认的<mark class="hl-label blue">贪婪模式</mark> 则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td></tr><tr><td>.</td><td>匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像”(.|\n)”的模式。</td></tr><tr><td>(pattern)</td><td>匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在 VBScript 中使用 SubMatches 集合，在 JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘\(‘ 或 ‘\)’。</td></tr><tr><td>(?:pattern)</td><td>匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y|ies) 就是一个比 ‘industry|industries’ 更简略的表达式。</td></tr><tr><td>(?&#x3D;pattern)</td><td>正向肯定预查（look ahead positive assert），在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，”Windows(?&#x3D;95|98|NT|2000)”能匹配”Windows2000”中的”Windows”，但不能匹配”Windows3.1”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td>(?!pattern)</td><td>正向否定预查(negative assert)，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如”Windows(?!95|98|NT|2000)”能匹配”Windows3.1”中的”Windows”，但不能匹配”Windows2000”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td>(?&lt;&#x3D;pattern)</td><td>反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，”(?&lt;&#x3D;95|98|NT|2000)Windows”能匹配”2000Windows”中的”Windows”，但不能匹配”3.1Windows”中的”Windows”。</td></tr><tr><td>(?&lt;!pattern)</td><td>反向否定预查，与正向否定预查类似，只是方向相反。例如”(?&lt;!95|98|NT|2000)Windows”能匹配”3.1Windows”中的”Windows”，但不能匹配”2000Windows”中的”Windows”。</td></tr><tr><td>x|y</td><td>匹配 x 或 y。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td>[xyz]</td><td>字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td>[^xyz]</td><td>负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td></tr><tr><td>[a-z]</td><td>字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td></tr><tr><td>[^a-z]</td><td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td></tr><tr><td>\b</td><td>匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr><tr><td>\B</td><td>匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td></tr><tr><td>\cx</td><td>匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td>\d</td><td>匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td>\D</td><td>匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td>\f</td><td>匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td>\n</td><td>匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td>\r</td><td>匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td>\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td></tr><tr><td>\S</td><td>匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td>\t</td><td>匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td>\v</td><td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr><tr><td>\w</td><td>匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’。</td></tr><tr><td>\W</td><td>匹配非字母、数字、下划线。等价于 ‘[^A-Za-z0-9_]’。</td></tr><tr><td>\xn</td><td>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td></tr><tr><td>\num</td><td>匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td></tr><tr><td>\n</td><td>标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td></tr><tr><td>\nm</td><td>标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td></tr><tr><td>\nml</td><td>如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td>\un</td><td>匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td></tr></tbody></table><h2 id="Java-中的正则表达式"><a href="#Java-中的正则表达式" class="headerlink" title="Java 中的正则表达式"></a>Java 中的正则表达式</h2><p>在<code>Java</code>中使用正则表达式需要导入<code>java.util.regex</code>包。<br><code>java.util.regex</code>包中主要包含以下三个类：</p><ul><li><strong>Patter</strong>：<br>pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。</li><li><strong>Matcher</strong>：<br>Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与 Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。</li><li><strong>PatternSyntaxException</strong>：<br>PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</li></ul><p>由于 Java 中的正则表达式也是字符串，因此转义字符<code>\</code>会在字符串中生效，所以对于<code>\d</code>等元字符要写成<code>\\d</code>之类的。</p><p>一个简单的查找样例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;Java8,Java11,Java17,Java21&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;((?i)java(?:8|11|17|21))&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (m.find())&#123;</span><br><span class="line">            System.out.println(m.group());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Java8<br>Java11<br>Java17<br>Java21</p></blockquote><h2 id="Matcher-类的方法"><a href="#Matcher-类的方法" class="headerlink" title="Matcher 类的方法"></a>Matcher 类的方法</h2><h3 id="索引方法"><a href="#索引方法" class="headerlink" title="索引方法"></a>索引方法</h3><ul><li>public int start()<br>返回以前匹配的初始索引。</li><li>public int start(int group)<br>返回在以前的匹配操作期间，由给定组所捕获的子序列的初始索引</li><li>public int end()<br>返回最后匹配字符之后的偏移量。</li><li>public int end(int group)<br>返回在以前的匹配操作期间，由给定组所捕获子序列的最后字符之后的偏移量。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;Java8,Java11,Java17,Java21&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;(?i)java(?:8|11|17|21)&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (m.find())&#123;</span><br><span class="line">            System.out.println(m.start());</span><br><span class="line">            System.out.println(m.end());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>0<br>5<br>6<br>12<br>13<br>19<br>20<br>26</p></blockquote><p>定组捕获：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;Java8,Java11,Java17,Java21&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;(?i)java(8|11|17|21)&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (m.find())&#123;</span><br><span class="line">            System.out.println(m.start(<span class="number">1</span>));</span><br><span class="line">            System.out.println(m.end(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4<br>5<br>10<br>12<br>17<br>19<br>24<br>26</p></blockquote><p>这里返回的索引是”java”后面的版本号的索引。</p><h3 id="查找方法"><a href="#查找方法" class="headerlink" title="查找方法"></a>查找方法</h3><ul><li>public boolean lookingAt()<br>尝试将从区域开头开始的输入序列与该模式匹配。</li><li>public boolean find()<br>尝试查找与该模式匹配的输入序列的下一个子序列。</li><li>public boolean find(int start)<br>重置此匹配器，然后尝试查找匹配该模式、从指定索引开始的输入序列的下一个子序列。</li><li>public boolean matches()<br>尝试将整个区域与模式匹配。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content1</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content2</span> <span class="operator">=</span> <span class="string">&quot;JavaJava&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m1</span> <span class="operator">=</span> p.matcher(content1);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m2</span> <span class="operator">=</span> p.matcher(content2);</span><br><span class="line"></span><br><span class="line">        System.out.println(m1.matches());</span><br><span class="line">        System.out.println(m2.matches());</span><br><span class="line">        System.out.println(m1.lookingAt());</span><br><span class="line">        System.out.println(m2.lookingAt());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>true<br>false<br>true<br>true</p></blockquote><h3 id="替换方法"><a href="#替换方法" class="headerlink" title="替换方法"></a>替换方法</h3><ul><li>public Matcher appendReplacement(StringBuffer sb, String replacement)<br>实现非终端添加和替换步骤。</li><li>public StringBuffer appendTail(StringBuffer sb)<br>实现终端添加和替换步骤。</li><li>public String replaceAll(String replacement)<br>替换模式与给定替换字符串相匹配的输入序列的每个子序列。</li><li>public String replaceFirst(String replacement)<br>替换模式与给定替换字符串匹配的输入序列的第一个子序列。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;Java8,Java11,Java17,Java21&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(content);</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">            m.appendReplacement(sb1, <span class="string">&quot;*_*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        m.appendTail(sb1);</span><br><span class="line">        System.out.println(sb1);</span><br><span class="line"></span><br><span class="line">        m.reset();</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">if</span> (m.find()) &#123;</span><br><span class="line">            m.appendReplacement(sb2, <span class="string">&quot;*_*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        m.appendTail(sb2);</span><br><span class="line">        System.out.println(sb2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>*_*8,*_*11,*_*17,*_*21<br>*_*8,Java11,Java17,Java21</p></blockquote><p>其实<code>replaceAll</code>和<code>replaceFirst</code>的底层就是调用<code>appendReplacement</code>以及<code>appendTail</code>来实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;Java8,Java11,Java17,Java21&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(content);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> m.replaceAll(<span class="string">&quot;*_*&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> m.replaceFirst(<span class="string">&quot;*_*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>*_*8,*_*11,*_*17,*_*21<br>*_*8,Java11,Java17,Java21</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符编码</title>
      <link href="/blog/post/4g7gt549.html"/>
      <url>/blog/post/4g7gt549.html</url>
      
        <content type="html"><![CDATA[<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p>在早期计算机系统中，为了给字符编码，美国国家标准学会（American National Standard Institute，ANSI）制定了一套英文编码规范，包含英文字母，数字和一些常用符号，编码范围从<code>0</code>到<code>127</code>，称为<code>ascii</code>编码，每个字素（grapheme，a single unit of a human writing system）只占用一个字节，比如<code>A</code>的编码为<code>0x41(65)</code>。</p><p>但是随着计算机的发展的全球化，计算机需要能支持更多的语言，也就是说每一种语言的文字都需要一套与之对应的编码，对于拉丁母来说，一个字节的大小就能基本包含常用的字母和符号，但是对于东亚的表意文字来说，一个字节的大小显然是不够用的，需要更多的字节数，比如一个<code>中</code>占用两个字节</p><p>在早期的时候并没有一套统一的规范，于是不同的国家和地区都制定了一套适用于本区域文字的编码，比如中文有<code>GB2312</code>，日文有<code>Shift_JIS</code>，韩文有<code>EUC-KR</code>，不同的编码之间会冲突，这也导致了乱码的问题出现。</p><h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><p>为了统一全球所有语言的编码，全球统一码联盟发布了<code>Unicode</code>编码，它把世界上的主要语言都纳入同一套编码中，这样，中文，日文，韩文和其他语言也就不会冲突了。它的长度为 2~4 个字节，比如<code>A</code>的<code>ascii</code>编码为<code>0x41(65)</code>，而<code>Unicode</code>编码为<code>U+0041</code>，<code>中</code>的<code>GB2312</code>编码为<code>0xd6d0</code>，<code>Unicode</code>编码为<code>U+4e2d</code>，除此之外，<code>Unicode</code>编码还包含了 emoji 表情，比如<code>🐂</code>的编码为<code>U+1f402</code>，<code>🍺</code>的编码为<code>U+1f37a</code>。</p><h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><p>而我们常说的<code>UTF-8</code>编码是一种编码方式，它将固定长度的<code>Unicode</code>编码转换成长度为 1~4 个字节的二进制码，比如<code>A</code>的<code>UTF-8</code>编码为<code>0x41</code>，只有一个字节的长度，所以对于大量的英文文本，采用<code>UTF-8</code>编码可以节省大量的存储空间，<code>UTF-8</code>编码是通过高字节位来判断一个字素到底是几个字节的。</p><h2 id="Java-中的-Unicode-码点"><a href="#Java-中的-Unicode-码点" class="headerlink" title="Java 中的 Unicode 码点"></a>Java 中的 Unicode 码点</h2><p>在<code>Java</code>中，<code>char</code>类型是采用<code>UTF-16</code>编码的，也就是两个字节来表示一个字素，但是对于一些长度超过两个字节的<code>Unicode</code>点（用来表示一个字素的 Unicode 编码）就不够用了， 所以就需要用两个 char 来表示一个码点，因此在用<code>char</code>类型遍历字符串的时候就会产生错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;🐂🍺&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;牛啤&quot;</span>;</span><br><span class="line">        System.out.println(s1.length()); <span class="comment">// 4</span></span><br><span class="line">        System.out.println(s2.length()); <span class="comment">// 2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s1.length(); i++) &#123;</span><br><span class="line">            System.out.println(s1.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ?</span></span><br><span class="line">        <span class="comment">// ?</span></span><br><span class="line">        <span class="comment">// ?</span></span><br><span class="line">        <span class="comment">// ?</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s2.length(); i++) &#123;</span><br><span class="line">            System.out.println(s2.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 牛</span></span><br><span class="line">        <span class="comment">// 啤</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以为了解决这种问题，<code>Java</code>提供了以码点的长度方式来遍历字符串的对应方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;🐂🍺&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;牛啤&quot;</span>;</span><br><span class="line">        System.out.println(s1.codePointCount(<span class="number">0</span>, s1.length())); <span class="comment">// 2</span></span><br><span class="line">        System.out.println(s2.codePointCount(<span class="number">0</span>, s2.length())); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">index1</span> <span class="operator">=</span> s1.offsetByCodePoints(<span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 得到从0索引开始偏移0个码点的索引</span></span><br><span class="line">        System.out.println(index1); <span class="comment">// 0</span></span><br><span class="line">        System.out.println(Integer.toHexString(s1.codePointAt(index1))); <span class="comment">// 1f402</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index2</span> <span class="operator">=</span> s1.offsetByCodePoints(<span class="number">0</span>, <span class="number">1</span>); <span class="comment">// 得到从0索引开始偏移1个码点的索引</span></span><br><span class="line">        System.out.println(index2); <span class="comment">// 2</span></span><br><span class="line">        System.out.println(Integer.toHexString(s1.codePointAt(index2))); <span class="comment">// 1f37a</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 正向</span></span><br><span class="line">        <span class="type">int</span> cp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s1.length(); i += Character.charCount(cp)) &#123;</span><br><span class="line">            cp = s1.codePointAt(i);</span><br><span class="line">            System.out.println(Integer.toHexString(cp));</span><br><span class="line">            System.out.println(Character.toString(cp));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1f402</span></span><br><span class="line">        <span class="comment">// 🐂</span></span><br><span class="line">        <span class="comment">// 1f37a</span></span><br><span class="line">        <span class="comment">// 🍺</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反向</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s1.length() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isSurrogate(s1.charAt(i))) i--;</span><br><span class="line">            cp = s1.codePointAt(i);</span><br><span class="line">            System.out.println(Integer.toHexString(cp));</span><br><span class="line">            System.out.println(Character.toString(cp));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1f37a</span></span><br><span class="line">        <span class="comment">// 🍺</span></span><br><span class="line">        <span class="comment">// 1f402</span></span><br><span class="line">        <span class="comment">// 🐂</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，以上遍历的方式显然不够优雅，其实<code>Java</code>还提供了将字符串变为一个码点数组的方法，那我们就可以以数组的方式去遍历这个字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;🐂🍺&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;牛啤&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// codePoints方法可以得到一个int流</span></span><br><span class="line">        <span class="type">int</span>[] codePoints = s1.codePoints().toArray();</span><br><span class="line">        System.out.println(Arrays.toString(codePoints));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将码点数组转回字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(codePoints, <span class="number">0</span>, codePoints.length);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将单个码点转为字符串可以用<code>Character.toString(int codePoint)</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">codePoint</span> <span class="operator">=</span> <span class="number">0x1f37a</span>;</span><br><span class="line">        System.out.println(Character.toString(codePoint));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo搭建博客基础（三）</title>
      <link href="/blog/post/r51bjcg8.html"/>
      <url>/blog/post/r51bjcg8.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><h3 id="博客搭建导航-🌏"><a href="#博客搭建导航-🌏" class="headerlink" title="博客搭建导航 🌏"></a>博客搭建导航 🌏</h3><ol><li><a href="/blog/post/6706d621.html" title="基于hexo搭建博客基础（一）">基于hexo搭建博客基础（一）</a></li><li><a href="/blog/post/sunqxf91.html" title="基于hexo搭建博客基础（二）">基于hexo搭建博客基础（二）</a></li><li><a href="/blog/post/r51bjcg8.html" title="基于hexo搭建博客基础（三）">基于hexo搭建博客基础（三）</a></li></ol></div><script src='/js/series.js'></script><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><ol><li>这个系列是关于如何基于hexo框架以及GitHub Pages搭建自己的博客网站。</li><li>❗创建本系列博客的初衷也只是为了记录一下自己的学习过程，以防之后健忘❗。</li><li>虽说如此，但是本系列博客已经写的很详细了，可能后面的内容会比较简略，就算是零基础也能懂大部分。</li><li>关于butterfly配置文件中的参数说明，可以参考<a href="https://butterfly.js.org/en/">官方</a>，这里只讲述自己使用的部分。</li></ol><h2 id="2-导航栏"><a href="#2-导航栏" class="headerlink" title="2.导航栏"></a>2.导航栏</h2><p>每一项前为项的名称，中英文都可以，后面的参数分别为<code>source</code>文件夹中的对应的标签页路径和对应的图标，以<code>||</code>来分隔，列表项要在最后添加<code>||hide</code>，使列表保持隐藏。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">时间轴:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">休闲||fas</span> <span class="string">fa-list||hide:</span></span><br><span class="line">    <span class="string">音乐:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="string">照片:</span> <span class="string">/gallery/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-images</span></span><br><span class="line">    <span class="string">视频:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">  <span class="string">友链:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><h2 id="3-代码相关"><a href="#3-代码相关" class="headerlink" title="3.代码相关"></a>3.代码相关</h2><p>这一部分是关于代码块的设置，每一项参数的对应含义：</p><ul><li>highlight_theme:<br>代码高亮主题，有六种可选的或者选择不使用，分别为：darker &#x2F; pale night &#x2F; light &#x2F; ocean &#x2F; mac &#x2F; mac light &#x2F; false</li><li>highlight_copy:<br>代码复制按钮，默认为true</li><li>highlight_lang:<br>代码语言类型显示，默认为true</li><li>highlight_shrink:<br>代码块折叠选项，false为展开，true为折叠，none为不展开并不显示折叠按钮</li><li>highlight_height_limit:<br>代码块高度限制，单位为px</li><li>code_word_wrap:<br>是否强制换行，默认为false<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">mac</span></span><br><span class="line"><span class="attr">highlight_copy:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight_lang:</span> <span class="literal">true</span> </span><br><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">highlight_height_limit:</span> <span class="number">200</span></span><br><span class="line"><span class="attr">code_word_wrap:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4-社交图标"><a href="#4-社交图标" class="headerlink" title="4.社交图标"></a>4.社交图标</h2><p>社交平台链接，格式为：<br>icon: link || the description || color</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fas fa-envelope:</span> <span class="string">mailto:1157559178@qq.com</span> <span class="string">||</span> <span class="string">Email</span> <span class="string">||</span> <span class="string">&#x27;#4a7dbe&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="5-图片设置"><a href="#5-图片设置" class="headerlink" title="5.图片设置"></a>5.图片设置</h2><ul><li>favicon:<br>网站图标</li><li>avatar:<br>头像，effect为旋转效果</li><li>disable_top_img:<br>关闭banner图片，默认为false</li><li>index_img:<br>home page的banner图片的路径</li><li>default_top_img:<br>默认的banner图片，当对应的标签页的banner图片没有设置时应用此项</li><li>archive_img:<br>archive page的banner图片的路径</li><li>tag_img:<br>tag page的banner图片的路径</li><li>tag_per_img:<br>每一项标签的banner图片的路径</li><li>category_img:<br>category page的banner图片的路径</li><li>category_per_img:<br>每一项分类的banner图片的路径</li><li>cover:<br>文章封面设置<ul><li>index_enable:</li><li>aside_enable:</li><li>archives_enable:</li><li>position:</li><li>default_cover:<br>文章封面路径</li></ul></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span> <span class="string">/img/favicon.png</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/img/avatar.png</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">disable_top_img:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">index_img:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">default_top_img:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">archive_img:</span></span><br><span class="line"><span class="attr">tag_img:</span></span><br><span class="line"><span class="attr">tag_per_img:</span></span><br><span class="line"><span class="attr">category_img:</span></span><br><span class="line"><span class="attr">category_per_img:</span></span><br><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="attr">default_cover:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/1.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/2.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/3.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/4.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/5.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/6.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/7.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/8.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/9.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/10.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/11.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/12.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/13.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/14.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/15.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/16.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/17.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/18.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/19.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/20.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/img/21.jpg</span></span><br></pre></td></tr></table></figure><h2 id="6-文章目录设置"><a href="#6-文章目录设置" class="headerlink" title="6.文章目录设置"></a>6.文章目录设置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">expand:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">style_simple:</span> <span class="literal">false</span> <span class="comment"># for post</span></span><br><span class="line">  <span class="attr">scroll_percent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="7-打赏设置"><a href="#7-打赏设置" class="headerlink" title="7.打赏设置"></a>7.打赏设置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">text:</span></span><br><span class="line">  <span class="attr">QR_code:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/wechat.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">微信</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/alipay.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">支付宝</span></span><br></pre></td></tr></table></figure><h2 id="8-分页设置"><a href="#8-分页设置" class="headerlink" title="8.分页设置"></a>8.分页设置</h2><p>文章页底下的下一篇链接的是新的一篇还是旧的一篇</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># value: 1 || 2 || false</span></span><br><span class="line"><span class="comment"># 1: The &#x27;next post&#x27; will link to old post</span></span><br><span class="line"><span class="comment"># 2: The &#x27;next post&#x27; will link to new post</span></span><br><span class="line"><span class="comment"># false: disable pagination</span></span><br><span class="line"><span class="attr">post_pagination:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="9-页脚设置"><a href="#9-页脚设置" class="headerlink" title="9.页脚设置"></a>9.页脚设置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">since:</span> <span class="number">2024</span></span><br><span class="line">  <span class="attr">custom_text:</span> <span class="string">一个讨论技术和作为个人知识库的小站</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="10-侧边栏设置"><a href="#10-侧边栏设置" class="headerlink" title="10.侧边栏设置"></a>10.侧边栏设置</h2><p>大部分的侧边栏卡片都关闭了，简洁风至上🤔</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span> <span class="comment"># left or right</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">archive:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">category:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">card_author:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">一个努力做全栈开发的广财er~💻</span></span><br><span class="line">    <span class="attr">button:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">前往小窝🚗</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://github.com/AnA-0823</span></span><br><span class="line">  <span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">欢迎来到我的小站</span></span><br><span class="line">  <span class="attr">card_recent_post:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">5</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort:</span> <span class="string">updated</span> <span class="comment"># date or updated</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_categories:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">expand:</span> <span class="string">none</span> <span class="comment"># none/true/false</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_tags:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">40</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">color:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">orderby:</span> <span class="string">random</span> <span class="comment"># Order of tags, random/name/length</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_archives:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">monthly</span> <span class="comment"># yearly or monthly</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">MMMM</span> <span class="string">YYYY</span> <span class="comment"># eg: YYYY年MM月</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_webinfo:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">post_count:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">last_push_date:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_post_series:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">series_title:</span> <span class="literal">false</span> <span class="comment"># The title shows the series name</span></span><br><span class="line">    <span class="attr">orderBy:</span> <span class="string">&#x27;date&#x27;</span> <span class="comment"># Order by title or date</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br></pre></td></tr></table></figure><h2 id="11-访问人数"><a href="#11-访问人数" class="headerlink" title="11.访问人数"></a>11.访问人数</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="12-网站运行时间"><a href="#12-网站运行时间" class="headerlink" title="12.网站运行时间"></a>12.网站运行时间</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">runtimeshow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">publish_date:</span> <span class="number">2024</span><span class="string">/05/01</span></span><br></pre></td></tr></table></figure><h2 id="13-右下角按钮设置"><a href="#13-右下角按钮设置" class="headerlink" title="13.右下角按钮设置"></a>13.右下角按钮设置</h2><ul><li>translate:<br>简繁体翻译</li><li>readmode:<br>阅读模式</li><li>darkmode:<br>黑暗模式</li><li>rightside_scroll_percent:<br>展示当前页面的滚动百分比，默认为false</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">translate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># The text of a button</span></span><br><span class="line">  <span class="attr">default:</span> <span class="string">繁</span></span><br><span class="line">  <span class="comment"># the language of website (1 - Traditional Chinese/ 2 - Simplified Chinese）</span></span><br><span class="line">  <span class="attr">defaultEncoding:</span> <span class="number">2</span></span><br><span class="line">  <span class="comment"># Time delay</span></span><br><span class="line">  <span class="attr">translateDelay:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># The text of the button when the language is Simplified Chinese</span></span><br><span class="line">  <span class="attr">msgToTraditionalChinese:</span> <span class="string">&#x27;繁&#x27;</span></span><br><span class="line">  <span class="comment"># The text of the button when the language is Traditional Chinese</span></span><br><span class="line">  <span class="attr">msgToSimplifiedChinese:</span> <span class="string">&#x27;简&#x27;</span></span><br><span class="line"><span class="attr">readmode:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">darkmode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Toggle Button to switch dark/light mode</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Switch dark/light mode automatically (自動切換 dark mode和 light mode)</span></span><br><span class="line">  <span class="comment"># autoChangeMode: 1  Following System Settings, if the system doesn&#x27;t support dark mode, it will switch dark mode between 6 pm to 6 am</span></span><br><span class="line">  <span class="comment"># autoChangeMode: 2  Switch dark mode between 6 pm to 6 am</span></span><br><span class="line">  <span class="comment"># autoChangeMode: false</span></span><br><span class="line">  <span class="attr">autoChangeMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Set the light mode time. The value is between 0 and 24. If not set, the default value is 6 and 18</span></span><br><span class="line">  <span class="attr">start:</span> <span class="comment"># 8</span></span><br><span class="line">  <span class="attr">end:</span> <span class="comment"># 22</span></span><br><span class="line"><span class="attr">rightside_scroll_percent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="14-数学"><a href="#14-数学" class="headerlink" title="14.数学"></a>14.数学</h2><p>设置页面对mathjax和katex的支持，当per_page设置为false，须在要启用的页面中的front-matter中加上对应参数</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">katex:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hide_scrollbar:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="15-搜索"><a href="#15-搜索" class="headerlink" title="15.搜索"></a>15.搜索</h2><ol><li>添加一个本地搜索，使用命令<code>npm install hexo-generator-search --save</code>安装搜索插件</li><li>在配置文件底下加入local search的设置<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>在butterfly的配置中修改成以下设置<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">CDN:</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="16-分享系统"><a href="#16-分享系统" class="headerlink" title="16.分享系统"></a>16.分享系统</h2><p>在文章页底下的分享链接，有两种，选一即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sharejs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">sites:</span> <span class="string">facebook,twitter,wechat,weibo,qq</span></span><br><span class="line"><span class="attr">addtoany:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">item:</span> <span class="string">facebook,twitter,wechat,sina_weibo,facebook_messenger,email,copy_link</span></span><br></pre></td></tr></table></figure><h2 id="17-评论系统"><a href="#17-评论系统" class="headerlink" title="17.评论系统"></a>17.评论系统</h2><p>支持的评论系统有：Disqus&#x2F;Disqusjs&#x2F;Livere&#x2F;Gitalk&#x2F;Valine&#x2F;Waline&#x2F;Utterances&#x2F;Facebook Comments&#x2F;Twikoo&#x2F;Giscus&#x2F;Remark42&#x2F;Artalk</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">utterances</span></span><br><span class="line">  <span class="attr">text:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">card_post_count:</span> <span class="literal">false</span> </span><br></pre></td></tr></table></figure><h2 id="18-在线聊天服务"><a href="#18-在线聊天服务" class="headerlink" title="18.在线聊天服务"></a>18.在线聊天服务</h2><p>展示右下角的聊天按钮，下面有几个支持的平台，去配置文件里看吧</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">chat_btn:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">chat_hide_show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="19-网站UI配色"><a href="#19-网站UI配色" class="headerlink" title="19.网站UI配色"></a>19.网站UI配色</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme_color:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">main:</span> <span class="string">&quot;#49B1F5&quot;</span></span><br><span class="line">  <span class="attr">paginator:</span> <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">  <span class="attr">button_hover:</span> <span class="string">&quot;#FF7242&quot;</span></span><br><span class="line">  <span class="attr">text_selection:</span> <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">  <span class="attr">link_color:</span> <span class="string">&quot;#99a9bf&quot;</span></span><br><span class="line">  <span class="attr">meta_color:</span> <span class="string">&quot;#858585&quot;</span></span><br><span class="line">  <span class="attr">hr_color:</span> <span class="string">&quot;#A4D8FA&quot;</span></span><br><span class="line">  <span class="attr">code_foreground:</span> <span class="string">&quot;#F47466&quot;</span></span><br><span class="line">  <span class="attr">code_background:</span> <span class="string">&quot;rgba(27, 31, 35, .05)&quot;</span></span><br><span class="line">  <span class="attr">toc_color:</span> <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">  <span class="attr">blockquote_padding_color:</span> <span class="string">&quot;#49b1f5&quot;</span></span><br><span class="line">  <span class="attr">blockquote_background_color:</span> <span class="string">&quot;#49b1f5&quot;</span></span><br><span class="line">  <span class="attr">scrollbar_color:</span> <span class="string">&quot;#49b1f5&quot;</span></span><br><span class="line">  <span class="attr">meta_theme_color_light:</span> <span class="string">&quot;ffffff&quot;</span></span><br><span class="line">  <span class="attr">meta_theme_color_dark:</span> <span class="string">&quot;#0d0d0d&quot;</span></span><br></pre></td></tr></table></figure><h2 id="20-网站背景和页脚背景"><a href="#20-网站背景和页脚背景" class="headerlink" title="20.网站背景和页脚背景"></a>20.网站背景和页脚背景</h2><p>我想要页脚为透明的所以设置成<code>none</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">background:</span> <span class="string">url(/img/background.jpg)</span></span><br><span class="line"><span class="attr">footer_bg:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">mask:</span></span><br><span class="line">  <span class="attr">header:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="21-导航栏和页脚的蒙皮效果"><a href="#21-导航栏和页脚的蒙皮效果" class="headerlink" title="21.导航栏和页脚的蒙皮效果"></a>21.导航栏和页脚的蒙皮效果</h2><p>透明页脚所以关闭页脚的蒙皮效果</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mask:</span></span><br><span class="line">  <span class="attr">header:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="22-页面美化"><a href="#22-页面美化" class="headerlink" title="22.页面美化"></a>22.页面美化</h2><p>在标题前加上一个小图标<code>\f863</code>是小风车，然后可以在inject中添加一个旋转动画使其旋转</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">beautify:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">title-prefix-icon:</span> <span class="string">&#x27;\f863&#x27;</span></span><br><span class="line">  <span class="attr">title-prefix-icon-color:</span>  <span class="string">&#x27;#F47466&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="23-字体选择"><a href="#23-字体选择" class="headerlink" title="23.字体选择"></a>23.字体选择</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">global-font-size:</span> <span class="string">16px</span></span><br><span class="line">  <span class="attr">code-font-size:</span> <span class="string">15px</span></span><br><span class="line">  <span class="attr">font-family:</span> <span class="string">-apple-system,</span> <span class="string">BlinkMacSystemFont,</span> <span class="string">&#x27;Segoe UI&#x27;</span><span class="string">,</span> <span class="string">&#x27;Helvetica Neue&#x27;</span><span class="string">,</span> <span class="string">Lato,</span> <span class="string">Roboto,</span> <span class="string">&#x27;PingFang SC&#x27;</span><span class="string">,</span> <span class="string">&#x27;Microsoft YaHei&#x27;</span><span class="string">,</span> <span class="string">sans-serif</span></span><br><span class="line">  <span class="attr">code-font-family:</span> <span class="string">consolas,</span> <span class="string">Menlo,</span> <span class="string">&#x27;PingFang SC&#x27;</span><span class="string">,</span> <span class="string">&#x27;Microsoft YaHei&#x27;</span><span class="string">,</span> <span class="string">sans-serif</span></span><br></pre></td></tr></table></figure><h2 id="24-分割线图标"><a href="#24-分割线图标" class="headerlink" title="24.分割线图标"></a>24.分割线图标</h2><p><code>\f0c4</code>是剪刀</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hr_icon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">&#x27;\f0c4&#x27;</span></span><br><span class="line">  <span class="attr">icon-top:</span> <span class="string">-10px</span></span><br></pre></td></tr></table></figure><h2 id="25-主页副标题"><a href="#25-主页副标题" class="headerlink" title="25.主页副标题"></a>25.主页副标题</h2><p>effect为打字效果，可以改变副标题的源使其更动态</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">typed_option:</span></span><br><span class="line">  <span class="attr">source:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">sub:</span></span><br></pre></td></tr></table></figure><h2 id="26-加载动画"><a href="#26-加载动画" class="headerlink" title="26.加载动画"></a>26.加载动画</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">preloader:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">source:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">pace_css_url:</span></span><br></pre></td></tr></table></figure><h2 id="27-字数统计"><a href="#27-字数统计" class="headerlink" title="27.字数统计"></a>27.字数统计</h2><p>在使用前需使用命令<code>npm install hexo-wordcount --save</code>安装插件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="28-弹窗显示"><a href="#28-弹窗显示" class="headerlink" title="28.弹窗显示"></a>28.弹窗显示</h2><p>位置可选top-left &#x2F; top-center &#x2F; top-right &#x2F; bottom-left &#x2F; bottom-center &#x2F; bottom-right</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">snackbar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top-right</span></span><br><span class="line">  <span class="attr">bg_light:</span> <span class="string">&#x27;#49b1f5&#x27;</span></span><br><span class="line">  <span class="attr">bg_dark:</span> <span class="string">&#x27;#1f1f1f&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="29-中英文间空格"><a href="#29-中英文间空格" class="headerlink" title="29.中英文间空格"></a>29.中英文间空格</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pangu:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo搭建博客基础（二）</title>
      <link href="/blog/post/sunqxf91.html"/>
      <url>/blog/post/sunqxf91.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><h3 id="博客搭建导航-🌏"><a href="#博客搭建导航-🌏" class="headerlink" title="博客搭建导航 🌏"></a>博客搭建导航 🌏</h3><ol><li><a href="/blog/post/6706d621.html" title="基于hexo搭建博客基础（一）">基于hexo搭建博客基础（一）</a></li><li><a href="/blog/post/sunqxf91.html" title="基于hexo搭建博客基础（二）">基于hexo搭建博客基础（二）</a></li><li><a href="/blog/post/r51bjcg8.html" title="基于hexo搭建博客基础（三）">基于hexo搭建博客基础（三）</a></li></ol></div><script src='/js/series.js'></script><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><ol><li>这个系列是关于如何基于hexo框架以及GitHub Pages搭建自己的博客网站。</li><li>❗创建本系列博客的初衷也只是为了记录一下自己的学习过程，以防之后健忘❗。</li><li>虽说如此，但是本系列博客已经写的很详细了，可能后面的内容会比较简略，就算是零基础也能懂大部分。</li><li>配置文件参数含义在<a href="https://hexo.io/zh-cn/docs/configuration">官方</a>处都有讲解，这里只讲述自己修改了的部分。</li></ol><h2 id="2-Site信息修改"><a href="#2-Site信息修改" class="headerlink" title="2.Site信息修改"></a>2.Site信息修改</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">AnA.</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">🥳🥳欢迎来到我的小站🥳🥳</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">一个讨论技术和作为个人知识库的小站</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">AnA</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure><p>language常用参数:</p><ul><li>en（英文）</li><li>zh-CN（中文简体（中国大陆））</li><li>zh-HK（中文繁体（中国香港））</li><li>zh-TW（中文繁体（中国台湾））</li></ul><h2 id="3-URL信息修改"><a href="#3-URL信息修改" class="headerlink" title="3.URL信息修改"></a>3.URL信息修改</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://ana-0823.github.io</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">post/:code/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>url：站内链接的前缀地址，将其改为自己站点的地址<br>permalink：站内文章的地址（:code是我自定义的参数，在post的markdown文档的<code>front-matter</code>中加上就好）</p><h2 id="4-标签页"><a href="#4-标签页" class="headerlink" title="4.标签页"></a>4.标签页</h2><ol><li>在博客根目录下打开终端输入以下命令：<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo new page tags</span><br></pre></td></tr></table></figure></li><li>会在博客根目录中的<code>\source\</code>生成一个含有<code>index.md</code>文件的<code>tags</code>文件夹。</li><li>修改<code>index.md</code>，添加<code>type: &quot;tags&quot;</code>。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2024-05-02 03:31:43</span><br><span class="line"><span class="section">type: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></li><li>安装以上步骤生成<code>categories</code>还有<code>link</code>标签页。</li></ol><h2 id="5-友链"><a href="#5-友链" class="headerlink" title="5.友链"></a>5.友链</h2><p>在博客根目录下的<code>\source\_data</code>中创建一个link.yml文件，在这里按以下格式填写需要的链接：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="number">1</span><span class="string">.技术支持</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">本网站的搭建由以下开源作者提供技术支持</span></span><br><span class="line">  <span class="attr">link_list:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span> </span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.io/zh-cn/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">快速、简单且强大的网志框架</span></span><br><span class="line">      <span class="attr">siteshot:</span> </span><br></pre></td></tr></table></figure><h2 id="6-子页面"><a href="#6-子页面" class="headerlink" title="6.子页面"></a>6.子页面</h2><p>子页面就是普通的页面，通过<code>npx hexo page &lt;page name&gt;</code>创建就好<br>然后就可以在对应的<code>index.md</code>中编写页面内容</p><h2 id="7-关于markdown文档的front-matter"><a href="#7-关于markdown文档的front-matter" class="headerlink" title="7.关于markdown文档的front-matter"></a>7.关于markdown文档的front-matter</h2><p><code>front-matter</code>就是markdown文档最上方以<code>---</code>分割的区域，作为页面和文章<code>metadata</code></p><ul><li>page front-matter用于配置页面</li><li>post front-matter用于配置文章</li></ul><h3 id="page-front-matter"><a href="#page-front-matter" class="headerlink" title="page front-matter"></a>page front-matter</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aside:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>title</td><td>【必需】页面标题</td></tr><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标签、分类和友链页面需要配置</td></tr><tr><td>updated</td><td>【可选】页面更新日期</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块(默认 true)</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>kates</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</td></tr></tbody></table><h3 id="post-front-matter"><a href="#post-front-matter" class="headerlink" title="post front-matter"></a>post front-matter</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">comments:</span></span><br><span class="line"><span class="emphasis">cover:</span></span><br><span class="line"><span class="emphasis">toc:</span></span><br><span class="line"><span class="emphasis">toc_</span>number:</span><br><span class="line">toc<span class="emphasis">_style_</span>simple:</span><br><span class="line">copyright:</span><br><span class="line">copyright<span class="emphasis">_author:</span></span><br><span class="line"><span class="emphasis">copyright_</span>author<span class="emphasis">_href:</span></span><br><span class="line"><span class="emphasis">copyright_</span>url:</span><br><span class="line">copyright<span class="emphasis">_info:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line"><span class="section">aside:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标签</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false&#x2F;图片地址&#x2F;留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>toc_style_simple</td><td>【可选】显示 toc 简洁模式</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table><h2 id="8-安装主题"><a href="#8-安装主题" class="headerlink" title="8.安装主题"></a>8.安装主题</h2><p>推荐🦋hexo-theme-butterfly主题（当然也可以安装其他的主题），输入以下命令安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-theme-butterfly</span></span><br></pre></td></tr></table></figure><h2 id="9-应用主题"><a href="#9-应用主题" class="headerlink" title="9.应用主题"></a>9.应用主题</h2><ol><li>修改网站配置文件<code>_config.yml</code>，将主题更改为<code>butterfly</code><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure></li><li>安装<code>pug</code>和<code>stylus</code>渲染器，这两个渲染器都是<code>butterfly</code>生成页面的依赖包：<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-renderer-pug</span> hexo<span class="literal">-renderer-stylus</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure></li><li>为了后续修改方便，将butterfly的配置文件<code>_config.yml</code>复制到项目根目录底下，并改名为<code>_config.butterfly.yml</code>。</li></ol><h2 id="10-标签外挂"><a href="#10-标签外挂" class="headerlink" title="10.标签外挂"></a>10.标签外挂</h2><p>❗❗❗标签外挂是hexo特有的功能，并不是markdown的标准格式，以下的写法仅限于butterfly主题，将其应用于其他主题可能会导致报错❗❗❗</p><h3 id="10-1-note-Bootstrap-Callout"><a href="#10-1-note-Bootstrap-Callout" class="headerlink" title="10.1.note (Bootstrap Callout)"></a>10.1.note (Bootstrap Callout)</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/#Note-Bootstrap-Callout">官方链接🛫</a><br>使用方法有两种，语法格式：</p><div class="tabs" id="tab1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="tab1-1">第一种</button><button type="button" class="tab " data-href="tab1-2">第二种</button></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;</span><br><span class="line">默认 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div></div><div class="tab-item-content" id="tab1-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>当style缺省时启用配置文件中的设置</p><h3 id="10-2-Gallery相册图库"><a href="#10-2-Gallery相册图库" class="headerlink" title="10.2.Gallery相册图库"></a>10.2.Gallery相册图库</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/#Gallery%E7%9B%B8%E5%86%8A%E5%9C%96%E5%BA%AB">官方链接🛫</a><br>图库集合，语法格式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>name：图库名字</li><li>description：图库描述</li><li>link：跳转链接</li><li>img-url：封面图片</li></ul><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup &#x27;图库&#x27; &#x27;个人喜欢的一些图片🥰🥰&#x27; &#x27;/gallery/&#x27; &#x27;/img/background.jpg&#x27; %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><div class="gallery-group-main"><figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='/blog/img/background.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">图库</div>  <p>个人喜欢的一些图片🥰🥰</p>  <a href='/blog/gallery/'></a>  </figcaption>  </figure>  </div><h3 id="10-3-Gallery相册"><a href="#10-3-Gallery相册" class="headerlink" title="10.3.Gallery相册"></a>10.3.Gallery相册</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/#Gallery%E7%9B%B8%E5%86%8A">官方链接🛫</a><br>图库，语法格式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery [lazyload],[rowHeight],[limit] %&#125;</span><br><span class="line">![](<span class="link">img-url</span>)</span><br><span class="line">...</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">/img/1.jpg</span>)</span><br><span class="line">![](<span class="link">/img/2.jpg</span>)</span><br><span class="line">![](<span class="link">/img/3.jpg</span>)</span><br><span class="line">![](<span class="link">/img/4.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://lanal.site/file/blog/post-cover/1.jpg","alt":""},{"url":"https://lanal.site/file/blog/post-cover/2.jpg","alt":""},{"url":"https://lanal.site/file/blog/post-cover/3.jpg","alt":""},{"url":"https://lanal.site/file/blog/post-cover/4.jpg","alt":""}]</div>      <div class="gallery-items">      </div>    </div><h3 id="10-4-tag-hide"><a href="#10-4-tag-hide" class="headerlink" title="10.4.tag-hide"></a>10.4.tag-hide</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/#tag-hide">官方链接🛫</a><br>这个标签可以隐藏一些内容🧐，有三种可选：</p><div class="tabs" id="tab2"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="tab2-1">Inline</button><button type="button" class="tab " data-href="tab2-2">Block</button><button type="button" class="tab " data-href="tab2-3">Toggle</button></ul><div class="tab-contents"><div class="tab-item-content active" id="tab2-1"><p>可以在文本中的按钮后隐藏一些东西，仅限文字</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideInline content,display,bg,color %&#125;</span><br></pre></td></tr></table></figure><ul><li>content: 文本内容</li><li>display: 按钮显示的文字（可选）</li><li>bg: 按钮的背景颜色（可选）</li><li>color: 按钮文字的颜色（可选）</li></ul><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">🤣👉&#123;% hideInline 🤡,你是谁？,#66CCCC,#fff %&#125;</span><br><span class="line">🤣👉&#123;% hideInline 🤡 %&#125;</span><br></pre></td></tr></table></figure><p>🤣👉<span class="hide-inline"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">你是谁？<br>  </button><span class="hide-content">🤡</span></span><br>🤣👉<span class="hide-inline"><button type="button" class="hide-button" style="">Click<br>  </button><span class="hide-content">🤡</span></span></p></div><div class="tab-item-content" id="tab2-2"><p>可以在一个独立的按钮后隐藏很多内容，包括图片，代码块等</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><ul><li>content: 文本内容</li><li>display: 按钮显示的文字（可选）</li><li>bg: 按钮的背景颜色（可选）</li><li>color: 按钮文字的颜色（可选）</li></ul><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 猜猜这里有什么？,#66CCCC,#fff %&#125;</span><br><span class="line">啥也没有🤣👉🤡</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br><span class="line">&#123;% hideBlock 你在再猜猜这里有什么？,#66CCCC,#fff %&#125;</span><br><span class="line">🤪还是啥也没有🤣👉🤡</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br><span class="line">&#123;% hideBlock 这里真的有东西的😲,#66CCCC,#fff %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: relative; padding: 30% 45%;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute; width: 100%; height: 100%; left: 0; top: 0;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=80433022&amp;bvid=BV1GJ411x7h7&amp;cid=137649199&amp;p=1&amp;danmaku=0&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">猜猜这里有什么？    </button><div class="hide-content"><p>啥也没有🤣👉🤡</p></div></div><div class="hide-block"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">你在再猜猜这里有什么？    </button><div class="hide-content"><p>🤪还是啥也没有🤣👉🤡</p></div></div><div class="hide-block"><button type="button" class="hide-button" style="background-color: #66CCCC;color: #fff">这里真的有东西的😲    </button><div class="hide-content"><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=80433022&bvid=BV1GJ411x7h7&cid=137649199&p=1&danmaku=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div></div></div></div><div class="tab-item-content" id="tab2-3"><p>折叠的收缩栏</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><ul><li>content: 文本内容</li><li>display: 按钮显示的文字（可选）</li><li>bg: 按钮的背景颜色（可选）</li><li>color: 按钮文字的颜色（可选）</li></ul><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle 还要再来一次吗😲,#1f1f1f,#fff %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: relative; padding: 30% 45%;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute; width: 100%; height: 100%; left: 0; top: 0;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=80433022&amp;bvid=BV1GJ411x7h7&amp;cid=137649199&amp;p=1&amp;danmaku=0&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><details class="toggle" style="border: 1px solid #1f1f1f"><summary class="toggle-button" style="background-color: #1f1f1f;color: #fff">还要再来一次吗😲</summary><div class="toggle-content"><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=80433022&bvid=BV1GJ411x7h7&cid=137649199&p=1&danmaku=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div></div></details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="10-5-mermaid"><a href="#10-5-mermaid" class="headerlink" title="10.5.mermaid"></a>10.5.mermaid</h3><p>使用mermaid标签可以绘制Flowchart（流程图）、Sequence diagram（时序图 ）、Class Diagram（类别图）、State Diagram（状态图）、Gantt（甘特图）和Pie Chart（圆形图），具体可以查看<a href="https://mermaid.js.org/">mermaid文档🛫</a>以及<a href="https://butterfly.js.org/posts/4aa8abbe/#mermaid">butterfly官方🛫</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">pie</span><br><span class="line"><span class="code">    title 一个样例图</span></span><br><span class="line"><span class="code">    &quot;一部分&quot; : 33</span></span><br><span class="line"><span class="code">    &quot;二部分&quot; : 17</span></span><br><span class="line"><span class="code">    &quot;三部分&quot; : 45</span></span><br><span class="line"><span class="code">    &quot;四部分&quot; :  5</span></span><br><span class="line"><span class="code">&#123;% endmermaid %&#125;</span></span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  pie    title 一个样例图    &quot;一部分&quot; : 33    &quot;二部分&quot; : 17    &quot;三部分&quot; : 45    &quot;四部分&quot; :  5  </pre></div><h3 id="10-6-tabs"><a href="#10-6-tabs" class="headerlink" title="10.6.tabs"></a>10.6.tabs</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/#Tabs">官方链接🛫</a><br>页面中的分栏</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs %&#125;</span><br><span class="line">&lt;!-- tab tab1 --&gt;</span><br><span class="line">😎</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab tab2 --&gt;</span><br><span class="line">😍</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab tab3 --&gt;</span><br><span class="line">🤩</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="tab3"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="tab3-1">tab1</button><button type="button" class="tab " data-href="tab3-2">tab2</button><button type="button" class="tab " data-href="tab3-3">tab3</button></ul><div class="tab-contents"><div class="tab-item-content active" id="tab3-1"><p>😎</p></div><div class="tab-item-content" id="tab3-2"><p>😍</p></div><div class="tab-item-content" id="tab3-3"><p>🤩</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="10-7-button"><a href="#10-7-button" class="headerlink" title="10.7.button"></a>10.7.button</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/#Button">官方链接🛫</a><br>按钮</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn &#x27;https://ana-0823.github.io/&#x27;,回到主页,fas fa-home,block %&#125;</span><br><span class="line">&#123;% btn &#x27;https://www.bilibili.com/video/BV1GJ411x7h7/?share<span class="emphasis">_source=copy_</span>web&amp;vd<span class="emphasis">_source=5ebc5a2a2473be67c2088121daedad91/&#x27;,😲,,block %&#125;</span></span><br></pre></td></tr></table></figure><a class="btn-beautify block" href="https://ana-0823.github.io/"   title="回到主页"><i class="fas fa-home"></i><span>回到主页</span></a><a class="btn-beautify block" href="https://www.bilibili.com/video/BV1GJ411x7h7/?share_source=copy_web&vd_source=5ebc5a2a2473be67c2088121daedad91/"   title="😲"><span>😲</span></a><h3 id="10-8-inlineImg"><a href="#10-8-inlineImg" class="headerlink" title="10.8.inlineImg"></a>10.8.inlineImg</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/#inlineImg">官方链接🛫</a><br>以<code>内联元素</code>显示的图片，使用此标签</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineImg [src] [height] %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🤣👉&#123;% inlineImg /img/jocker.gif 100px %&#125;</span><br></pre></td></tr></table></figure><p>🤣👉<img class="inline-img" src="https://lanal.site/file/blog/post/sunqxf91/jocker.gif" style="height:100px" /></p><h3 id="10-9-label"><a href="#10-9-label" class="headerlink" title="10.9.label"></a>10.9.label</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/#label">官方链接🛫</a><br>高亮标签</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个&#123;% label 高亮 red %&#125;，这是另一个&#123;% label 高亮 pink %&#125;</span><br></pre></td></tr></table></figure><p>这是一个<mark class="hl-label red">高亮</mark> ，这是另一个<mark class="hl-label pink">高亮</mark> </p><h3 id="10-10-timeline"><a href="#10-10-timeline" class="headerlink" title="10.10.timeline"></a>10.10.timeline</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/#timeline">官方链接🛫</a><br>时间线</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline title,color %&#125;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">content</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">content</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2024 %&#125;</span><br><span class="line">&lt;!-- timeline 05-01 --&gt;</span><br><span class="line">test</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 05-02 --&gt;</span><br><span class="line">test2</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2024</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-01</p></div></div><div class='timeline-item-content'><p>test1</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-02</p></div></div><div class='timeline-item-content'><p>test2</p></div></div></div><h3 id="10-11-flink"><a href="#10-11-flink" class="headerlink" title="10.11.flink"></a>10.11.flink</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/#flink">官方链接🛫</a><br>添加友链</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% flink %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endflink %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% flink %&#125;</span><br><span class="line"><span class="bullet">-</span> class<span class="emphasis">_name: 技术支持</span></span><br><span class="line"><span class="emphasis">  class_</span>desc: 本网站的搭建由以下开源作者提供技术支持</span><br><span class="line">  link<span class="emphasis">_list: </span></span><br><span class="line"><span class="emphasis">    - name: Hexo </span></span><br><span class="line"><span class="emphasis">      link: https://hexo.io/zh-cn/</span></span><br><span class="line"><span class="emphasis">      avatar: https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line"><span class="emphasis">      descr: 快速、简单且强大的网志框架</span></span><br><span class="line"><span class="emphasis">      siteshot:</span></span><br><span class="line"><span class="emphasis">    - name: butterfly</span></span><br><span class="line"><span class="emphasis">      link: https://butterfly.js.org/</span></span><br><span class="line"><span class="emphasis">      avatar: https://butterfly.js.org/img/avatar.png</span></span><br><span class="line"><span class="emphasis">      descr: butterfly美化主题🦋</span></span><br><span class="line"><span class="emphasis">      siteshot: </span></span><br><span class="line"><span class="emphasis">&#123;% endflink %&#125;</span></span><br></pre></td></tr></table></figure><div class="flink"><div class="flink-name">技术支持</div><div class="flink-desc">本网站的搭建由以下开源作者提供技术支持</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://hexo.io/zh-cn/" title="Hexo" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg" onerror='this.onerror=null;this.src="/blog/img/friend_404.gif"' alt="Hexo" />              </div>              <div class="flink-item-name">Hexo</div>               <div class="flink-item-desc" title="快速、简单且强大的网志框架">快速、简单且强大的网志框架</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://butterfly.js.org/" title="butterfly" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://butterfly.js.org/img/avatar.png" onerror='this.onerror=null;this.src="/blog/img/friend_404.gif"' alt="butterfly" />              </div>              <div class="flink-item-name">butterfly</div>               <div class="flink-item-desc" title="butterfly美化主题🦋">butterfly美化主题🦋</div>            </a>          </div></div></div><h3 id="10-12-abcjs乐谱"><a href="#10-12-abcjs乐谱" class="headerlink" title="10.12.abcjs乐谱"></a>10.12.abcjs乐谱</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/?highlight=abc#abcjs-%E6%A8%82%E8%AD%9C">官方链接🛫</a><br>在页面上渲染乐谱<br>在主题配置中设置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">abcjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>格式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% score %&#125;</span><br><span class="line">乐谱代码</span><br><span class="line">&#123;% endscore %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% score %&#125;</span><br><span class="line">X:1</span><br><span class="line">T:alternate heads</span><br><span class="line">M:C</span><br><span class="line">L:1/8</span><br><span class="line">U:n=!style=normal!</span><br><span class="line">K:C treble style=rhythm</span><br><span class="line">&quot;Am&quot; BBBB B2 B&gt;B | &quot;Dm&quot; B2 B/B/B &quot;C&quot; B4 |&quot;Am&quot; B2 nGnB B2 nGnA | &quot;Dm&quot; nDB/B/ nDB/B/ &quot;C&quot; nCB/B/ nCB/B/ |B8| B0 B0 B0 B0 |]</span><br><span class="line">%%text This translates to:</span><br><span class="line">[<span class="string">M:C</span>][<span class="symbol">K:style=normal</span>]</span><br><span class="line">[<span class="string">A,EAce</span>][<span class="symbol">A,EAce</span>][<span class="string">A,EAce</span>][<span class="symbol">A,EAce</span>] [A,EAce]2 [A,EAce]&gt;[A,EAce] |[DAdf]2 [DAdf]/[DAdf]/[DAdf] [CEGce]4 |[A,EAce]2 GA [A,EAce] GA |D[DAdf]/[DAdf]/ D[DAdf]/[DAdf]/ C [CEGce]/[CEGce]/ C[CEGce]/[CEGce]/ |[CEGce]8 | [CEGce]2 [CEGce]2 [CEGce]2 [CEGce]2 |]</span><br><span class="line">GAB2 !style=harmonic![gb]4|GAB2 [K: style=harmonic]gbgb|</span><br><span class="line">[K: style=x]</span><br><span class="line">C/A,/ C/C/E C/zz2|</span><br><span class="line">w:Rock-y did-nt like that</span><br><span class="line">&#123;% endscore %&#125;</span><br></pre></td></tr></table></figure><div class="abc-music-sheet">X:1T:alternate headsM:CL:1/8U:n=!style=normal!K:C treble style=rhythm&quot;Am&quot; BBBB B2 B&gt;B | &quot;Dm&quot; B2 B/B/B &quot;C&quot; B4 |&quot;Am&quot; B2 nGnB B2 nGnA | &quot;Dm&quot; nDB/B/ nDB/B/ &quot;C&quot; nCB/B/ nCB/B/ |B8| B0 B0 B0 B0 |]%%text This translates to:[M:C][K:style=normal][A,EAce][A,EAce][A,EAce][A,EAce] [A,EAce]2 [A,EAce]&gt;[A,EAce] |[DAdf]2 [DAdf]/[DAdf]/[DAdf] [CEGce]4 |[A,EAce]2 GA [A,EAce] GA |D[DAdf]/[DAdf]/ D[DAdf]/[DAdf]/ C [CEGce]/[CEGce]/ C[CEGce]/[CEGce]/ |[CEGce]8 | [CEGce]2 [CEGce]2 [CEGce]2 [CEGce]2 |]GAB2 !style=harmonic![gb]4|GAB2 [K: style=harmonic]gbgb|[K: style=x]C/A,/ C/C/E C/zz2|w:Rock-y did-nt like that</div><h3 id="10-13-series系列文章"><a href="#10-13-series系列文章" class="headerlink" title="10.13.series系列文章"></a>10.13.series系列文章</h3><p>详细介绍看<a href="https://butterfly.js.org/posts/4aa8abbe/?highlight=abc#series-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0">官方链接🛫</a><br>在页面上显示系列文章<br>修改主题配置文件如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">series:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">orderBy:</span> <span class="string">&#x27;date&#x27;</span></span><br><span class="line">  <span class="attr">order:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>写法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% series %&#125;</span><br><span class="line">&#123;% series [series name] %&#125;</span><br></pre></td></tr></table></figure><p>要在文章的<code>front-matter</code>上添加参数series，给一个标识</p><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% series hexo %&#125;</span><br></pre></td></tr></table></figure><ol><li><a href="/blog/post/6706d621.html" title="基于hexo搭建博客基础（一）">基于hexo搭建博客基础（一）</a></li><li><a href="/blog/post/sunqxf91.html" title="基于hexo搭建博客基础（二）">基于hexo搭建博客基础（二）</a></li><li><a href="/blog/post/r51bjcg8.html" title="基于hexo搭建博客基础（三）">基于hexo搭建博客基础（三）</a></li></ol><h3 id="10-14-aplayer播放器"><a href="#10-14-aplayer播放器" class="headerlink" title="10.14.aplayer播放器"></a>10.14.aplayer播放器</h3><p>详细介绍看<a href="https://github.com/MoePlayer/hexo-tag-aplayer">官方文档</a><br>通过命令<code>npm install --save hexo-tag-aplayer</code>安装插件<br>要在配置文件中修改如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>主题配置中修改如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>per_page为false时须在要使用的页面的<code>front-matter</code>中添加aplayer参数<br>为了使切换页面时音乐不中断，要打开pjax</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br></pre></td></tr></table></figure><p>写法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% meting id server type %&#125;</span><br></pre></td></tr></table></figure><p>样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% meting &quot;9992949674&quot; &quot;netease&quot; &quot;playlist&quot;%&#125;</span><br></pre></td></tr></table></figure>    <div id="aplayer-rzdgXkSD" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="9992949674" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo搭建博客基础（一）</title>
      <link href="/blog/post/6706d621.html"/>
      <url>/blog/post/6706d621.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><h3 id="博客搭建导航-🌏"><a href="#博客搭建导航-🌏" class="headerlink" title="博客搭建导航 🌏"></a>博客搭建导航 🌏</h3><ol><li><a href="/blog/post/6706d621.html" title="基于hexo搭建博客基础（一）">基于hexo搭建博客基础（一）</a></li><li><a href="/blog/post/sunqxf91.html" title="基于hexo搭建博客基础（二）">基于hexo搭建博客基础（二）</a></li><li><a href="/blog/post/r51bjcg8.html" title="基于hexo搭建博客基础（三）">基于hexo搭建博客基础（三）</a></li></ol></div><script src='/js/series.js'></script><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><ol><li>这个系列是关于如何基于 hexo 框架以及 GitHub Pages 搭建自己的博客网站。</li><li>❗ 创建本系列博客的初衷也只是为了记录一下自己的学习过程，以防之后健忘 ❗。</li><li>虽说如此，但是本系列博客已经写的很详细了，可能后面的内容会比较简略，就算是零基础也能懂大部分。</li></ol><h2 id="2-环境与工具准备"><a href="#2-环境与工具准备" class="headerlink" title="2.环境与工具准备"></a>2.环境与工具准备</h2><p>本系列是面向 Windows 用户的，所需工具：</p><ul><li>操作系统：Windows11</li><li>Node.js</li><li>Git</li><li>Hexo</li><li>GitHub 账号</li><li>文本编辑器（随便一个都行，甚至 word 文档也可以 🤣，不过还是推荐 VSCode）</li></ul><h2 id="3-Node-js-的安装"><a href="#3-Node-js-的安装" class="headerlink" title="3.Node.js 的安装"></a>3.Node.js 的安装</h2><ol><li>下载地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></li><li>安装。</li><li>打开终端，输入<code>node -v</code>来查看 node.js 的版本，看到版本号则为安装成功。</li><li>修改 npm 源，看情况，有梯子就不用了，要修改就按照输入以下命令：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry &lt;替换的npm源&gt;</span><br></pre></td></tr></table></figure><h2 id="4-安装-Hexo"><a href="#4-安装-Hexo" class="headerlink" title="4.安装 Hexo"></a>4.安装 Hexo</h2><ol><li>输入以下命令：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br></pre></td></tr></table></figure><ol start="2"><li>以上命令为全局安装（全局安装路径为：C:\Users\Administrator\AppData\Roaming\npm，输入<code>npm config get prefix</code>查看），安装的包将会放到此路径底下的 node_modules 里，如果不想全局的话，就在指定路径底下打开终端，输入以下命令：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-cli</span></span><br></pre></td></tr></table></figure><ol start="3"><li>输入<code>npx hexo -v</code>查看 hexo 版本（不是全局安装的话要将终端切换到指定路径），看到版本号就是安装成功了。</li></ol><h2 id="5-GitHub-创建仓库"><a href="#5-GitHub-创建仓库" class="headerlink" title="5.GitHub 创建仓库"></a>5.GitHub 创建仓库</h2><p>创建一个名为&lt;GitHub 用户名&gt;.github.io 的仓库<br><strong>❗❗❗ 仓库名的格式必须为&lt;GitHub 用户名&gt;.github.io，否则后面会出现 bug 还有 404❗❗❗</strong></p><h2 id="6-Git-安装"><a href="#6-Git-安装" class="headerlink" title="6.Git 安装"></a>6.Git 安装</h2><ol><li>下载地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li><li>安装</li><li>配置用户名和邮箱</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config <span class="literal">--global</span> user.name <span class="string">&quot;用户名&quot;</span></span><br><span class="line">git config <span class="literal">--global</span> user.email <span class="string">&quot;邮箱&quot;</span></span><br></pre></td></tr></table></figure><h2 id="7-连接-GitHub"><a href="#7-连接-GitHub" class="headerlink" title="7.连接 GitHub"></a>7.连接 GitHub</h2><p>两种都可以</p><h3 id="使用-ssh-连接"><a href="#使用-ssh-连接" class="headerlink" title="使用 ssh 连接"></a>使用 ssh 连接</h3><ol><li>生成 ssh 密钥对,生成的公钥和密钥在 C:\Users\Administrator.shh 里，输入以下命令：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-C</span> <span class="string">&quot;邮箱&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>输入以下命令查看 ssh 公钥</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> .ssh\id_rsa.pub</span><br></pre></td></tr></table></figure><ol start="3"><li>将公钥复制到 GitHub 账号里。</li></ol><h3 id="使用-https-连接"><a href="#使用-https-连接" class="headerlink" title="使用 https 连接"></a>使用 https 连接</h3><p>直接用就好了</p><h2 id="8-初始化-Hexo-项目"><a href="#8-初始化-Hexo-项目" class="headerlink" title="8.初始化 Hexo 项目"></a>8.初始化 Hexo 项目</h2><ol><li>在目标路径打开终端（不是全局安装的就在装了 hexo 的那个路径里初始化），输入以下命令：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo init &lt;项目名&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>cd</code>进入项目中，输入<code>npx hexo s</code>，输入后会在本地的 4000 端口启动项目。</li><li>在浏览器输入<a href="http://localhost:4000/">http://localhost:4000/</a>，可以看到一份 HelloWorld 文档，证明博客已经搭建好了。</li></ol><h2 id="9-将静态的博客网站挂载到-GitHub-Pages-上"><a href="#9-将静态的博客网站挂载到-GitHub-Pages-上" class="headerlink" title="9.将静态的博客网站挂载到 GitHub Pages 上"></a>9.将静态的博客网站挂载到 GitHub Pages 上</h2><ol><li>安装 hexo-deployer-git</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-deployer-git</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><ol start="2"><li>修改_config.yml 文件，这个文件为网站的配置文件，可以打开<a href="https://hexo.io/zh-cn/docs/configuration">官方的教程</a>，修改 deploy 配置：</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&quot;git&quot;</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">&lt;仓库地址&gt;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><ol start="3"><li>改好后，输入以下命令将博客部署到 GitHub 上：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx hexo clean; npx hexo generate; npx hexo deploy</span><br><span class="line">// 可以简写为 npx hexo cl; npx hexo g; npx hexo d</span><br></pre></td></tr></table></figure><ul><li><code>npx hexo clean</code>：删除之前生成的静态文件。</li><li><code>npx hexo generate</code>：生成静态文件。</li><li><code>npx hexo deploy</code>：将静态文件部署到 GitHub 上。</li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/blog/categories/index.html"/>
      <url>/blog/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/blog/about/index.html"/>
      <url>/blog/about/index.html</url>
      
        <content type="html"><![CDATA[<p>如果我的文章帮助到了您，或者您想支持我的网站，可以扫描下方二维码进行投喂。</p><!-- tab 微信 --><p><img src="https://lanal.site/file/blog/wechat.jpg"></p><!-- endtab --><!-- tab 支付宝 --><p><img src="https://lanal.site/file/blog/alipay.jpg"></p><!-- endtab -->]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>图库</title>
      <link href="/blog/gallery/index.html"/>
      <url>/blog/gallery/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="几张喜欢的图片🥰🥰"><a href="#几张喜欢的图片🥰🥰" class="headerlink" title="几张喜欢的图片🥰🥰"></a>几张喜欢的图片🥰🥰</h2><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://lanal.site/file/blog/post-cover/1.jpg","alt":""},{"url":"https://lanal.site/file/blog/post-cover/2.jpg","alt":""},{"url":"https://lanal.site/file/blog/post-cover/3.jpg","alt":""},{"url":"https://lanal.site/file/blog/post-cover/4.jpg","alt":""},{"url":"https://lanal.site/file/blog/post-cover/5.jpg","alt":""},{"url":"https://lanal.site/file/blog/post-cover/6.jpg","alt":""},{"url":"https://lanal.site/file/blog/post-cover/7.jpg","alt":""},{"url":"https://lanal.site/file/blog/post-cover/8.jpg","alt":""},{"url":"https://lanal.site/file/blog/post-cover/9.jpg","alt":""},{"url":"https://lanal.site/file/blog/post-cover/10.jpg","alt":""},{"url":"https://lanal.site/file/blog/post-cover/11.jpg","alt":""},{"url":"https://lanal.site/file/blog/post-cover/12.jpg","alt":""},{"url":"https://lanal.site/file/blog/post-cover/13.jpg","alt":""},{"url":"https://lanal.site/file/blog/post-cover/14.jpg","alt":""},{"url":"https://lanal.site/file/blog/post-cover/15.jpg","alt":""},{"url":"https://lanal.site/file/blog/post-cover/16.jpg","alt":""},{"url":"https://lanal.site/file/blog/post-cover/17.jpg","alt":""},{"url":"https://lanal.site/file/blog/post-cover/18.jpg","alt":""},{"url":"https://lanal.site/file/blog/post-cover/19.jpg","alt":""},{"url":"https://lanal.site/file/blog/post-cover/20.jpg","alt":""},{"url":"https://lanal.site/file/blog/post-cover/21.jpg","alt":""}]</div>      <div class="gallery-items">      </div>    </div><div class="note warning flat"><p>如有侵权，请联系我删除</p></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/blog/link/index.html"/>
      <url>/blog/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/css/universe.css"/>
      <url>/blog/css/universe.css</url>
      
        <content type="html"><![CDATA[/* 背景宇宙星光  */#universe{  display: block;  position: fixed;  margin: 0;  padding: 0;  border: 0;  outline: 0;  left: 0;  top: 0;  width: 100%;  height: 100%;  pointer-events: none;  /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */  z-index: -1;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/css/corner-indicator.css"/>
      <url>/blog/css/corner-indicator.css</url>
      
        <content type="html"><![CDATA[:root{--pace-color: #49B1F5;}[data-theme='dark'] {--pace-color: #292929;}.pace {-webkit-pointer-events: none;pointer-events: none;-webkit-user-select: none;-moz-user-select: none;user-select: none;}.pace .pace-activity {display: block;position: fixed;z-index: 2000;top: 0;right: 0;width: 300px;height: 300px;background: var(--pace-color);-webkit-transition: -webkit-transform 0.3s;transition: transform 0.3s;-webkit-transform: translateX(100%) translateY(-100%) rotate(45deg);transform: translateX(100%) translateY(-100%) rotate(45deg);pointer-events: none;}.pace.pace-active .pace-activity {-webkit-transform: translateX(50%) translateY(-50%) rotate(45deg);transform: translateX(50%) translateY(-50%) rotate(45deg);}.pace .pace-activity::before,.pace .pace-activity::after {-moz-box-sizing: border-box;box-sizing: border-box;position: absolute;bottom: 30px;left: 50%;display: block;border: 5px solid #fff;border-radius: 50%;content: '';}.pace .pace-activity::before {margin-left: -40px;width: 80px;height: 80px;border-right-color: rgba(0, 0, 0, .2);border-left-color: rgba(0, 0, 0, .2);-webkit-animation: pace-theme-corner-indicator-spin 3s linear infinite;animation: pace-theme-corner-indicator-spin 3s linear infinite;}.pace .pace-activity::after {bottom: 50px;margin-left: -20px;width: 40px;height: 40px;border-top-color: rgba(0, 0, 0, .2);border-bottom-color: rgba(0, 0, 0, .2);-webkit-animation: pace-theme-corner-indicator-spin 1s linear infinite;animation: pace-theme-corner-indicator-spin 1s linear infinite;}@-webkit-keyframes pace-theme-corner-indicator-spin {0% { -webkit-transform: rotate(0deg); }100% { -webkit-transform: rotate(359deg); }}@keyframes pace-theme-corner-indicator-spin {0% { transform: rotate(0deg); }100% { transform: rotate(359deg); }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>视频</title>
      <link href="/blog/movie/index.html"/>
      <url>/blog/movie/index.html</url>
      
        <content type="html"><![CDATA[<p>这里啥也没有🤣👉🤡</p><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=80433022&bvid=BV1GJ411x7h7&cid=137649199&p=1&danmaku=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/blog/music/index.html"/>
      <url>/blog/music/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="我喜欢的几首歌🥰🥰（可惜这里不能放要vip的😫）"><a href="#我喜欢的几首歌🥰🥰（可惜这里不能放要vip的😫）" class="headerlink" title="我喜欢的几首歌🥰🥰（可惜这里不能放要vip的😫）"></a>我喜欢的几首歌🥰🥰（可惜这里不能放要vip的😫）</h2>    <div id="aplayer-RAbEJXFh" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="9992949674" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/js/series.js"/>
      <url>/blog/js/series.js</url>
      
        <content type="html"><![CDATA[// 为系列文章的标签添加美化效果// 11个美化图标var icons = ["🍉", "🥭", "🍇", "🍈", "🍊", "🍍", "🍓", "🥝", "🥥", "🫐", "🍒"];var list = document  .querySelector(".note, .info, .no-icon, .flat")  .querySelectorAll("li");for (let i = 0; i < list.length; i++) {  const item = list[i];  const anchor = item.querySelector("a");  // 添加美化图标  anchor.textContent = icons[i] + anchor.textContent;  // 添加当前位置  if (anchor.href == window.location.href) {    item.innerHTML = item.innerHTML + " ⬅当前位置🛬";  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/css/custom.css"/>
      <url>/blog/css/custom.css</url>
      
        <content type="html"><![CDATA[[data-theme="dark"] .magnet_item {  background: #1e1e1e;  color: antiquewhite;}[data-theme="dark"] .magnet_link_context {  color: antiquewhite;}[data-theme="dark"] .magnet_item:hover {  background: #3ecdf1;  color: #f2f2f2;}/* 翻页按钮居中 */#pagination {  width: 100%;  margin: auto;}/* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: max-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(3) .menus_item_child {  left: -30px;}.menus_items .menus_item:nth-child(4) .menus_item_child {  left: -80px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/blog/tags/index.html"/>
      <url>/blog/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/js/universe.js"/>
      <url>/blog/js/universe.js</url>
      
        <content type="html"><![CDATA[function dark() {  window.requestAnimationFrame =    window.requestAnimationFrame ||    window.mozRequestAnimationFrame ||    window.webkitRequestAnimationFrame ||    window.msRequestAnimationFrame;  var n,    e,    i,    h,    t = 0.05,    s = document.getElementById("universe"),    o = !0,    a = "180,184,240",    r = "226,225,142",    d = "226,225,224",    c = [];  function f() {    (n = window.innerWidth),      (e = window.innerHeight),      (i = 0.216 * n),      s.setAttribute("width", n),      s.setAttribute("height", e);  }  function u() {    h.clearRect(0, 0, n, e);    for (var t = c.length, i = 0; i < t; i++) {      var s = c[i];      s.move(), s.fadeIn(), s.fadeOut(), s.draw();    }  }  function y() {    (this.reset = function () {      (this.giant = m(3)),        (this.comet = !this.giant && !o && m(10)),        (this.x = l(0, n - 10)),        (this.y = l(0, e)),        (this.r = l(1.1, 2.6)),        (this.dx = l(t, 6 * t) + (this.comet + 1 - 1) * t * l(50, 120) + 2 * t),        (this.dy = -l(t, 6 * t) - (this.comet + 1 - 1) * t * l(50, 120)),        (this.fadingOut = null),        (this.fadingIn = !0),        (this.opacity = 0),        (this.opacityTresh = l(0.2, 1 - 0.4 * (this.comet + 1 - 1))),        (this.do = l(5e-4, 0.002) + 0.001 * (this.comet + 1 - 1));    }),      (this.fadeIn = function () {        this.fadingIn &&          ((this.fadingIn = !(this.opacity > this.opacityTresh)),          (this.opacity += this.do));      }),      (this.fadeOut = function () {        this.fadingOut &&          ((this.fadingOut = !(this.opacity < 0)),          (this.opacity -= this.do / 2),          (this.x > n || this.y < 0) && ((this.fadingOut = !1), this.reset()));      }),      (this.draw = function () {        if ((h.beginPath(), this.giant))          (h.fillStyle = "rgba(" + a + "," + this.opacity + ")"),            h.arc(this.x, this.y, 2, 0, 2 * Math.PI, !1);        else if (this.comet) {          (h.fillStyle = "rgba(" + d + "," + this.opacity + ")"),            h.arc(this.x, this.y, 1.5, 0, 2 * Math.PI, !1);          for (var t = 0; t < 30; t++)            (h.fillStyle =              "rgba(" +              d +              "," +              (this.opacity - (this.opacity / 20) * t) +              ")"),              h.rect(                this.x - (this.dx / 4) * t,                this.y - (this.dy / 4) * t - 2,                2,                2              ),              h.fill();        } else          (h.fillStyle = "rgba(" + r + "," + this.opacity + ")"),            h.rect(this.x, this.y, this.r, this.r);        h.closePath(), h.fill();      }),      (this.move = function () {        (this.x += this.dx),          (this.y += this.dy),          !1 === this.fadingOut && this.reset(),          (this.x > n - n / 4 || this.y < 0) && (this.fadingOut = !0);      }),      setTimeout(function () {        o = !1;      }, 50);  }  function m(t) {    return Math.floor(1e3 * Math.random()) + 1 < 10 * t;  }  function l(t, i) {    return Math.random() * (i - t) + t;  }  f(),    window.addEventListener("resize", f, !1),    (function () {      h = s.getContext("2d");      for (var t = 0; t < i; t++) (c[t] = new y()), c[t].reset();      u();    })(),    (function t() {      document.getElementsByTagName("html")[0].getAttribute("data-theme") ==        "dark" && u(),        window.requestAnimationFrame(t);    })();}dark();]]></content>
      
    </entry>
    
    
  
</search>
